{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///dayspan.min.js","webpack:///webpack/bootstrap 4619b077cf9d8c89d702","webpack:///external {\"commonjs\":\"moment\",\"commonjs2\":\"moment\",\"amd\":\"moment\",\"root\":\"moment\"}","webpack:///./src/Op.ts","webpack:///./src/Functions.ts","webpack:///./src/Constants.ts","webpack:///./src/Units.ts","webpack:///./src/Pattern.ts","webpack:///./src/DaySpan.ts","webpack:///./src/Suffix.ts","webpack:///./src/Schedule.ts","webpack:///./src/Time.ts","webpack:///./src/Parse.ts","webpack:///./src/Day.ts","webpack:///./src/CalendarDay.ts","webpack:///./src/CalendarEvent.ts","webpack:///./src/Calendar.ts","webpack:///./src/Month.ts","webpack:///./src/Weekday.ts","webpack:///./src/Sort.ts"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_0__","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","operate","value","op","absolute","isFinite","Math","abs","Op","NONE","FLOOR","floor","CEIL","ceil","ROUND","round","TRUNCATE","DOWN","UP","Functions","isArray","input","Array","isArrayEquals","x","y","length","isString","isNumber","isObject","isDefined","isFrequencyValueEvery","every","isFrequencyValueOneOf","coalesce","a","b","pad","padding","before","padNumber","first","substring","Constants","MILLIS_IN_SECOND","MILLIS_IN_MINUTE","MILLIS_IN_HOUR","MILLIS_IN_DAY","MILLIS_IN_WEEK","DAYS_IN_WEEK","MONTHS_IN_YEAR","HOURS_IN_DAY","MONTH_MIN","MONTH_MAX","DAY_MIN","DAY_MAX","HOUR_MIN","HOUR_MAX","MINUTE_MIN","MINUTE_MAX","SECOND_MIN","SECOND_MAX","MILLIS_MIN","MILLIS_MAX","WEEKDAY_MIN","WEEKDAY_MAX","DURATION_DEFAULT","DURATION_DEFAULT_UNIT_ALL","DURATION_DEFAULT_UNIT_TIMES","DURATION_DEFAULT_UNIT","all","DURATION_TO_MILLIS","minute","minutes","hour","hours","day","days","week","weeks","month","months","MAX_EVENTS_PER_DAY","WEEK_OF_MONTH_MINIMUM_WEEKDAY","Units","DaySpan__a","DaySpan_DaySpan","DaySpan","start","end","time","contains","matchesDay","sameDay","matchesWeek","sameWeek","matchesMonth","sameMonth","matchesYear","sameYear","millis","millisBetween","seconds","secondsBetween","minutesBetween","hoursBetween","daysBetween","weeksBetween","monthsBetween","years","yearsBetween","summary","type","dayOfWeek","short","repeat","contextual","delimiter","formats","SUMMARY_FORMATS","today","Day_Day","showStartYear","showEndYear","format","intersects","span","intersection","max","min","isAfter","union","point","DAY","year","WEEK","MONTH","YEAR","Suffix","_CACHE","_CACHE_SIZE","determine","MAP","append","suffix","__WEBPACK_IMPORTED_MODULE_6_moment__","Schedule_Schedule","Schedule","set","Parse_Parse","schedule","times","updateDurationInDays","lastTime","toMilliseconds","duration","durationUnit","exclude","durationInDays","updateChecks","checks","givenFrequency","weekOfYear","fullWeekOfYear","weekspanOfYear","lastFullWeekOfYear","lastWeekspanOfYear","weekOfMonth","weekspanOfMonth","fullWeekOfMonth","lastWeekspanOfMonth","lastFullWeekOfMonth","dayOfMonth","lastDayOfMonth","dayOfYear","matchesSpan","isSameOrAfter","isBefore","matchesRange","isSameOrBefore","isExcluded","dayIdentifier","isIncluded","_i","_a","check","coversDay","findStartingDay","nextDay","includeDay","lookAhead","next","setNext","iterateDays","nextDays","nexts","push","prevDay","lookBack","prev","setPrev","prevDays","prevs","onDay","lookup","iterated","matchesTime","sameTime","isFullDay","getFullSpan","add","getTimeSpan","withTime","getSpansOver","spans","getSpanOver","getSpansOn","behind","getExclusions","returnDays","exclusions","dayIdentifierKey","parseInt","fromDayIdentifier","toInput","returnTimes","timeFormat","alwaysDuration","defaultUnit","out","toString","describe","thing","includeRange","includeTimes","includeDuration","includeExcludes","describeRule","CACHE","describeArray","excludes","unit","map","everyOffset","the","on","required","valueEvery","offset","valueOne","array","last","Time_Time","Time","second","millisecond","formatterEntries","FORMATTERS","handled","k","entry","part","size","formatter","charAt","toIdentifer","toObject","parse","fromString","matches","REGEX","exec","h","build","fromIdentifier","SSS","t","HH","hh","kk","mm","ss","SS","A","H","S","Parse","frequency","given","offset_1","every_1","map_1","unix","fromArray","fromObject","input_1","timeInput","input_2","fullDay","checks_1","calendarSchedule","event","cron","pattern","__WEBPACK_IMPORTED_MODULE_4_moment__","Day","date","quarter","getLastDayOfMonth","getWeekOfYear","getWeekspanOfYear","getFullWeekOfYear","getLastWeekspanOfYear","getLastFullWeekOfYear","getWeekOfMonth","getWeekspanOfMonth","getFullWeekOfMonth","getLastWeekspanOfMonth","getLastFullWeekOfMonth","getDayIdentifier","weekIdentifier","getWeekIdentifier","monthIdentifier","getMonthIdentifier","quarterIdentifier","getQuarterIdentifier","sameQuarter","sameHour","sameMinute","precision","diff","isBetween","inclusive","mutate","mutator","toMoment","amount","relative","relativeDays","withDayOfMonth","withDayOfWeek","withDayOfYear","withMonth","relativeMonths","prevMonth","nextMonth","withWeek","relativeWeek","withWeekOfYear","withFullWeekOfYear","withWeekspanOfYear","withWeekOfMonth","withWeekspanOfMonth","withFullWeekOfMonth","relativeWeeks","prevWeek","nextWeek","withYear","relativeYears","prevYear","nextYear","withHour","relativeHours","prevHour","nextHour","withTimes","asTime","startOf","isStart","endOf","isEnd","startOfHour","isStartOfHour","endOfHour","isEndOfHour","startOfWeek","isStartOfWeek","endOfWeek","isEndOfWeek","startOfMonth","isStartOfMonth","endOfMonth","isEndOfMonth","daysInMonth","startOfYear","isStartOfYear","endOfYear","isEndOfYear","daysInYear","weeksInYear","utc","keepLocalTime","clone","toDate","toArray","toJSON","toISOString","keepOffset","isDST","isLeapYear","now","tomorrow","fromMoment","moment","isValid","fromFormat","fromDate","id","lastOfYear","firstOfYear","weeksMax","lastWeek","dom","dow","sundayDate","LOAD_TIME","__extends","extendStatics","setPrototypeOf","__proto__","__","constructor","create","CalendarDay_CalendarDay","_super","CalendarDay","_this","apply","arguments","currentDay","currentWeek","currentMonth","currentYear","currentOffset","selectedDay","selectedWeek","selectedMonth","selectedYear","inCalendar","events","updateCurrent","current","updateSelected","selected","clearSelected","CalendarEvent_CalendarEvent","CalendarEvent","actualDay","row","col","starting","isPoint","ending","Calendar_Calendar","Calendar","moveStart","moveEnd","fill","minimumSize","repeatCovers","listTimes","eventsOutside","updateRows","updateColumns","eventSorter","selection","schedules","filled","withInput","refresh","removeSchedules","addSchedules","withMinimumSize","withRepeatCovers","refreshEvents","withListTimes","withEventsOutside","withUpdateRows","refreshRows","withUpdateColumns","refreshColumns","split","by","resetDays","refreshCurrent","refreshSelection","resetFilled","total","splice","eventsForDay","sort","eventToRow","onlyFullDay","used","event_1","rowIndex","_b","_c","event_2","markers","event_3","parent","markers_1","marker","markers_2","iterator","getTimes","covers","entries","entryIndex","event_4","eventId","timeIndex","over","findSchedule","delayRefresh","schedules_1","removeSchedule","found","indexOf","addSchedule","allowDuplicates","parsed","schedules_2","select","unselect","move","jump","around","focus","mover","Month","JANUARY","FEBRUARY","MARCH","APRIL","MAY","JUNE","JULY","AUGUST","SEPTEMBER","OCTOBER","NOVEMBER","DECEMBER","LIST","Weekday","SUNDAY","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","ENDS","Pattern_Pattern","Pattern","listed","rules","PROPS","prop","rule","isMatch","exactlyWith","exactly","curr","ruleOffset","withName","PatternMap","findMatch","listedOnly","Patterns_1","Patterns","Pattern__i","Patterns_2","Pattern_pattern","Sorts","Start","End","FullDay","Duration","Desc","sorter","Alphabetical","getString","as","bs","localeCompare","Ordered","getOrder","List","list","list_1","compare"],"mappings":"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","file":"dayspan.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"moment\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ds\", [\"moment\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ds\"] = factory(require(\"moment\"));\n\telse\n\t\troot[\"ds\"] = factory(root[\"moment\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"moment\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ds\", [\"moment\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ds\"] = factory(require(\"moment\"));\n\telse\n\t\troot[\"ds\"] = factory(root[\"moment\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(2);\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./src/Functions.ts\n\r\n/**\r\n * The class which contains commonly used functions by the library. These\r\n * functions and variables exist in a class so they may be overridden if\r\n * desired.\r\n */\r\nvar Functions = (function () {\r\n    function Functions() {\r\n    }\r\n    /**\r\n     * Determines whether the given input is an array.\r\n     *\r\n     * @param input The variable to test.\r\n     * @return True if the variable is an array, otherwise false.\r\n     */\r\n    Functions.isArray = function (input) {\r\n        return input instanceof Array;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Functions.isArrayEquals = function (x, y) {\r\n        if (x === y)\r\n            return true;\r\n        if (x.length !== y.length)\r\n            return false;\r\n        for (var i = 0; i < x.length; i++) {\r\n            if (x[i] !== y[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Determines whether the given input is a string.\r\n     *\r\n     * @param input The variable to test.\r\n     * @return True if the variable is a string, otherwise false.\r\n     */\r\n    Functions.isString = function (input) {\r\n        return typeof (input) === 'string';\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Functions.isNumber = function (input) {\r\n        return isFinite(input);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Functions.isObject = function (input) {\r\n        return !this.isArray(input) && typeof (input) === 'object';\r\n    };\r\n    /**\r\n     * Determines whether the given input is defined.\r\n     *\r\n     * @param input The variable to test.\r\n     * @return True if the variable is defined, otherwise false.\r\n     */\r\n    Functions.isDefined = function (input) {\r\n        return typeof (input) !== 'undefined';\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Functions.isFrequencyValueEvery = function (input) {\r\n        return this.isObject(input) && this.isNumber(input.every);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Functions.isFrequencyValueOneOf = function (input) {\r\n        return this.isArray(input) && input.length > 0;\r\n    };\r\n    /**\r\n     * Returns the first argument which is defined.\r\n     *\r\n     * @param a The first argument to look at.\r\n     * @param b The second argument to look at.\r\n     * @return The first defined argument.\r\n     * @see [[Functions.isDefined]]\r\n     */\r\n    Functions.coalesce = function (a, b, c) {\r\n        return this.isDefined(a) ? a : (this.isDefined(b) ? b : c);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Functions.pad = function (x, length, padding, before) {\r\n        while (x.length < length) {\r\n            before ? x = padding + x : x = x + padding;\r\n        }\r\n        return x;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Functions.padNumber = function (x, length, first) {\r\n        if (first === void 0) { first = length; }\r\n        return this.pad(x + '', length, '0', true).substring(0, first);\r\n    };\r\n    return Functions;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Constants.ts\n\r\n/**\r\n * A class that stores commonly used values.\r\n */\r\nvar Constants = (function () {\r\n    function Constants() {\r\n    }\r\n    /**\r\n     * The number of milliseconds in a second.\r\n     */\r\n    Constants.MILLIS_IN_SECOND = 1000;\r\n    /**\r\n     * The number of milliseconds in a minute.\r\n     */\r\n    Constants.MILLIS_IN_MINUTE = Constants.MILLIS_IN_SECOND * 60;\r\n    /**\r\n     * The number of milliseconds in an hour.\r\n     */\r\n    Constants.MILLIS_IN_HOUR = Constants.MILLIS_IN_MINUTE * 60;\r\n    /**\r\n     * The number of milliseconds in a day (not including DST days).\r\n     */\r\n    Constants.MILLIS_IN_DAY = Constants.MILLIS_IN_HOUR * 24;\r\n    /**\r\n     * The number of milliseconds in a week (not including ones that include DST).\r\n     */\r\n    Constants.MILLIS_IN_WEEK = Constants.MILLIS_IN_DAY * 7;\r\n    /**\r\n     * The number of days in a week.\r\n     */\r\n    Constants.DAYS_IN_WEEK = 7;\r\n    /**\r\n     * The number of months in a year.\r\n     */\r\n    Constants.MONTHS_IN_YEAR = 12;\r\n    /**\r\n     * The number of hours in a day (not including DST days).\r\n     */\r\n    Constants.HOURS_IN_DAY = 24;\r\n    /**\r\n     * The first month of the year.\r\n     */\r\n    Constants.MONTH_MIN = 0;\r\n    /**\r\n     * The last month of the year.\r\n     */\r\n    Constants.MONTH_MAX = 11;\r\n    /**\r\n     * The first day of a month.\r\n     */\r\n    Constants.DAY_MIN = 1;\r\n    /**\r\n     * The last day of the longest month.\r\n     */\r\n    Constants.DAY_MAX = 31;\r\n    /**\r\n     * The first hour of the day.\r\n     */\r\n    Constants.HOUR_MIN = 0;\r\n    /**\r\n     * The last hour of the day.\r\n     */\r\n    Constants.HOUR_MAX = 23;\r\n    /**\r\n     * The first minute of the hour.\r\n     */\r\n    Constants.MINUTE_MIN = 0;\r\n    /**\r\n     * The last minute of the hour.\r\n     */\r\n    Constants.MINUTE_MAX = 59;\r\n    /**\r\n     * The first second of the minute.\r\n     */\r\n    Constants.SECOND_MIN = 0;\r\n    /**\r\n     * The last second of the minute.\r\n     */\r\n    Constants.SECOND_MAX = 59;\r\n    /**\r\n     * The first millisecond of the second.\r\n     */\r\n    Constants.MILLIS_MIN = 0;\r\n    /**\r\n     * The last millisecond of the second.\r\n     */\r\n    Constants.MILLIS_MAX = 999;\r\n    /**\r\n     * The first day of the week.\r\n     */\r\n    Constants.WEEKDAY_MIN = 0;\r\n    /**\r\n     * The last day of the week.\r\n     */\r\n    Constants.WEEKDAY_MAX = 6;\r\n    /**\r\n     * The default duration for an event.\r\n     */\r\n    Constants.DURATION_DEFAULT = 1;\r\n    /**\r\n     * The default duration unit for an all day event.\r\n     */\r\n    Constants.DURATION_DEFAULT_UNIT_ALL = 'days';\r\n    /**\r\n     * The default duration unit for an event at a given time.\r\n     */\r\n    Constants.DURATION_DEFAULT_UNIT_TIMES = 'hours';\r\n    /**\r\n     * Computes the duration unit given its for an all day event.\r\n     *\r\n     * @param all If the event is all day.\r\n     * @return The default unit for the event.\r\n     */\r\n    Constants.DURATION_DEFAULT_UNIT = function (all) { return all ? Constants.DURATION_DEFAULT_UNIT_ALL : Constants.DURATION_DEFAULT_UNIT_TIMES; };\r\n    /**\r\n     * The number of milliseconds for various duration units. These are worse case\r\n     * scenario and do not include DST changes.\r\n     */\r\n    Constants.DURATION_TO_MILLIS = {\r\n        minute: Constants.MILLIS_IN_MINUTE,\r\n        minutes: Constants.MILLIS_IN_MINUTE,\r\n        hour: Constants.MILLIS_IN_HOUR,\r\n        hours: Constants.MILLIS_IN_HOUR,\r\n        day: Constants.MILLIS_IN_DAY,\r\n        days: Constants.MILLIS_IN_DAY,\r\n        week: Constants.MILLIS_IN_WEEK,\r\n        weeks: Constants.MILLIS_IN_WEEK,\r\n        month: Constants.MILLIS_IN_DAY * Constants.DAY_MAX,\r\n        months: Constants.MILLIS_IN_DAY * Constants.DAY_MAX\r\n    };\r\n    /**\r\n     * The maximum estimated number of events per day. This is used to calculate\r\n     * [[CalendarEvent.id]] to give each event a unique ID. If you think you will\r\n     * have more events than this per day, you can enlarge the value.\r\n     */\r\n    Constants.MAX_EVENTS_PER_DAY = 24;\r\n    /**\r\n     * The day of the week which determines the first week of the year or month.\r\n     * By default this day is Thursday.\r\n     */\r\n    Constants.WEEK_OF_MONTH_MINIMUM_WEEKDAY = 4;\r\n    return Constants;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Op.ts\n\r\n/**\r\n * An operation that can be performed on a single number.\r\n */\r\nvar Op;\r\n(function (Op) {\r\n    /**\r\n     * The number is returned unmodified.\r\n     */\r\n    Op[Op[\"NONE\"] = 0] = \"NONE\";\r\n    /**\r\n     * The number is rounded down to the nearest whole number.\r\n     */\r\n    Op[Op[\"FLOOR\"] = 1] = \"FLOOR\";\r\n    /**\r\n     * The number is rounded up to the nearest whole number.\r\n     */\r\n    Op[Op[\"CEIL\"] = 2] = \"CEIL\";\r\n    /**\r\n     * The number is rounded up or down depending on if the fractional value is\r\n     * greater than or less than 0.5 respectively.\r\n     */\r\n    Op[Op[\"ROUND\"] = 3] = \"ROUND\";\r\n    /**\r\n     * The fractional part of the number is dropped.\r\n     */\r\n    Op[Op[\"TRUNCATE\"] = 4] = \"TRUNCATE\";\r\n    /**\r\n     * The number is rounded up when positive and down when negative. This is\r\n     * effectively ceiling the absolute value where the result preserves the sign.\r\n     */\r\n    Op[Op[\"UP\"] = 5] = \"UP\";\r\n    /**\r\n     * The number is rounded down when positive and up when negative. This is\r\n     * effectively floor the absolute value where the result preserves the sign.\r\n     */\r\n    Op[Op[\"DOWN\"] = 6] = \"DOWN\";\r\n})(Op = Op || (Op = {}));\r\n/**\r\n * Performs the requested operation on the given number, optionally taking\r\n * the absolute value of the number before the operation.\r\n *\r\n * @param value The number to operate on.\r\n * @param op The operation to perform.\r\n * @param absolute If the number should be positive before the operation.\r\n * @return The operated result, or the original value if its not a valid number.\r\n */\r\nfunction operate(value, op, absolute) {\r\n    if (absolute === void 0) { absolute = false; }\r\n    if (isFinite(value)) {\r\n        if (absolute) {\r\n            value = Math.abs(value);\r\n        }\r\n        switch (op) {\r\n            case Op.NONE:\r\n                return value;\r\n            case Op.FLOOR:\r\n                return Math.floor(value);\r\n            case Op.CEIL:\r\n                return Math.ceil(value);\r\n            case Op.ROUND:\r\n                return Math.round(value);\r\n            case Op.TRUNCATE:\r\n            case Op.DOWN:\r\n                return value < 0 ? Math.ceil(value) : Math.floor(value);\r\n            case Op.UP:\r\n                return value < 0 ? Math.floor(value) : Math.ceil(value);\r\n        }\r\n    }\r\n    return value;\r\n}\r\n\n// CONCATENATED MODULE: ./src/Units.ts\n\r\n/**\r\n * Units of time that are compromised of 1 or more days for the [[Calendar]] class.\r\n */\r\nvar Units;\r\n(function (Units) {\r\n    Units[Units[\"DAY\"] = 0] = \"DAY\";\r\n    Units[Units[\"WEEK\"] = 1] = \"WEEK\";\r\n    Units[Units[\"MONTH\"] = 2] = \"MONTH\";\r\n    Units[Units[\"YEAR\"] = 3] = \"YEAR\";\r\n})(Units = Units || (Units = {}));\r\n\n// CONCATENATED MODULE: ./src/DaySpan.ts\n\r\n\r\n\r\n\r\n/**\r\n * A class for a range of time between two [[Day]] timestamps.\r\n */\r\nvar DaySpan_DaySpan = (function () {\r\n    /**\r\n     * Creates a new span of time.\r\n     *\r\n     * @param start The starting timestamp.\r\n     * @param end The ending timestamp.\r\n     */\r\n    function DaySpan(start, end) {\r\n        this.start = start;\r\n        this.end = end;\r\n    }\r\n    Object.defineProperty(DaySpan.prototype, \"isPoint\", {\r\n        /**\r\n         * Whether this span starts and ends on the same timestamp.\r\n         */\r\n        get: function () {\r\n            return this.start.time === this.end.time;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Determines whether the given timestamp lies between the start and end\r\n     * timestamp.\r\n     *\r\n     * @param day The timestamp to test.\r\n     * @returns True if the day is >= the start and <= the end of this span.\r\n     */\r\n    DaySpan.prototype.contains = function (day) {\r\n        return day.time >= this.start.time && day.time <= this.end.time;\r\n    };\r\n    /**\r\n     * Determines whether the given timestamp is between the start and end\r\n     * timestamp or lies on the same day as the start or end timestamp.\r\n     *\r\n     * @param day The timestamp to test.\r\n     * @see [[Day.sameDay]]\r\n     */\r\n    DaySpan.prototype.matchesDay = function (day) {\r\n        return this.contains(day) || day.sameDay(this.start) || day.sameDay(this.end);\r\n    };\r\n    /**\r\n     * Determines whether the given timestamp is between the start and end\r\n     * timestamp or lies on the same week as the start or end timestamp.\r\n     *\r\n     * @param day The timestamp to test.\r\n     * @see [[Day.sameWeek]]\r\n     */\r\n    DaySpan.prototype.matchesWeek = function (day) {\r\n        return this.contains(day) || day.sameWeek(this.start) || day.sameWeek(this.end);\r\n    };\r\n    /**\r\n     * Determines whether the given timestamp is between the start and end\r\n     * timestamp or lies on the same month as the start or end timestamp.\r\n     *\r\n     * @param day The timestamp to test.\r\n     * @see [[Day.sameMonth]]\r\n     */\r\n    DaySpan.prototype.matchesMonth = function (day) {\r\n        return this.contains(day) || day.sameMonth(this.start) || day.sameMonth(this.end);\r\n    };\r\n    /**\r\n     * Determines whether the given timestamp is between the start and end\r\n     * timestamp or lies on the same year as the start or end timestamp.\r\n     *\r\n     * @param day The timestamp to test.\r\n     * @see [[Day.sameYear]]\r\n     */\r\n    DaySpan.prototype.matchesYear = function (day) {\r\n        return this.contains(day) || day.sameYear(this.start) || day.sameYear(this.end);\r\n    };\r\n    /**\r\n     * Calculates the number of milliseconds between the start and end timestamp.\r\n     *\r\n     * @param op The operation to perform on the result.\r\n     * @param absolute Whether the result should always be positive.\r\n     * @returns The time between the start and end timestamp.\r\n     * @see [[Day.millisBetween]]\r\n     */\r\n    DaySpan.prototype.millis = function (op, absolute) {\r\n        if (op === void 0) { op = Op.DOWN; }\r\n        if (absolute === void 0) { absolute = true; }\r\n        return this.start.millisBetween(this.end, op, absolute);\r\n    };\r\n    /**\r\n     * Calculates the number of seconds between the start and end timestamp.\r\n     *\r\n     * @param op The operation to perform on the result.\r\n     * @param absolute Whether the result should always be positive.\r\n     * @returns The time between the start and end timestamp.\r\n     * @see [[Day.secondsBetween]]\r\n     */\r\n    DaySpan.prototype.seconds = function (op, absolute) {\r\n        if (op === void 0) { op = Op.DOWN; }\r\n        if (absolute === void 0) { absolute = true; }\r\n        return this.start.secondsBetween(this.end, op, absolute);\r\n    };\r\n    /**\r\n     * Calculates the number of minutes between the start and end timestamp.\r\n     *\r\n     * @param op The operation to perform on the result.\r\n     * @param absolute Whether the result should always be positive.\r\n     * @returns The time between the start and end timestamp.\r\n     * @see [[Day.minutesBetween]]\r\n     */\r\n    DaySpan.prototype.minutes = function (op, absolute) {\r\n        if (op === void 0) { op = Op.DOWN; }\r\n        if (absolute === void 0) { absolute = true; }\r\n        return this.start.minutesBetween(this.end, op, absolute);\r\n    };\r\n    /**\r\n     * Calculates the number of hours between the start and end timestamp.\r\n     *\r\n     * @param op The operation to perform on the result.\r\n     * @param absolute Whether the result should always be positive.\r\n     * @returns The time between the start and end timestamp.\r\n     * @see [[Day.hoursBetween]]\r\n     */\r\n    DaySpan.prototype.hours = function (op, absolute) {\r\n        if (op === void 0) { op = Op.DOWN; }\r\n        if (absolute === void 0) { absolute = true; }\r\n        return this.start.hoursBetween(this.end, op, absolute);\r\n    };\r\n    /**\r\n     * Calculates the number of days between the start and end timestamp.\r\n     *\r\n     * @param op The operation to perform on the result.\r\n     * @param absolute Whether the result should always be positive.\r\n     * @returns The time between the start and end timestamp.\r\n     * @see [[Day.daysBetween]]\r\n     */\r\n    DaySpan.prototype.days = function (op, absolute) {\r\n        if (op === void 0) { op = Op.DOWN; }\r\n        if (absolute === void 0) { absolute = true; }\r\n        return this.start.daysBetween(this.end, op, absolute);\r\n    };\r\n    /**\r\n     * Calculates the number of weeks between the start and end timestamp.\r\n     *\r\n     * @param op The operation to perform on the result.\r\n     * @param absolute Whether the result should always be positive.\r\n     * @returns The time between the start and end timestamp.\r\n     * @see [[Day.weeksBetween]]\r\n     */\r\n    DaySpan.prototype.weeks = function (op, absolute) {\r\n        if (op === void 0) { op = Op.DOWN; }\r\n        if (absolute === void 0) { absolute = true; }\r\n        return this.start.weeksBetween(this.end, op, absolute);\r\n    };\r\n    /**\r\n     * Calculates the number of months between the start and end timestamp.\r\n     *\r\n     * @param op The operation to perform on the result.\r\n     * @param absolute Whether the result should always be positive.\r\n     * @returns The time between the start and end timestamp.\r\n     * @see [[Day.monthsBetween]]\r\n     */\r\n    DaySpan.prototype.months = function (op, absolute) {\r\n        if (op === void 0) { op = Op.DOWN; }\r\n        if (absolute === void 0) { absolute = true; }\r\n        return this.start.monthsBetween(this.end, op, absolute);\r\n    };\r\n    /**\r\n     * Calculates the number of years between the start and end timestamp.\r\n     *\r\n     * @param op The operation to perform on the result.\r\n     * @param absolute Whether the result should always be positive.\r\n     * @returns The time between the start and end timestamp.\r\n     * @see [[Day.yearsBetween]]\r\n     */\r\n    DaySpan.prototype.years = function (op, absolute) {\r\n        if (op === void 0) { op = Op.DOWN; }\r\n        if (absolute === void 0) { absolute = true; }\r\n        return this.start.yearsBetween(this.end, op, absolute);\r\n    };\r\n    /**\r\n     * Summarizes this span given an approximate unit of time and a few other\r\n     * options. If the start and end are on the same unit, a single value will\r\n     * be returned. Otherwise a start and end will be returned with a `delimiter`.\r\n     *\r\n     * @param type The unit of time this span is for.\r\n     * @param dayOfWeek When `true` the weekday of the start and end are included.\r\n     * @param short When `true` the short form of weekdays and months will be used.\r\n     * @param repeat When `true` the year will be repeated on the start and end\r\n     *  timestamp even if they are the same year.\r\n     * @param contextual When `true` the year will be hidden if it's the current\r\n     *  year.\r\n     * @param delimiter The string to separate the start and end timestamps with.\r\n     * @returns The summary of this span.\r\n     */\r\n    DaySpan.prototype.summary = function (type, dayOfWeek, short, repeat, contextual, delimiter) {\r\n        if (dayOfWeek === void 0) { dayOfWeek = true; }\r\n        if (short === void 0) { short = false; }\r\n        if (repeat === void 0) { repeat = false; }\r\n        if (contextual === void 0) { contextual = true; }\r\n        if (delimiter === void 0) { delimiter = ' - '; }\r\n        var formats = DaySpan.SUMMARY_FORMATS[type];\r\n        var today = Day_Day.today();\r\n        var showStartYear = !contextual || !this.start.sameYear(today);\r\n        var showEndYear = !contextual || !this.end.sameYear(today);\r\n        var start = this.start.format(formats(short, dayOfWeek, showStartYear));\r\n        var end = this.end.format(formats(short, dayOfWeek, showEndYear));\r\n        var summary = start;\r\n        if (start !== end) {\r\n            if (!repeat) {\r\n                summary = this.start.format(formats(short, dayOfWeek, !this.start.sameYear(this.end)));\r\n            }\r\n            summary += delimiter;\r\n            summary += end;\r\n        }\r\n        else {\r\n            summary = start;\r\n        }\r\n        return summary;\r\n    };\r\n    /**\r\n     * Determines whether the gven span intersects with this span.\r\n     *\r\n     * @param span The span to test.\r\n     * @returns `true` if the spans intersect, otherwise `false`.\r\n     */\r\n    DaySpan.prototype.intersects = function (span) {\r\n        return !(this.end.time < span.start.time ||\r\n            this.start.time > span.end.time);\r\n    };\r\n    /**\r\n     * Calculates the intersection between this span and the given span. If there\r\n     * is no intersection between the two spans then `null` is returned.\r\n     *\r\n     * @param span The span to calculate the intersection with.\r\n     * @returns The intersection or `null` if none exists.\r\n     */\r\n    DaySpan.prototype.intersection = function (span) {\r\n        var start = this.start.max(span.start);\r\n        var end = this.end.min(span.end);\r\n        return start.isAfter(end) ? null : new DaySpan(start, end);\r\n    };\r\n    /**\r\n     * Calculates the union between this span and the given span.\r\n     *\r\n     * @param span The span to calculate the union with.\r\n     * @returns The union of the two spans.\r\n     */\r\n    DaySpan.prototype.union = function (span) {\r\n        var start = this.start.min(span.start);\r\n        var end = this.end.max(span.end);\r\n        return new DaySpan(start, end);\r\n    };\r\n    /**\r\n     * Returns a point [[DaySpan]] with the same start and end timestamp.\r\n     *\r\n     * @param day The timestamp which will be the start and end.\r\n     * @returns The new instance.\r\n     * @see [[DaySpan.isPoint]]\r\n     */\r\n    DaySpan.point = function (day) {\r\n        return new DaySpan(day, day);\r\n    };\r\n    /**\r\n     * Formatting functions which assist the [[DaySpan.summary]] function.\r\n     */\r\n    DaySpan.SUMMARY_FORMATS = (DaySpan__a = {},\r\n        DaySpan__a[Units.DAY] = function (short, dayOfWeek, year) {\r\n            return (dayOfWeek ? (short ? 'ddd, ' : 'dddd, ') : '') + (short ? 'MMM ' : 'MMMM ') + 'Do' + (year ? ' YYYY' : '');\r\n        },\r\n        DaySpan__a[Units.WEEK] = function (short, dayOfWeek, year) {\r\n            return (dayOfWeek ? (short ? 'ddd, ' : 'dddd, ') : '') + (short ? 'MMM ' : 'MMMM ') + 'Do' + (year ? ' YYYY' : '');\r\n        },\r\n        DaySpan__a[Units.MONTH] = function (short, dayOfWeek, year) {\r\n            return (short ? 'MMM' : 'MMMM') + (year ? ' YYYY' : '');\r\n        },\r\n        DaySpan__a[Units.YEAR] = function (short, dayOfWeek, year) {\r\n            return (year ? 'YYYY' : '');\r\n        },\r\n        DaySpan__a);\r\n    return DaySpan;\r\n}());\r\n\r\nvar DaySpan__a;\r\n\n// CONCATENATED MODULE: ./src/Suffix.ts\n\r\n/**\r\n * A class which takes a number and determines the suffix for that number.\r\n *\r\n * ```typescript\r\n * Suffix.CACHE[ 2 ];         // 2nd\r\n * Suffix.determine( 3 );     // rd\r\n * Suffix.get( 4 );           // th\r\n * Suffix.get( 4, true );     // 4th\r\n * ```\r\n */\r\nvar Suffix = (function () {\r\n    function Suffix() {\r\n    }\r\n    Object.defineProperty(Suffix, \"CACHE\", {\r\n        /**\r\n         *\r\n         */\r\n        get: function () {\r\n            if (!this._CACHE) {\r\n                this._CACHE = [];\r\n                for (var i = 0; i < this._CACHE_SIZE; i++) {\r\n                    this._CACHE[i] = this.get(i, true);\r\n                }\r\n            }\r\n            return this._CACHE;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     */\r\n    Suffix.determine = function (value) {\r\n        return value >= 11 && value <= 13 ? 'th' : this.MAP[value % this.MAP.length];\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Suffix.get = function (value, append) {\r\n        if (append === void 0) { append = false; }\r\n        var suffix = this.determine(value);\r\n        return append ? value + suffix : suffix;\r\n    };\r\n    /**\r\n     * The array of suffixes used.\r\n     */\r\n    Suffix.MAP = [\r\n        'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'\r\n    ];\r\n    /**\r\n     *\r\n     */\r\n    Suffix._CACHE_SIZE = 366;\r\n    return Suffix;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Schedule.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_moment__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_moment__);\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// @ts-ignore\r\n\r\n/**\r\n *\r\n */\r\nvar Schedule_Schedule = (function () {\r\n    /**\r\n     *\r\n     */\r\n    function Schedule(input) {\r\n        if (Functions.isDefined(input)) {\r\n            this.set(input);\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.set = function (input) {\r\n        Parse_Parse.schedule(input, this);\r\n        return this;\r\n    };\r\n    Object.defineProperty(Schedule.prototype, \"lastTime\", {\r\n        /**\r\n         *\r\n         */\r\n        get: function () {\r\n            return this.times[this.times.length - 1];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.updateDurationInDays = function () {\r\n        var start = this.lastTime ? this.lastTime.toMilliseconds() : 0;\r\n        var duration = this.duration * (Constants.DURATION_TO_MILLIS[this.durationUnit] || 0);\r\n        var exclude = Constants.MILLIS_IN_DAY;\r\n        var day = Constants.MILLIS_IN_DAY;\r\n        this.durationInDays = Math.max(0, Math.ceil((start + duration - exclude) / day));\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.updateChecks = function () {\r\n        this.checks = Parse_Parse.givenFrequency([\r\n            this.year,\r\n            this.month,\r\n            this.week,\r\n            this.weekOfYear,\r\n            this.fullWeekOfYear,\r\n            this.weekspanOfYear,\r\n            this.lastFullWeekOfYear,\r\n            this.lastWeekspanOfYear,\r\n            this.weekOfMonth,\r\n            this.weekspanOfMonth,\r\n            this.fullWeekOfMonth,\r\n            this.lastWeekspanOfMonth,\r\n            this.lastFullWeekOfMonth,\r\n            this.dayOfWeek,\r\n            this.dayOfMonth,\r\n            this.lastDayOfMonth,\r\n            this.dayOfYear\r\n        ]);\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.matchesSpan = function (day) {\r\n        return (this.start === null || day.isSameOrAfter(this.start)) &&\r\n            (this.end === null || day.isBefore(this.end));\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.matchesRange = function (start, end) {\r\n        return (this.start === null || start.isSameOrBefore(this.start)) &&\r\n            (this.end === null || end.isBefore(this.end));\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.isExcluded = function (day) {\r\n        return !!this.exclude[day.dayIdentifier];\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.isIncluded = function (day) {\r\n        return !this.exclude[day.dayIdentifier];\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.matchesDay = function (day) {\r\n        if (!this.isIncluded(day) || !this.matchesSpan(day)) {\r\n            return false;\r\n        }\r\n        for (var _i = 0, _a = this.checks; _i < _a.length; _i++) {\r\n            var check = _a[_i];\r\n            if (!check(day[check.property])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Determines if the given day is covered by this schedule. A schedule can\r\n     * specify events that span multiple days - so even though the day does not\r\n     * match the starting day of a span - it can be a day that is within the\r\n     * schedule.\r\n     *\r\n     * @param day The day to test.\r\n     * @param\r\n     */\r\n    Schedule.prototype.coversDay = function (day) {\r\n        return !!this.findStartingDay(day);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.nextDay = function (day, includeDay, lookAhead) {\r\n        if (includeDay === void 0) { includeDay = false; }\r\n        if (lookAhead === void 0) { lookAhead = 366; }\r\n        var next = null;\r\n        var setNext = function (d) {\r\n            next = d;\r\n            return false;\r\n        };\r\n        this.iterateDays(day, 1, true, setNext, includeDay, lookAhead);\r\n        return next;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.nextDays = function (day, max, includeDay, lookAhead) {\r\n        if (includeDay === void 0) { includeDay = false; }\r\n        if (lookAhead === void 0) { lookAhead = 366; }\r\n        var nexts = [];\r\n        this.iterateDays(day, max, true, function (d) { return nexts.push(d); }, includeDay, lookAhead);\r\n        return nexts;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.prevDay = function (day, includeDay, lookBack) {\r\n        if (includeDay === void 0) { includeDay = false; }\r\n        if (lookBack === void 0) { lookBack = 366; }\r\n        var prev = null;\r\n        var setPrev = function (d) {\r\n            prev = d;\r\n            return false;\r\n        };\r\n        this.iterateDays(day, 1, false, setPrev, includeDay, lookBack);\r\n        return prev;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.prevDays = function (day, max, includeDay, lookBack) {\r\n        if (includeDay === void 0) { includeDay = false; }\r\n        if (lookBack === void 0) { lookBack = 366; }\r\n        var prevs = [];\r\n        this.iterateDays(day, max, false, function (d) { return prevs.push(d); }, includeDay, lookBack);\r\n        return prevs;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.iterateDays = function (day, max, next, onDay, includeDay, lookup) {\r\n        if (includeDay === void 0) { includeDay = false; }\r\n        if (lookup === void 0) { lookup = 366; }\r\n        var iterated = 0;\r\n        for (var days = 0; days < lookup; days++) {\r\n            if (!includeDay || days > 0) {\r\n                day = next ? day.next() : day.prev();\r\n            }\r\n            if (this.matchesDay(day)) {\r\n                if (onDay(day) === false) {\r\n                    break;\r\n                }\r\n                if (++iterated >= max) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.matchesTime = function (day) {\r\n        if (!this.matchesDay(day)) {\r\n            return false;\r\n        }\r\n        for (var _i = 0, _a = this.times; _i < _a.length; _i++) {\r\n            var time = _a[_i];\r\n            if (day.sameTime(time)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.isFullDay = function () {\r\n        return this.times.length === 0;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.getFullSpan = function (day) {\r\n        var start = day.start();\r\n        var end = start.add(this.duration, this.durationUnit);\r\n        return new DaySpan_DaySpan(start, end);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.getTimeSpan = function (day, time) {\r\n        var start = day.withTime(time);\r\n        var end = start.add(this.duration, this.durationUnit);\r\n        return new DaySpan_DaySpan(start, end);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.getSpansOver = function (day) {\r\n        var spans = [];\r\n        var start = this.findStartingDay(day);\r\n        if (!start) {\r\n            return spans;\r\n        }\r\n        if (this.isFullDay()) {\r\n            spans.push(this.getFullSpan(start));\r\n        }\r\n        else {\r\n            for (var _i = 0, _a = this.times; _i < _a.length; _i++) {\r\n                var time = _a[_i];\r\n                var span = this.getTimeSpan(start, time);\r\n                if (span.matchesDay(start)) {\r\n                    spans.push(span);\r\n                }\r\n            }\r\n        }\r\n        return spans;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.getSpanOver = function (day) {\r\n        var start = this.findStartingDay(day);\r\n        return start ? this.getFullSpan(start) : null;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.getSpansOn = function (day, check) {\r\n        if (check === void 0) { check = false; }\r\n        var spans = [];\r\n        if (check && !this.matchesDay(day)) {\r\n            return spans;\r\n        }\r\n        if (this.isFullDay()) {\r\n            spans.push(this.getFullSpan(day));\r\n        }\r\n        else {\r\n            for (var _i = 0, _a = this.times; _i < _a.length; _i++) {\r\n                var time = _a[_i];\r\n                var span = this.getTimeSpan(day, time);\r\n                spans.push(span);\r\n            }\r\n        }\r\n        return spans;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.findStartingDay = function (day) {\r\n        var behind = this.durationInDays;\r\n        while (behind >= 0) {\r\n            if (this.matchesDay(day)) {\r\n                return day;\r\n            }\r\n            day = day.prev();\r\n            behind--;\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.getExclusions = function (returnDays) {\r\n        if (returnDays === void 0) { returnDays = true; }\r\n        var exclusions = [];\r\n        for (var dayIdentifierKey in this.exclude) {\r\n            var dayIdentifier = parseInt(dayIdentifierKey);\r\n            exclusions.push(returnDays ? Day_Day.fromDayIdentifier(dayIdentifier) : dayIdentifier);\r\n        }\r\n        return exclusions;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.toInput = function (returnDays, returnTimes, timeFormat, alwaysDuration) {\r\n        if (returnDays === void 0) { returnDays = false; }\r\n        if (returnTimes === void 0) { returnTimes = false; }\r\n        if (timeFormat === void 0) { timeFormat = ''; }\r\n        if (alwaysDuration === void 0) { alwaysDuration = false; }\r\n        var defaultUnit = Constants.DURATION_DEFAULT_UNIT(this.isFullDay());\r\n        var out = {};\r\n        var exclusions = this.getExclusions(returnDays);\r\n        var times = [];\r\n        for (var _i = 0, _a = this.times; _i < _a.length; _i++) {\r\n            var time = _a[_i];\r\n            times.push(returnTimes ? time : (timeFormat ? time.format(timeFormat) : time.toString()));\r\n        }\r\n        if (this.start)\r\n            out.start = returnDays ? this.start : this.start.time;\r\n        if (this.end)\r\n            out.end = returnDays ? this.end : this.end.time;\r\n        if (times.length)\r\n            out.times = times;\r\n        if (alwaysDuration || this.duration !== Constants.DURATION_DEFAULT)\r\n            out.duration = this.duration;\r\n        if (alwaysDuration || this.durationUnit !== defaultUnit)\r\n            out.durationUnit = this.durationUnit;\r\n        if (exclusions.length)\r\n            out.exclude = exclusions;\r\n        if (this.dayOfWeek.input)\r\n            out.dayOfWeek = this.dayOfWeek.input;\r\n        if (this.dayOfMonth.input)\r\n            out.dayOfMonth = this.dayOfMonth.input;\r\n        if (this.lastDayOfMonth.input)\r\n            out.lastDayOfMonth = this.lastDayOfMonth.input;\r\n        if (this.dayOfYear.input)\r\n            out.dayOfYear = this.dayOfYear.input;\r\n        if (this.year.input)\r\n            out.year = this.year.input;\r\n        if (this.month.input)\r\n            out.month = this.month.input;\r\n        if (this.week.input)\r\n            out.week = this.week.input;\r\n        if (this.weekOfYear.input)\r\n            out.weekOfYear = this.weekOfYear.input;\r\n        if (this.weekspanOfYear.input)\r\n            out.weekspanOfYear = this.weekspanOfYear.input;\r\n        if (this.fullWeekOfYear.input)\r\n            out.fullWeekOfYear = this.fullWeekOfYear.input;\r\n        if (this.lastWeekspanOfYear.input)\r\n            out.lastWeekspanOfYear = this.lastWeekspanOfYear.input;\r\n        if (this.lastFullWeekOfYear.input)\r\n            out.lastFullWeekOfYear = this.lastFullWeekOfYear.input;\r\n        if (this.weekOfMonth.input)\r\n            out.weekOfMonth = this.weekOfMonth.input;\r\n        if (this.weekspanOfMonth.input)\r\n            out.weekspanOfMonth = this.weekspanOfMonth.input;\r\n        if (this.fullWeekOfMonth.input)\r\n            out.fullWeekOfMonth = this.fullWeekOfMonth.input;\r\n        if (this.lastWeekspanOfMonth.input)\r\n            out.lastWeekspanOfMonth = this.lastWeekspanOfMonth.input;\r\n        if (this.lastFullWeekOfMonth.input)\r\n            out.lastFullWeekOfMonth = this.lastFullWeekOfMonth.input;\r\n        return out;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.describe = function (thing, includeRange, includeTimes, includeDuration, includeExcludes) {\r\n        if (thing === void 0) { thing = 'event'; }\r\n        if (includeRange === void 0) { includeRange = true; }\r\n        if (includeTimes === void 0) { includeTimes = true; }\r\n        if (includeDuration === void 0) { includeDuration = false; }\r\n        if (includeExcludes === void 0) { includeExcludes = false; }\r\n        var out = '';\r\n        if (includeRange) {\r\n            if (this.start) {\r\n                out += 'Starting on ' + this.start.format('dddd Do, YYYY');\r\n                if (this.end) {\r\n                    out += ' and ending on ' + this.end.format('dddd Do, YYYY');\r\n                }\r\n            }\r\n            else if (this.end) {\r\n                out += 'Up until ' + this.end.format('dddd Do, YYYY');\r\n            }\r\n        }\r\n        if (out) {\r\n            out += ' the ' + thing + ' will occur';\r\n        }\r\n        else {\r\n            out += 'The ' + thing + ' will occur';\r\n        }\r\n        out += this.describeRule(this.dayOfWeek.input, 'day of the week', function (x) { return __WEBPACK_IMPORTED_MODULE_6_moment__[\"weekdays\"]()[x]; }, 1, false);\r\n        out += this.describeRule(this.lastDayOfMonth.input, 'last day of the month', function (x) { return Suffix.CACHE[x]; });\r\n        out += this.describeRule(this.dayOfMonth.input, 'day of the month', function (x) { return Suffix.CACHE[x]; });\r\n        out += this.describeRule(this.dayOfYear.input, 'day of the year', function (x) { return Suffix.CACHE[x]; }, 1);\r\n        out += this.describeRule(this.year.input, 'year', function (x) { return x; }, 0, false, ' in ');\r\n        out += this.describeRule(this.month.input, 'month', function (x) { return __WEBPACK_IMPORTED_MODULE_6_moment__[\"months\"]()[x]; }, 0, false, ' in ');\r\n        out += this.describeRule(this.weekOfYear.input, 'week of the year', function (x) { return Suffix.CACHE[x]; });\r\n        out += this.describeRule(this.weekspanOfYear.input, 'weekspan of the year', function (x) { return Suffix.CACHE[x + 1]; }, 1);\r\n        out += this.describeRule(this.fullWeekOfYear.input, 'full week of the year', function (x) { return Suffix.CACHE[x]; });\r\n        out += this.describeRule(this.lastWeekspanOfYear.input, 'last weekspan of the year', function (x) { return Suffix.CACHE[x + 1]; }, 1);\r\n        out += this.describeRule(this.lastFullWeekOfYear.input, 'last full week of the year', function (x) { return Suffix.CACHE[x]; });\r\n        out += this.describeRule(this.weekOfMonth.input, 'week of the month', function (x) { return Suffix.CACHE[x]; });\r\n        out += this.describeRule(this.fullWeekOfMonth.input, 'full week of the month', function (x) { return Suffix.CACHE[x]; });\r\n        out += this.describeRule(this.weekspanOfMonth.input, 'weekspan of the month', function (x) { return Suffix.CACHE[x + 1]; }, 1);\r\n        out += this.describeRule(this.lastFullWeekOfMonth.input, 'last full week of the month', function (x) { return Suffix.CACHE[x]; });\r\n        out += this.describeRule(this.lastWeekspanOfMonth.input, 'last weekspan of the month', function (x) { return Suffix.CACHE[x + 1]; }, 1);\r\n        if (includeTimes && this.times.length) {\r\n            out += ' at ';\r\n            out += this.describeArray(this.times, function (x) { return x.format('hh:mm a'); });\r\n        }\r\n        if (includeDuration && this.duration !== Constants.DURATION_DEFAULT) {\r\n            out += ' lasting ' + this.duration + ' ';\r\n            if (this.durationUnit) {\r\n                out += this.durationUnit + ' ';\r\n            }\r\n        }\r\n        if (includeExcludes) {\r\n            var excludes = this.getExclusions(true);\r\n            if (excludes.length) {\r\n                out += ' excluding ';\r\n                out += this.describeArray(excludes, function (x) { return x.format('MM/DD/YYYY'); });\r\n            }\r\n        }\r\n        return out;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.describeRule = function (value, unit, map, everyOffset, the, on, required) {\r\n        if (everyOffset === void 0) { everyOffset = 0; }\r\n        if (the === void 0) { the = true; }\r\n        if (on === void 0) { on = ' on '; }\r\n        if (required === void 0) { required = false; }\r\n        var out = '';\r\n        var suffix = the ? ' ' + unit : '';\r\n        if (Functions.isFrequencyValueEvery(value)) {\r\n            var valueEvery = value;\r\n            out += ' every ' + Suffix.CACHE[valueEvery.every] + ' ' + unit;\r\n            if (valueEvery.offset) {\r\n                out += ' starting at ' + map(valueEvery.offset + everyOffset) + suffix;\r\n            }\r\n        }\r\n        else if (Functions.isFrequencyValueOneOf(value)) {\r\n            var valueOne = value;\r\n            if (valueOne.length) {\r\n                out += on + (the ? 'the ' : '');\r\n                out += this.describeArray(valueOne, map);\r\n                out += suffix;\r\n            }\r\n        }\r\n        else if (required) {\r\n            out += on + 'any ' + unit;\r\n        }\r\n        return out;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Schedule.prototype.describeArray = function (array, map) {\r\n        var out = '';\r\n        var last = array.length - 1;\r\n        out += map(array[0]);\r\n        for (var i = 1; i < last; i++) {\r\n            out += ', ' + map(array[i]);\r\n        }\r\n        if (last > 0) {\r\n            out += ' and ' + map(array[last]);\r\n        }\r\n        return out;\r\n    };\r\n    return Schedule;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Time.ts\n\r\n\r\n\r\n\r\n/**\r\n * A class which holds a specific time during in any day.\r\n */\r\nvar Time_Time = (function () {\r\n    /**\r\n     * Creates a new Time instance given an hour and optionally a minute, second,\r\n     * and millisecond. If they have not been specified they default to 0.\r\n     *\r\n     * @param hour The hour.\r\n     * @param minute The minute.\r\n     * @param second The second.\r\n     * @param millisecond The millisecond.\r\n     */\r\n    function Time(hour, minute, second, millisecond) {\r\n        if (minute === void 0) { minute = Constants.MINUTE_MIN; }\r\n        if (second === void 0) { second = Constants.SECOND_MIN; }\r\n        if (millisecond === void 0) { millisecond = Constants.MILLIS_MIN; }\r\n        this.hour = hour;\r\n        this.minute = minute;\r\n        this.second = second;\r\n        this.millisecond = millisecond;\r\n    }\r\n    /**\r\n     * Formats this time into a string. The following list describes the available\r\n     * formatting patterns:\r\n     *\r\n     * ### Hour\r\n     * - H: 0-23\r\n     * - HH: 00-23\r\n     * - h: 12,1-12,1-11\r\n     * - hh: 12,01-12,01-11\r\n     * - k: 1-24\r\n     * - kk: 01-24\r\n     * - a: am,pm\r\n     * - A: AM,PM\r\n     * ### Minute\r\n     * - m: 0-59\r\n     * - mm: 00-59\r\n     * ### Second\r\n     * - s: 0-59\r\n     * - ss: 00-59\r\n     * ### Millisecond\r\n     * - S: 0-9\r\n     * - SS: 00-99\r\n     * - SSS: 000-999\r\n     *\r\n     * @param format The format to output.\r\n     * @returns The formatted time.\r\n     */\r\n    Time.prototype.format = function (format) {\r\n        var formatterEntries = Time.FORMATTERS;\r\n        var out = '';\r\n        for (var i = 0; i < format.length; i++) {\r\n            var handled = false;\r\n            for (var k = 0; k < formatterEntries.length && !handled; k++) {\r\n                var entry = formatterEntries[k];\r\n                var part = format.substring(i, i + entry.size);\r\n                if (part.length === entry.size) {\r\n                    var formatter = entry.formats[part];\r\n                    if (formatter) {\r\n                        out += formatter(this);\r\n                        i += entry.size - 1;\r\n                        handled = true;\r\n                    }\r\n                }\r\n            }\r\n            if (!handled) {\r\n                out += format.charAt(i);\r\n            }\r\n        }\r\n        return out;\r\n    };\r\n    /**\r\n     * @returns The number of milliseconds from the start of the day until this\r\n     *  time.\r\n     */\r\n    Time.prototype.toMilliseconds = function () {\r\n        return this.hour * Constants.MILLIS_IN_HOUR +\r\n            this.minute * Constants.MILLIS_IN_MINUTE +\r\n            this.second * Constants.MILLIS_IN_SECOND +\r\n            this.millisecond;\r\n    };\r\n    /**\r\n     * @returns The time formatted using the smallest format that completely\r\n     *  represents this time.\r\n     */\r\n    Time.prototype.toString = function () {\r\n        if (this.millisecond)\r\n            return this.format('HH:mm:ss.SSS');\r\n        if (this.second)\r\n            return this.format('HH:mm:ss');\r\n        if (this.minute)\r\n            return this.format('HH:mm');\r\n        return this.format('HH');\r\n    };\r\n    /**\r\n     * @returns A unique identifier for this time. The number returned is in the\r\n     *  following format: SSSssmmHH\r\n     */\r\n    Time.prototype.toIdentifer = function () {\r\n        return this.hour +\r\n            this.minute * 100 +\r\n            this.second * 10000 +\r\n            this.millisecond * 10000000;\r\n    };\r\n    /**\r\n     * @returns An object with hour, minute, second, a millisecond properties if\r\n     *  they are non-zero on this time.\r\n     */\r\n    Time.prototype.toObject = function () {\r\n        var out = {\r\n            hour: this.hour\r\n        };\r\n        if (this.minute)\r\n            out.minute = this.minute;\r\n        if (this.second)\r\n            out.second = this.second;\r\n        if (this.millisecond)\r\n            out.millisecond = this.millisecond;\r\n        return out;\r\n    };\r\n    /**\r\n     * Parses a value and tries to convert it to a Time instance.\r\n     *\r\n     * @param input The input to parse.\r\n     * @returns The instance parsed or `null` if it was invalid.\r\n     * @see [[Parse.time]]\r\n     */\r\n    Time.parse = function (input) {\r\n        return Parse_Parse.time(input);\r\n    };\r\n    /**\r\n     * Parses a string and converts it to a Time instance. If the string is not\r\n     * in a valid format `null` is returned.\r\n     *\r\n     * @param time The string to parse.\r\n     * @returns The instance parsed or `null` if it was invalid.\r\n     * @see [[Time.REGEX]]\r\n     */\r\n    Time.fromString = function (time) {\r\n        var matches = this.REGEX.exec(time);\r\n        if (!matches) {\r\n            return null;\r\n        }\r\n        var h = parseInt(matches[1]) || 0;\r\n        var m = parseInt(matches[2]) || 0;\r\n        var s = parseInt(matches[3]) || 0;\r\n        var l = parseInt(matches[4]) || 0;\r\n        return this.build(h, m, s, l);\r\n    };\r\n    /**\r\n     * Parses a number and converts it to a Time instance. The number is assumed\r\n     * to be in the [[Time.toIdentifier]] format.\r\n     *\r\n     * @param time The number to parse.\r\n     * @returns The instance parsed.\r\n     */\r\n    Time.fromIdentifier = function (time) {\r\n        var h = time % 100;\r\n        var m = Math.floor(time / 100) % 100;\r\n        var s = Math.floor(time / 10000) % 100;\r\n        var l = Math.floor(time / 10000000) % 1000;\r\n        return this.build(h, m, s, l);\r\n    };\r\n    /**\r\n     * Returns a new instance given an hour and optionally a minute, second,\r\n     * and millisecond. If they have not been specified they default to 0.\r\n     *\r\n     * @param hour The hour.\r\n     * @param minute The minute.\r\n     * @param second The second.\r\n     * @param millisecond The millisecond.\r\n     * @returns A new instance.\r\n     */\r\n    Time.build = function (hour, minute, second, millisecond) {\r\n        if (minute === void 0) { minute = Constants.MINUTE_MIN; }\r\n        if (second === void 0) { second = Constants.SECOND_MIN; }\r\n        if (millisecond === void 0) { millisecond = Constants.MILLIS_MIN; }\r\n        return new Time(hour, minute, second, millisecond);\r\n    };\r\n    /**\r\n     * The regular expression used to parse a time from a string.\r\n     *\r\n     * - ## = hour\r\n     * - ##:## = hour & minute\r\n     * - ##:##:## = hour, minute, & second\r\n     * - ##:##:##.### = hour, minute, second, and milliseconds\r\n     */\r\n    Time.REGEX = /^(\\d\\d?):?(\\d\\d)?:?(\\d\\d)?\\.?(\\d\\d\\d)?$/;\r\n    /**\r\n     * A set of formatting functions keyed by their format string.\r\n     */\r\n    Time.FORMATTERS = [\r\n        {\r\n            size: 3,\r\n            formats: {\r\n                SSS: function (t) { return Functions.padNumber(t.millisecond, 3); }\r\n            }\r\n        },\r\n        {\r\n            size: 2,\r\n            formats: {\r\n                HH: function (t) { return Functions.padNumber(t.hour, 2); },\r\n                hh: function (t) { return Functions.padNumber((t.hour % 12) || 12, 2); },\r\n                kk: function (t) { return Functions.padNumber(t.hour + 1, 2); },\r\n                mm: function (t) { return Functions.padNumber(t.minute, 2); },\r\n                ss: function (t) { return Functions.padNumber(t.second, 2); },\r\n                SS: function (t) { return Functions.padNumber(t.millisecond, 3, 2); }\r\n            }\r\n        },\r\n        {\r\n            size: 1,\r\n            formats: {\r\n                A: function (t) { return t.hour < 12 ? 'AM' : 'PM'; },\r\n                a: function (t) { return t.hour < 12 ? 'am' : 'pm'; },\r\n                H: function (t) { return t.hour + ''; },\r\n                h: function (t) { return ((t.hour % 12) || 12) + ''; },\r\n                k: function (t) { return (t.hour + 1) + ''; },\r\n                m: function (t) { return t.minute + ''; },\r\n                s: function (t) { return t.second + ''; },\r\n                S: function (t) { return Functions.padNumber(t.millisecond, 3, 1); }\r\n            }\r\n        }\r\n    ];\r\n    return Time;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Parse.ts\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * The class which takes user input and parses it to specific structures.\r\n */\r\nvar Parse_Parse = (function () {\r\n    function Parse() {\r\n    }\r\n    /**\r\n     * Parses a value and converts it to a [[FrequencyCheck]].\r\n     *\r\n     * @param input The input to parse into a function.\r\n     * @returns A function which determines whether a value matches a frequency.\r\n     * @see [[Schedule]]\r\n     */\r\n    Parse.frequency = function (input, property) {\r\n        var check = function (value) {\r\n            return true;\r\n        };\r\n        check.given = false;\r\n        if (Functions.isFrequencyValueEvery(input)) {\r\n            var offset_1 = input.offset || 0;\r\n            var every_1 = input.every;\r\n            check = function (value) {\r\n                return value % every_1 === offset_1;\r\n            };\r\n            check.given = true;\r\n        }\r\n        if (Functions.isFrequencyValueOneOf(input)) {\r\n            var map_1 = {};\r\n            for (var i = 0; i < input.length; i++) {\r\n                map_1[input[i]] = true;\r\n            }\r\n            check = function (value) {\r\n                return !!map_1[value];\r\n            };\r\n            check.given = true;\r\n        }\r\n        check.input = input;\r\n        check.property = property;\r\n        return check;\r\n    };\r\n    /**\r\n     * Parses [[DayInput]] into a [[Day]] instance.\r\n     *\r\n     * ```typescript\r\n     * Parse.day( 65342300 );               // unix timestamp\r\n     * Parse.day( '01/02/2014' );           // strings in many formats\r\n     * Parse.day( day );                    // return a passed instance\r\n     * Parse.day( [2018, 0, 2] );           // array: 01/02/2018\r\n     * Parse.day( {year: 2018, month: 2} ); // object: 03/01/2018\r\n     * Parse.day( true );                   // today\r\n     * ```\r\n     *\r\n     * @param input The input to parse.\r\n     * @returns The Day parsed or `null` if the value is not valid.\r\n     */\r\n    Parse.day = function (input) {\r\n        if (Functions.isNumber(input)) {\r\n            return Day_Day.unix(input);\r\n        }\r\n        else if (Functions.isString(input)) {\r\n            return Day_Day.fromString(input);\r\n        }\r\n        else if (input instanceof Day_Day) {\r\n            return input;\r\n        }\r\n        else if (Functions.isArray(input)) {\r\n            return Day_Day.fromArray(input);\r\n        }\r\n        else if (Functions.isObject(input)) {\r\n            return Day_Day.fromObject(input);\r\n        }\r\n        else if (input === true) {\r\n            return Day_Day.today();\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Parses a value and tries to convert it to a Time instance.\r\n     *\r\n     * ```typescript\r\n     * Parse.time( time );      // return a passed instance\r\n     * Parse.time( 9 );         // 09:00:00.000\r\n     * Parse.time( 3009 );      // 09:30:00.000\r\n     * Parse.time( 593009 );    // 09:30:59.000\r\n     * Parsetime( '09' );       // 09:00:00.000\r\n     * Parse.time( '9:30' );    // 09:30:00.000\r\n     * Parse.time( '9:30:59' ); // 09:30:59.000\r\n     * Parse.time( {hour: 2} ); // 02:00:00.000\r\n     * ```\r\n     *\r\n     * @param input The input to parse.\r\n     * @returns The instance parsed or `null` if it was invalid.\r\n     * @see [[Time.fromIdentifier]]\r\n     * @see [[Time.fromString]]\r\n     */\r\n    Parse.time = function (input) {\r\n        if (input instanceof Time_Time) {\r\n            return input;\r\n        }\r\n        if (Functions.isNumber(input)) {\r\n            return Time_Time.fromIdentifier(input);\r\n        }\r\n        if (Functions.isString(input)) {\r\n            return Time_Time.fromString(input);\r\n        }\r\n        if (Functions.isObject(input) && Functions.isNumber(input.hour)) {\r\n            return new Time_Time(input.hour, input.minute, input.second, input.millisecond);\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Parses a value and tries to convert it to an array of Time instances.\r\n     * If any of the given values are not a valid time value then the resulting\r\n     * array will not contain a time instance.\r\n     *\r\n     * @param input The input to parse.\r\n     * @returns A non-null array of time instances.\r\n     * @see [[Parse.time]]\r\n     */\r\n    Parse.times = function (input) {\r\n        var times = [];\r\n        if (Functions.isArray(input)) {\r\n            for (var _i = 0, input_1 = input; _i < input_1.length; _i++) {\r\n                var timeInput = input_1[_i];\r\n                var time = this.time(timeInput);\r\n                if (time) {\r\n                    times.push(time);\r\n                }\r\n            }\r\n        }\r\n        return times;\r\n    };\r\n    /**\r\n     * Parses an array of excluded days into a map of excluded days where the\r\n     * array value and returned object key are [[Day.dayIdentifier]].\r\n     *\r\n     * ```typescript\r\n     * Parse.exclusions( [ 01012018, 05062014 ] ); // {'01012018': true, '05062014': true}\r\n     * ```\r\n     *\r\n     * @param input The input to parse.\r\n     * @returns The object with identifier keys and `true` values.\r\n     * @see [[Day.dayIdentifier]]\r\n     */\r\n    Parse.exclusions = function (input) {\r\n        var exclusions = {};\r\n        if (Functions.isArray(input)) {\r\n            for (var _i = 0, input_2 = input; _i < input_2.length; _i++) {\r\n                var dayIdentifier = input_2[_i];\r\n                if (Functions.isNumber(dayIdentifier)) {\r\n                    exclusions[dayIdentifier] = true;\r\n                }\r\n                else {\r\n                    var day = this.day(dayIdentifier);\r\n                    if (day) {\r\n                        exclusions[day.dayIdentifier] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return exclusions;\r\n    };\r\n    /**\r\n     * Parses an object which specifies a schedule where events may or may not\r\n     * repeat and they may be all day events or at specific times.\r\n     *\r\n     * @param input The input to parse into a schedule.\r\n     * @param out The schedule to set the values of and return.\r\n     * @returns An instance of the parsed [[Schedule]].\r\n     */\r\n    Parse.schedule = function (input, out) {\r\n        if (out === void 0) { out = new Schedule_Schedule(); }\r\n        var on = this.day(input.on);\r\n        var times = this.times(input.times);\r\n        var fullDay = times.length === 0;\r\n        if (on) {\r\n            input.start = on.start();\r\n            input.end = on.end();\r\n            input.year = [on.year];\r\n            input.month = [on.month];\r\n            input.dayOfMonth = [on.dayOfMonth];\r\n        }\r\n        out.times = times;\r\n        out.duration = Functions.coalesce(input.duration, Constants.DURATION_DEFAULT);\r\n        out.durationUnit = Functions.coalesce(input.durationUnit, Constants.DURATION_DEFAULT_UNIT(fullDay));\r\n        out.start = this.day(input.start);\r\n        out.end = this.day(input.end);\r\n        out.exclude = this.exclusions(input.exclude);\r\n        out.year = this.frequency(input.year, 'year');\r\n        out.month = this.frequency(input.month, 'month');\r\n        out.week = this.frequency(input.week, 'week');\r\n        out.weekOfYear = this.frequency(input.weekOfYear, 'weekOfYear');\r\n        out.weekspanOfYear = this.frequency(input.weekspanOfYear, 'weekspanOfYear');\r\n        out.fullWeekOfYear = this.frequency(input.fullWeekOfYear, 'fullWeekOfYear');\r\n        out.lastWeekspanOfYear = this.frequency(input.lastWeekspanOfYear, 'lastWeekspanOfYear');\r\n        out.lastFullWeekOfYear = this.frequency(input.lastFullWeekOfYear, 'lastFullWeekOfYear');\r\n        out.weekOfMonth = this.frequency(input.weekOfMonth, 'weekOfMonth');\r\n        out.weekspanOfMonth = this.frequency(input.weekspanOfMonth, 'weekspanOfMonth');\r\n        out.fullWeekOfMonth = this.frequency(input.fullWeekOfMonth, 'fullWeekOfMonth');\r\n        out.lastWeekspanOfMonth = this.frequency(input.lastWeekspanOfMonth, 'lastWeekspanOfMonth');\r\n        out.lastFullWeekOfMonth = this.frequency(input.lastFullWeekOfMonth, 'lastFullWeekOfMonth');\r\n        out.dayOfWeek = this.frequency(input.dayOfWeek, 'dayOfWeek');\r\n        out.dayOfMonth = this.frequency(input.dayOfMonth, 'dayOfMonth');\r\n        out.lastDayOfMonth = this.frequency(input.lastDayOfMonth, 'lastDayOfMonth');\r\n        out.dayOfYear = this.frequency(input.dayOfYear, 'dayOfYear');\r\n        out.updateDurationInDays();\r\n        out.updateChecks();\r\n        return out;\r\n    };\r\n    /**\r\n     * Parses an array of [[FrequencyCheck]] functions and returns an array of\r\n     * functions for only the checks that were specified by the user.\r\n     *\r\n     * @param checks The array of check functions to filter through.\r\n     * @returns The array of user specified checks.\r\n     */\r\n    Parse.givenFrequency = function (checks) {\r\n        var out = [];\r\n        for (var _i = 0, checks_1 = checks; _i < checks_1.length; _i++) {\r\n            var check = checks_1[_i];\r\n            if (check.given) {\r\n                out.push(check);\r\n            }\r\n        }\r\n        return out;\r\n    };\r\n    /**\r\n     * Parses [[CalendarScheduleInput]] and returns a [[CalendarSchedule]].\r\n     *\r\n     * @param input The input to parse.\r\n     * @returns The parsed value.\r\n     */\r\n    Parse.calendarSchedule = function (input) {\r\n        if (input.schedule instanceof Schedule_Schedule) {\r\n            return input;\r\n        }\r\n        return {\r\n            schedule: this.schedule(input.schedule),\r\n            event: input.event\r\n        };\r\n    };\r\n    /**\r\n     * Parses a schedule from a CRON pattern. TODO\r\n     */\r\n    Parse.cron = function (pattern, out) {\r\n        if (out === void 0) { out = new Schedule_Schedule(); }\r\n        return out;\r\n    };\r\n    return Parse;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Day.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_moment__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_moment__);\n\r\n\r\n\r\n\r\n\r\n// @ts-ignore\r\n\r\n/**\r\n *\r\n */\r\nvar Day_Day = (function () {\r\n    /**\r\n     *\r\n     */\r\n    function Day(date) {\r\n        this.date = date;\r\n        this.time = date.unix();\r\n        this.millis = date.millisecond();\r\n        this.seconds = date.second();\r\n        this.minute = date.minute();\r\n        this.hour = date.hour();\r\n        this.month = date.month();\r\n        this.year = date.year();\r\n        this.quarter = date.quarter();\r\n        this.dayOfWeek = date.day();\r\n        this.dayOfMonth = date.date();\r\n        this.dayOfYear = date.dayOfYear();\r\n        this.week = date.week();\r\n        this.lastDayOfMonth = Day.getLastDayOfMonth(date);\r\n        this.weekOfYear = Day.getWeekOfYear(date);\r\n        this.weekspanOfYear = Day.getWeekspanOfYear(date);\r\n        this.fullWeekOfYear = Day.getFullWeekOfYear(date);\r\n        this.lastWeekspanOfYear = Day.getLastWeekspanOfYear(date);\r\n        this.lastFullWeekOfYear = Day.getLastFullWeekOfYear(date);\r\n        this.weekOfMonth = Day.getWeekOfMonth(date);\r\n        this.weekspanOfMonth = Day.getWeekspanOfMonth(date);\r\n        this.fullWeekOfMonth = Day.getFullWeekOfMonth(date);\r\n        this.lastWeekspanOfMonth = Day.getLastWeekspanOfMonth(date);\r\n        this.lastFullWeekOfMonth = Day.getLastFullWeekOfMonth(date);\r\n        this.dayIdentifier = Day.getDayIdentifier(date);\r\n        this.weekIdentifier = Day.getWeekIdentifier(date);\r\n        this.monthIdentifier = Day.getMonthIdentifier(date);\r\n        this.quarterIdentifier = Day.getQuarterIdentifier(date);\r\n    }\r\n    // Same\r\n    /**\r\n     *\r\n     */\r\n    Day.prototype.sameDay = function (day) {\r\n        return this.dayIdentifier === day.dayIdentifier;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Day.prototype.sameMonth = function (day) {\r\n        return this.monthIdentifier === day.monthIdentifier;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Day.prototype.sameWeek = function (day) {\r\n        return this.weekIdentifier === day.weekIdentifier;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Day.prototype.sameYear = function (day) {\r\n        return this.year === day.year;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Day.prototype.sameQuarter = function (day) {\r\n        return this.quarterIdentifier === day.quarterIdentifier;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Day.prototype.sameHour = function (day) {\r\n        return this.dayIdentifier === day.dayIdentifier && this.hour === day.hour;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Day.prototype.sameMinute = function (day) {\r\n        return this.dayIdentifier === day.dayIdentifier && this.hour === day.hour && this.minute === day.minute;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Day.prototype.sameTime = function (time) {\r\n        return this.hour === time.hour && this.minute === time.minute && this.seconds === time.second && this.millis === time.millisecond;\r\n    };\r\n    // Comparison\r\n    /**\r\n     *\r\n     */\r\n    Day.prototype.isBefore = function (day, precision) {\r\n        return this.date.isBefore(day.date, precision);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Day.prototype.isSameOrBefore = function (day, precision) {\r\n        return this.date.isSameOrBefore(day.date, precision);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Day.prototype.isAfter = function (day, precision) {\r\n        return this.date.isAfter(day.date, precision);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Day.prototype.isSameOrAfter = function (day, precision) {\r\n        return this.date.isSameOrAfter(day.date, precision);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Day.prototype.max = function (day) {\r\n        return this.date.isAfter(day.date) ? this : day;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Day.prototype.min = function (day) {\r\n        return this.date.isBefore(day.date) ? this : day;\r\n    };\r\n    // Between\r\n    Day.prototype.millisBetween = function (day, op, absolute) {\r\n        if (op === void 0) { op = Op.DOWN; }\r\n        if (absolute === void 0) { absolute = true; }\r\n        return operate(this.date.diff(day.date, 'milliseconds', true), op, absolute);\r\n    };\r\n    Day.prototype.secondsBetween = function (day, op, absolute) {\r\n        if (op === void 0) { op = Op.DOWN; }\r\n        if (absolute === void 0) { absolute = true; }\r\n        return operate(this.date.diff(day.date, 'seconds', true), op, absolute);\r\n    };\r\n    Day.prototype.minutesBetween = function (day, op, absolute) {\r\n        if (op === void 0) { op = Op.DOWN; }\r\n        if (absolute === void 0) { absolute = true; }\r\n        return operate(this.date.diff(day.date, 'minutes', true), op, absolute);\r\n    };\r\n    Day.prototype.hoursBetween = function (day, op, absolute) {\r\n        if (op === void 0) { op = Op.DOWN; }\r\n        if (absolute === void 0) { absolute = true; }\r\n        return operate(this.date.diff(day.date, 'hours', true), op, absolute);\r\n    };\r\n    Day.prototype.daysBetween = function (day, op, absolute) {\r\n        if (op === void 0) { op = Op.DOWN; }\r\n        if (absolute === void 0) { absolute = true; }\r\n        return operate(this.date.diff(day.date, 'days', true), op, absolute);\r\n    };\r\n    Day.prototype.weeksBetween = function (day, op, absolute) {\r\n        if (op === void 0) { op = Op.DOWN; }\r\n        if (absolute === void 0) { absolute = true; }\r\n        return operate(this.date.diff(day.date, 'weeks', true), op, absolute);\r\n    };\r\n    Day.prototype.monthsBetween = function (day, op, absolute) {\r\n        if (op === void 0) { op = Op.DOWN; }\r\n        if (absolute === void 0) { absolute = true; }\r\n        return operate(this.date.diff(day.date, 'months', true), op, absolute);\r\n    };\r\n    Day.prototype.yearsBetween = function (day, op, absolute) {\r\n        if (op === void 0) { op = Op.DOWN; }\r\n        if (absolute === void 0) { absolute = true; }\r\n        return operate(this.date.diff(day.date, 'years', true), op, absolute);\r\n    };\r\n    Day.prototype.isBetween = function (start, end, inclusive) {\r\n        if (inclusive === void 0) { inclusive = true; }\r\n        return this.date.isBetween(start.date, end.date, null, inclusive ? '[]' : '[)');\r\n    };\r\n    Day.prototype.mutate = function (mutator) {\r\n        var d = this.toMoment();\r\n        mutator(d);\r\n        return new Day(d);\r\n    };\r\n    Day.prototype.add = function (amount, unit) {\r\n        return this.mutate(function (d) { return d.add(amount, unit); });\r\n    };\r\n    Day.prototype.relative = function (millis) {\r\n        return this.mutate(function (d) { return d.add(millis, 'milliseconds'); });\r\n    };\r\n    // Days\r\n    Day.prototype.relativeDays = function (days) {\r\n        return this.mutate(function (d) { return d.add(days, 'days'); });\r\n    };\r\n    Day.prototype.prev = function (days) {\r\n        if (days === void 0) { days = 1; }\r\n        return this.relativeDays(-days);\r\n    };\r\n    Day.prototype.next = function (days) {\r\n        if (days === void 0) { days = 1; }\r\n        return this.relativeDays(days);\r\n    };\r\n    Day.prototype.withDayOfMonth = function (day) {\r\n        return this.mutate(function (d) { return d.date(day); });\r\n    };\r\n    Day.prototype.withDayOfWeek = function (dayOfWeek) {\r\n        return this.mutate(function (d) { return d.day(dayOfWeek); });\r\n    };\r\n    Day.prototype.withDayOfYear = function (dayOfYear) {\r\n        return this.mutate(function (d) { return d.dayOfYear(dayOfYear); });\r\n    };\r\n    // Month\r\n    Day.prototype.withMonth = function (month) {\r\n        return this.mutate(function (d) { return d.month(month); });\r\n    };\r\n    Day.prototype.relativeMonths = function (months) {\r\n        return this.mutate(function (d) { return d.add(months, 'months'); });\r\n    };\r\n    Day.prototype.prevMonth = function (months) {\r\n        if (months === void 0) { months = 1; }\r\n        return this.relativeMonths(-months);\r\n    };\r\n    Day.prototype.nextMonth = function (months) {\r\n        if (months === void 0) { months = 1; }\r\n        return this.relativeMonths(months);\r\n    };\r\n    // Week Of Year\r\n    Day.prototype.withWeek = function (week, relativeWeek) {\r\n        if (relativeWeek === void 0) { relativeWeek = this.week; }\r\n        return this.mutate(function (d) { return d.add((week - relativeWeek) * Constants.DAYS_IN_WEEK, 'days'); });\r\n    };\r\n    Day.prototype.withWeekOfYear = function (week) {\r\n        return this.withWeek(week, this.weekOfYear);\r\n    };\r\n    Day.prototype.withFullWeekOfYear = function (week) {\r\n        return this.withWeek(week, this.fullWeekOfYear);\r\n    };\r\n    Day.prototype.withWeekspanOfYear = function (week) {\r\n        return this.withWeek(week, this.weekspanOfYear);\r\n    };\r\n    Day.prototype.withWeekOfMonth = function (week) {\r\n        return this.withWeek(week, this.weekOfMonth);\r\n    };\r\n    Day.prototype.withWeekspanOfMonth = function (week) {\r\n        return this.withWeek(week, this.weekspanOfMonth);\r\n    };\r\n    Day.prototype.withFullWeekOfMonth = function (week) {\r\n        return this.withWeek(week, this.fullWeekOfMonth);\r\n    };\r\n    Day.prototype.relativeWeeks = function (weeks) {\r\n        return this.mutate(function (d) { return d.add(weeks, 'weeks'); });\r\n    };\r\n    Day.prototype.prevWeek = function (weeks) {\r\n        if (weeks === void 0) { weeks = 1; }\r\n        return this.relativeWeeks(-weeks);\r\n    };\r\n    Day.prototype.nextWeek = function (weeks) {\r\n        if (weeks === void 0) { weeks = 1; }\r\n        return this.relativeWeeks(weeks);\r\n    };\r\n    // Year\r\n    Day.prototype.withYear = function (year) {\r\n        return this.mutate(function (d) { return d.year(year); });\r\n    };\r\n    Day.prototype.relativeYears = function (years) {\r\n        return this.mutate(function (d) { return d.add(years, 'year'); });\r\n    };\r\n    Day.prototype.prevYear = function (years) {\r\n        if (years === void 0) { years = 1; }\r\n        return this.relativeYears(-years);\r\n    };\r\n    Day.prototype.nextYear = function (years) {\r\n        if (years === void 0) { years = 1; }\r\n        return this.relativeYears(years);\r\n    };\r\n    // Hour\r\n    Day.prototype.withHour = function (hour) {\r\n        return this.mutate(function (d) { return d.hour(hour); });\r\n    };\r\n    Day.prototype.relativeHours = function (hours) {\r\n        return this.mutate(function (d) { return d.add(hours, 'hours'); });\r\n    };\r\n    Day.prototype.prevHour = function (hours) {\r\n        if (hours === void 0) { hours = 1; }\r\n        return this.relativeHours(-hours);\r\n    };\r\n    Day.prototype.nextHour = function (hours) {\r\n        if (hours === void 0) { hours = 1; }\r\n        return this.relativeHours(hours);\r\n    };\r\n    // Time\r\n    Day.prototype.withTimes = function (hour, minute, second, millisecond) {\r\n        if (hour === void 0) { hour = Constants.HOUR_MIN; }\r\n        if (minute === void 0) { minute = Constants.MINUTE_MIN; }\r\n        if (second === void 0) { second = Constants.SECOND_MIN; }\r\n        if (millisecond === void 0) { millisecond = Constants.MILLIS_MIN; }\r\n        return this.mutate(function (d) { return d.set({ hour: hour, minute: minute, second: second, millisecond: millisecond }); });\r\n    };\r\n    Day.prototype.withTime = function (time) {\r\n        return this.withTimes(time.hour, time.minute, time.second, time.millisecond);\r\n    };\r\n    Day.prototype.asTime = function () {\r\n        return new Time_Time(this.hour, this.minute, this.seconds, this.millis);\r\n    };\r\n    // Start & End\r\n    // Time\r\n    Day.prototype.start = function () {\r\n        return this.mutate(function (d) { return d.startOf('day'); });\r\n    };\r\n    Day.prototype.isStart = function () {\r\n        return this.hour === Constants.HOUR_MIN &&\r\n            this.minute === Constants.MINUTE_MIN &&\r\n            this.seconds === Constants.SECOND_MIN &&\r\n            this.millis === Constants.MILLIS_MIN;\r\n    };\r\n    Day.prototype.end = function (inclusive) {\r\n        if (inclusive === void 0) { inclusive = true; }\r\n        return inclusive ?\r\n            this.mutate(function (d) { return d.endOf('day'); }) :\r\n            this.mutate(function (d) { return d.startOf('day').add(1, 'day'); });\r\n    };\r\n    Day.prototype.isEnd = function () {\r\n        return this.hour === Constants.HOUR_MAX &&\r\n            this.minute === Constants.MINUTE_MAX &&\r\n            this.seconds === Constants.SECOND_MAX &&\r\n            this.millis === Constants.MILLIS_MAX;\r\n    };\r\n    // Hour\r\n    Day.prototype.startOfHour = function () {\r\n        return this.mutate(function (d) { return d.startOf('hour'); });\r\n    };\r\n    Day.prototype.isStartOfHour = function () {\r\n        return this.minute === Constants.MINUTE_MIN &&\r\n            this.seconds === Constants.SECOND_MIN &&\r\n            this.millis === Constants.MILLIS_MIN;\r\n    };\r\n    Day.prototype.endOfHour = function (inclusive) {\r\n        if (inclusive === void 0) { inclusive = true; }\r\n        return inclusive ?\r\n            this.mutate(function (d) { return d.endOf('hour'); }) :\r\n            this.mutate(function (d) { return d.startOf('hour').add(1, 'hour'); });\r\n    };\r\n    Day.prototype.isEndOfHour = function () {\r\n        return this.minute === Constants.MINUTE_MAX &&\r\n            this.seconds === Constants.SECOND_MAX &&\r\n            this.millis === Constants.MILLIS_MAX;\r\n    };\r\n    // Week\r\n    Day.prototype.startOfWeek = function () {\r\n        return this.mutate(function (d) { return d.startOf('week'); });\r\n    };\r\n    Day.prototype.isStartOfWeek = function () {\r\n        return this.dayOfWeek === Constants.WEEKDAY_MIN;\r\n    };\r\n    Day.prototype.endOfWeek = function (inclusive) {\r\n        if (inclusive === void 0) { inclusive = true; }\r\n        return inclusive ?\r\n            this.mutate(function (d) { return d.endOf('week'); }) :\r\n            this.mutate(function (d) { return d.startOf('week').add(1, 'week'); });\r\n    };\r\n    Day.prototype.isEndOfWeek = function () {\r\n        return this.dayOfWeek === Constants.WEEKDAY_MAX;\r\n    };\r\n    // Month\r\n    Day.prototype.startOfMonth = function () {\r\n        return this.mutate(function (d) { return d.startOf('month'); });\r\n    };\r\n    Day.prototype.isStartOfMonth = function () {\r\n        return this.dayOfMonth === Constants.DAY_MIN;\r\n    };\r\n    Day.prototype.endOfMonth = function (inclusive) {\r\n        if (inclusive === void 0) { inclusive = true; }\r\n        return inclusive ?\r\n            this.mutate(function (d) { return d.endOf('month'); }) :\r\n            this.mutate(function (d) { return d.startOf('month').add(1, 'month'); });\r\n    };\r\n    Day.prototype.isEndOfMonth = function () {\r\n        return this.dayOfMonth === this.daysInMonth();\r\n    };\r\n    // Year\r\n    Day.prototype.startOfYear = function () {\r\n        return this.mutate(function (d) { return d.startOf('year'); });\r\n    };\r\n    Day.prototype.isStartOfYear = function () {\r\n        return this.month === Constants.MONTH_MIN && this.dayOfMonth === Constants.DAY_MIN;\r\n    };\r\n    Day.prototype.endOfYear = function (inclusive) {\r\n        if (inclusive === void 0) { inclusive = true; }\r\n        return inclusive ?\r\n            this.mutate(function (d) { return d.endOf('year'); }) :\r\n            this.mutate(function (d) { return d.startOf('year').add(1, 'year'); });\r\n    };\r\n    Day.prototype.isEndOfYear = function () {\r\n        return this.month === Constants.MONTH_MAX && this.dayOfMonth === Constants.DAY_MAX;\r\n    };\r\n    // Days In X\r\n    Day.prototype.daysInMonth = function () {\r\n        return this.date.daysInMonth();\r\n    };\r\n    Day.prototype.daysInYear = function () {\r\n        return this.endOfYear().dayOfYear;\r\n    };\r\n    Day.prototype.weeksInYear = function () {\r\n        return this.date.weeksInYear();\r\n    };\r\n    // Display\r\n    Day.prototype.format = function (format) {\r\n        return this.date.format(format);\r\n    };\r\n    Day.prototype.utc = function (keepLocalTime) {\r\n        return this.mutate(function (d) { return d.utc(keepLocalTime); });\r\n    };\r\n    Day.prototype.toMoment = function () {\r\n        return this.date.clone();\r\n    };\r\n    Day.prototype.toDate = function () {\r\n        return this.date.toDate();\r\n    };\r\n    Day.prototype.toArray = function () {\r\n        return this.date.toArray();\r\n    };\r\n    Day.prototype.toJSON = function () {\r\n        return this.date.toJSON();\r\n    };\r\n    Day.prototype.toISOString = function (keepOffset) {\r\n        if (keepOffset === void 0) { keepOffset = false; }\r\n        return this.date.toISOString(keepOffset);\r\n    };\r\n    Day.prototype.toObject = function () {\r\n        return this.date.toObject();\r\n    };\r\n    Day.prototype.toString = function () {\r\n        return this.date.toString();\r\n    };\r\n    // State\r\n    Day.prototype.isDST = function () {\r\n        return this.date.isDST();\r\n    };\r\n    Day.prototype.isLeapYear = function () {\r\n        return this.date.isLeapYear();\r\n    };\r\n    // Instances\r\n    Day.now = function () {\r\n        return new Day(__WEBPACK_IMPORTED_MODULE_4_moment__());\r\n    };\r\n    Day.today = function () {\r\n        return this.now().start();\r\n    };\r\n    Day.tomorrow = function () {\r\n        return this.today().next();\r\n    };\r\n    Day.fromMoment = function (moment) {\r\n        return moment && moment.isValid() ? new Day(moment) : null;\r\n    };\r\n    Day.unix = function (millis) {\r\n        return this.fromMoment(__WEBPACK_IMPORTED_MODULE_4_moment__(millis));\r\n    };\r\n    Day.parse = function (input) {\r\n        return Parse_Parse.day(input);\r\n    };\r\n    Day.fromString = function (input) {\r\n        return this.fromMoment(__WEBPACK_IMPORTED_MODULE_4_moment__(input));\r\n    };\r\n    Day.fromFormat = function (input, formats) {\r\n        return this.fromMoment(__WEBPACK_IMPORTED_MODULE_4_moment__(input, formats));\r\n    };\r\n    Day.fromObject = function (input) {\r\n        return this.fromMoment(__WEBPACK_IMPORTED_MODULE_4_moment__(input));\r\n    };\r\n    Day.fromDate = function (input) {\r\n        return this.fromMoment(__WEBPACK_IMPORTED_MODULE_4_moment__(input));\r\n    };\r\n    Day.fromArray = function (input) {\r\n        return this.fromMoment(__WEBPACK_IMPORTED_MODULE_4_moment__(input));\r\n    };\r\n    Day.fromDayIdentifier = function (id) {\r\n        var date = id % 100;\r\n        var month = (Math.floor(id / 100) % 100) - 1;\r\n        var year = Math.floor(id / 10000);\r\n        return this.build(year, month, date);\r\n    };\r\n    Day.build = function (year, month, date, hour, minute, second, millisecond) {\r\n        if (date === void 0) { date = Constants.DAY_MIN; }\r\n        if (hour === void 0) { hour = Constants.HOUR_MIN; }\r\n        if (minute === void 0) { minute = Constants.MINUTE_MIN; }\r\n        if (second === void 0) { second = Constants.SECOND_MIN; }\r\n        if (millisecond === void 0) { millisecond = Constants.MILLIS_MIN; }\r\n        return new Day(__WEBPACK_IMPORTED_MODULE_4_moment__({ year: year, month: month, date: date, hour: hour, minute: minute, second: second, millisecond: millisecond }));\r\n    };\r\n    Day.getWeekspanOfYear = function (date) {\r\n        return Math.floor((date.dayOfYear() - 1) / Constants.DAYS_IN_WEEK);\r\n    };\r\n    Day.getLastWeekspanOfYear = function (date) {\r\n        var lastOfYear = date.clone().endOf('year');\r\n        var daysInYear = lastOfYear.dayOfYear();\r\n        return Math.floor((daysInYear - date.dayOfYear()) / Constants.DAYS_IN_WEEK);\r\n    };\r\n    Day.getWeekOfYear = function (date) {\r\n        var firstOfYear = date.clone().startOf('year');\r\n        var weeks = date.week();\r\n        return firstOfYear.day() > Constants.WEEK_OF_MONTH_MINIMUM_WEEKDAY ? weeks - 1 : weeks;\r\n    };\r\n    Day.getFullWeekOfYear = function (date) {\r\n        var firstOfYear = date.clone().startOf('year');\r\n        var weeks = date.week();\r\n        return firstOfYear.day() === Constants.WEEKDAY_MIN ? weeks : weeks - 1;\r\n    };\r\n    Day.getLastFullWeekOfYear = function (date) {\r\n        var firstOfYear = date.clone().startOf('year');\r\n        var weeks = date.week();\r\n        var weeksMax = date.weeksInYear();\r\n        var lastWeek = weeksMax - weeks;\r\n        return firstOfYear.day() === Constants.WEEKDAY_MIN ? lastWeek + 1 : lastWeek;\r\n    };\r\n    Day.getWeekspanOfMonth = function (date) {\r\n        return Math.floor((date.date() - 1) / Constants.DAYS_IN_WEEK);\r\n    };\r\n    Day.getLastWeekspanOfMonth = function (date) {\r\n        return Math.floor((date.daysInMonth() - date.date()) / Constants.DAYS_IN_WEEK);\r\n    };\r\n    Day.getFullWeekOfMonth = function (date) {\r\n        return Math.floor((date.date() - 1 - date.day() + Constants.DAYS_IN_WEEK) / Constants.DAYS_IN_WEEK);\r\n    };\r\n    Day.getLastFullWeekOfMonth = function (date) {\r\n        return Math.floor((date.daysInMonth() - date.date() - (Constants.WEEKDAY_MAX - date.day()) + Constants.DAYS_IN_WEEK) / Constants.DAYS_IN_WEEK);\r\n    };\r\n    Day.getWeekOfMonth = function (date) {\r\n        var dom = date.date();\r\n        var dow = date.day();\r\n        var sundayDate = dom - dow;\r\n        return Math.floor((sundayDate + Constants.WEEK_OF_MONTH_MINIMUM_WEEKDAY + 5) / Constants.DAYS_IN_WEEK);\r\n    };\r\n    Day.getLastDayOfMonth = function (date) {\r\n        return date.daysInMonth() - date.date() + 1;\r\n    };\r\n    Day.getWeekIdentifier = function (date) {\r\n        return date.week() + date.year() * 100;\r\n    };\r\n    Day.getMonthIdentifier = function (date) {\r\n        return (date.month() + 1) + date.year() * 100;\r\n    };\r\n    Day.getDayIdentifier = function (date) {\r\n        return date.date() + (date.month() + 1) * 100 + date.year() * 10000;\r\n    };\r\n    Day.getQuarterIdentifier = function (date) {\r\n        return date.quarter() + date.year() * 10;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Day.LOAD_TIME = Day.now();\r\n    return Day;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/CalendarDay.ts\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\n/**\r\n * A day in a [[Calendar]] with extra information relative to any selection on\r\n * the calendar, the current date, or events on the day.\r\n */\r\nvar CalendarDay_CalendarDay = (function (_super) {\r\n    __extends(CalendarDay, _super);\r\n    function CalendarDay() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * Whether this day is the current day (ex: today).\r\n         */\r\n        _this.currentDay = false;\r\n        /**\r\n         * Whether this day is on the same week as the current day (ex: today).\r\n         */\r\n        _this.currentWeek = false;\r\n        /**\r\n         * Whether this day is on the same month as the current day (ex: today).\r\n         */\r\n        _this.currentMonth = false;\r\n        /**\r\n         * Whether this day is on the same year as the current day (ex: today).\r\n         */\r\n        _this.currentYear = false;\r\n        /**\r\n         * How many days away this day is from the current day (ex: today). If this\r\n         * day is the current day the offset is 0. If this day is before the current\r\n         * day it will be the negative number of days away. Otherwise this will be\r\n         * positive meaning this day is after the current day by the given days.\r\n         */\r\n        _this.currentOffset = 0;\r\n        /**\r\n         * Whether this day is part of a selection on the calendar.\r\n         */\r\n        _this.selectedDay = false;\r\n        /**\r\n         * Whether this day is on the same week that the calendar selection is.\r\n         */\r\n        _this.selectedWeek = false;\r\n        /**\r\n         * Whether this day is on the same month that the calendar selection is.\r\n         */\r\n        _this.selectedMonth = false;\r\n        /**\r\n         * Whether this day is on the same year that the calendar selection is.\r\n         */\r\n        _this.selectedYear = false;\r\n        /**\r\n         * Whether this day is in the current calendar or not. Some days are outside\r\n         * the calendar span and used to fill in weeks. Month calendars will fill in\r\n         * days so the list of days in the calendar start on Sunday and end on Saturday.\r\n         */\r\n        _this.inCalendar = false;\r\n        /**\r\n         * The list of events on this day based on the settings and schedules in the\r\n         * calendar.\r\n         */\r\n        _this.events = [];\r\n        return _this;\r\n    }\r\n    /**\r\n     * Updates the current flags on this day given the current day (ex: today).\r\n     *\r\n     * @param current The current day of the calendar.\r\n     */\r\n    CalendarDay.prototype.updateCurrent = function (current) {\r\n        this.currentDay = this.sameDay(current);\r\n        this.currentWeek = this.sameWeek(current);\r\n        this.currentMonth = this.sameMonth(current);\r\n        this.currentYear = this.sameYear(current);\r\n        this.currentOffset = this.daysBetween(current, Op.DOWN, false);\r\n        return this;\r\n    };\r\n    /**\r\n     * Updates the selection flags on this day given the selection range on the\r\n     * calendar.\r\n     *\r\n     * @param selected The span of days selected on the calendar.\r\n     */\r\n    CalendarDay.prototype.updateSelected = function (selected) {\r\n        this.selectedDay = selected.matchesDay(this);\r\n        this.selectedWeek = selected.matchesWeek(this);\r\n        this.selectedMonth = selected.matchesMonth(this);\r\n        this.selectedYear = selected.matchesYear(this);\r\n        return this;\r\n    };\r\n    /**\r\n     * Clears the selection flags on this day. This is done when the selection on\r\n     * the calendar is cleared.\r\n     */\r\n    CalendarDay.prototype.clearSelected = function () {\r\n        this.selectedDay = this.selectedWeek = this.selectedMonth = this.selectedYear = false;\r\n        return this;\r\n    };\r\n    return CalendarDay;\r\n}(Day_Day));\r\n\r\n\n// CONCATENATED MODULE: ./src/CalendarEvent.ts\n\r\n\r\n/**\r\n * An event on a given day and the schedule that generated the event.\r\n */\r\nvar CalendarEvent_CalendarEvent = (function () {\r\n    /**\r\n     * Creates a new event instance given the id, the event paired with the\r\n     * schedule, the schedule, the time span of the event, and the day on the\r\n     * calendar the event belongs to.\r\n     *\r\n     * @param id The relatively unique identifier of this event.\r\n     * @param event The event paired with the schedule.\r\n     * @param schedule The schedule that generated this event.\r\n     * @param time The time span of this event.\r\n     * @param actualDay The day on the calendar this event is for.\r\n     */\r\n    function CalendarEvent(id, event, schedule, time, actualDay) {\r\n        /**\r\n         * The row this event is on in a visual calendar. An event can span multiple\r\n         * days and it is desirable to have the occurrence on each day to line up.\r\n         * This is only set when [[Calendar.updateRows]] is true or manually set.\r\n         * This value makes sense for visual calendars for all day events or when the\r\n         * visual calendar is not positioning events based on their time span.\r\n         */\r\n        this.row = 0;\r\n        /**\r\n         * The column this event is on in a visual calendar. An event can have its\r\n         * time overlap with another event displaying one of the events in another\r\n         * column. This is only set when [[Calendar.updateColumns]] is true or\r\n         * manually set. This value makes sense for visual calendars that are\r\n         * displaying event occurrences at specific times positioned accordingly.\r\n         */\r\n        this.col = 0;\r\n        this.id = id;\r\n        this.event = event;\r\n        this.schedule = schedule;\r\n        this.time = time;\r\n        this.fullDay = schedule.isFullDay();\r\n        this.starting = time.isPoint || time.start.sameDay(actualDay);\r\n        this.ending = time.isPoint || time.end.relative(-1).sameDay(actualDay);\r\n    }\r\n    Object.defineProperty(CalendarEvent.prototype, \"scheduleId\", {\r\n        /**\r\n         * The id of the schedule uniqe within the calendar which generated this event.\r\n         */\r\n        get: function () {\r\n            return Math.floor(this.id / Constants.MAX_EVENTS_PER_DAY);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return CalendarEvent;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Calendar.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n *\r\n */\r\nvar Calendar_Calendar = (function () {\r\n    /**\r\n     *\r\n     */\r\n    function Calendar(start, end, type, size, moveStart, moveEnd, input) {\r\n        /**\r\n         *\r\n         */\r\n        this.fill = false;\r\n        /**\r\n         *\r\n         */\r\n        this.minimumSize = 0;\r\n        /**\r\n         *\r\n         */\r\n        this.repeatCovers = true;\r\n        /**\r\n         *\r\n         */\r\n        this.listTimes = false;\r\n        /**\r\n         *\r\n         */\r\n        this.eventsOutside = false;\r\n        /**\r\n         *\r\n         */\r\n        this.updateRows = false;\r\n        /**\r\n         *\r\n         */\r\n        this.updateColumns = false;\r\n        /**\r\n         *\r\n         */\r\n        this.eventSorter = null;\r\n        /**\r\n         *\r\n         */\r\n        this.selection = null;\r\n        /**\r\n         *\r\n         */\r\n        this.days = [];\r\n        /**\r\n         *\r\n         */\r\n        this.schedules = [];\r\n        this.span = new DaySpan_DaySpan(start, end);\r\n        this.filled = new DaySpan_DaySpan(start, end);\r\n        this.type = type;\r\n        this.size = size;\r\n        this.moveStart = moveStart;\r\n        this.moveEnd = moveEnd;\r\n        if (Functions.isDefined(input)) {\r\n            this.withInput(input, false);\r\n        }\r\n        this.refresh();\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.withInput = function (input, refresh) {\r\n        if (refresh === void 0) { refresh = true; }\r\n        this.fill = Functions.coalesce(input.fill, this.fill);\r\n        this.minimumSize = Functions.coalesce(input.minimumSize, this.minimumSize);\r\n        this.repeatCovers = Functions.coalesce(input.repeatCovers, this.repeatCovers);\r\n        this.listTimes = Functions.coalesce(input.listTimes, this.listTimes);\r\n        this.eventsOutside = Functions.coalesce(input.eventsOutside, this.eventsOutside);\r\n        this.updateRows = Functions.coalesce(input.updateRows, this.updateRows);\r\n        this.updateColumns = Functions.coalesce(input.updateColumns, this.updateColumns);\r\n        this.eventSorter = Functions.coalesce(input.eventSorter, this.eventSorter);\r\n        if (Functions.isArray(input.schedules)) {\r\n            this.removeSchedules();\r\n            this.addSchedules(input.schedules, false, true);\r\n        }\r\n        if (refresh) {\r\n            this.refresh();\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.withMinimumSize = function (minimumSize) {\r\n        this.minimumSize = minimumSize;\r\n        this.refresh();\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.withRepeatCovers = function (repeatCovers) {\r\n        this.repeatCovers = repeatCovers;\r\n        this.refreshEvents();\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.withListTimes = function (listTimes) {\r\n        this.listTimes = listTimes;\r\n        this.refreshEvents();\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.withEventsOutside = function (eventsOutside) {\r\n        this.eventsOutside = eventsOutside;\r\n        this.refreshEvents();\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.withUpdateRows = function (updateRows, refresh) {\r\n        if (refresh === void 0) { refresh = true; }\r\n        this.updateRows = updateRows;\r\n        if (refresh && updateRows) {\r\n            this.refreshRows();\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.withUpdateColumns = function (updateColumns, refresh) {\r\n        if (refresh === void 0) { refresh = true; }\r\n        this.updateColumns = updateColumns;\r\n        if (refresh && updateColumns) {\r\n            this.refreshColumns();\r\n        }\r\n        return this;\r\n    };\r\n    Object.defineProperty(Calendar.prototype, \"start\", {\r\n        /**\r\n         *\r\n         */\r\n        get: function () {\r\n            return this.span.start;\r\n        },\r\n        /**\r\n         *\r\n         */\r\n        set: function (day) {\r\n            this.span.start = day;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Calendar.prototype, \"end\", {\r\n        /**\r\n         *\r\n         */\r\n        get: function () {\r\n            return this.span.end;\r\n        },\r\n        /**\r\n         *\r\n         */\r\n        set: function (day) {\r\n            this.span.end = day;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.summary = function (dayOfWeek, short, repeat, contextual, delimiter) {\r\n        if (dayOfWeek === void 0) { dayOfWeek = true; }\r\n        if (short === void 0) { short = false; }\r\n        if (repeat === void 0) { repeat = false; }\r\n        if (contextual === void 0) { contextual = true; }\r\n        if (delimiter === void 0) { delimiter = ' - '; }\r\n        return this.span.summary(this.type, dayOfWeek, short, repeat, contextual, delimiter);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.split = function (by) {\r\n        if (by === void 0) { by = 1; }\r\n        var split = [];\r\n        var start = this.start;\r\n        var end = this.moveEnd(this.end, by - this.size);\r\n        for (var i = 0; i < this.size; i++) {\r\n            split.push(new Calendar(start, end, this.type, by, this.moveStart, this.moveEnd, this));\r\n            start = this.moveStart(start, by);\r\n            end = this.moveEnd(end, by);\r\n        }\r\n        return split;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.refresh = function (today) {\r\n        if (today === void 0) { today = Day_Day.today(); }\r\n        this.length = this.span.days(Op.UP, true);\r\n        this.resetDays();\r\n        this.refreshCurrent(today);\r\n        this.refreshSelection();\r\n        this.refreshEvents();\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.resetFilled = function () {\r\n        this.filled.start = this.fill ? this.start.startOfWeek() : this.start;\r\n        this.filled.end = this.fill ? this.end.endOfWeek() : this.end;\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.resetDays = function () {\r\n        this.resetFilled();\r\n        var days = this.days;\r\n        var filled = this.filled;\r\n        var current = filled.start;\r\n        var daysBetween = filled.days(Op.UP);\r\n        var total = Math.max(this.minimumSize, daysBetween);\r\n        for (var i = 0; i < total; i++) {\r\n            var day = days[i];\r\n            if (!day || !day.sameDay(current)) {\r\n                day = new CalendarDay_CalendarDay(current.date);\r\n                if (i < days.length) {\r\n                    days.splice(i, 1, day);\r\n                }\r\n                else {\r\n                    days.push(day);\r\n                }\r\n            }\r\n            day.inCalendar = this.span.contains(day);\r\n            current = current.next();\r\n        }\r\n        if (days.length > total) {\r\n            days.splice(total, days.length - total);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.refreshCurrent = function (today) {\r\n        if (today === void 0) { today = Day_Day.today(); }\r\n        return this.iterateDays(function (d) {\r\n            d.updateCurrent(today);\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.refreshSelection = function () {\r\n        var _this = this;\r\n        return this.iterateDays(function (d) {\r\n            if (_this.selection) {\r\n                d.updateSelected(_this.selection);\r\n            }\r\n            else {\r\n                d.clearSelected();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.refreshEvents = function () {\r\n        var _this = this;\r\n        this.iterateDays(function (d) {\r\n            if (d.inCalendar || _this.eventsOutside) {\r\n                d.events = _this.eventsForDay(d, _this.listTimes, _this.repeatCovers);\r\n                if (_this.eventSorter) {\r\n                    d.events.sort(_this.eventSorter);\r\n                }\r\n            }\r\n        });\r\n        if (this.updateRows) {\r\n            this.refreshRows();\r\n        }\r\n        if (this.updateColumns) {\r\n            this.refreshColumns();\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.refreshRows = function () {\r\n        var eventToRow = {};\r\n        var onlyFullDay = this.listTimes;\r\n        this.iterateDays(function (d) {\r\n            if (d.dayOfWeek === 0) {\r\n                eventToRow = {};\r\n            }\r\n            var used = {};\r\n            for (var _i = 0, _a = d.events; _i < _a.length; _i++) {\r\n                var event_1 = _a[_i];\r\n                if (onlyFullDay && !event_1.fullDay) {\r\n                    continue;\r\n                }\r\n                if (event_1.id in eventToRow) {\r\n                    used[event_1.row = eventToRow[event_1.id]] = true;\r\n                }\r\n            }\r\n            var rowIndex = 0;\r\n            for (var _b = 0, _c = d.events; _b < _c.length; _b++) {\r\n                var event_2 = _c[_b];\r\n                if ((onlyFullDay && !event_2.fullDay) || event_2.id in eventToRow) {\r\n                    continue;\r\n                }\r\n                while (used[rowIndex]) {\r\n                    rowIndex++;\r\n                }\r\n                eventToRow[event_2.id] = event_2.row = rowIndex;\r\n                rowIndex++;\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.refreshColumns = function () {\r\n        this.iterateDays(function (d) {\r\n            var markers = [];\r\n            for (var _i = 0, _a = d.events; _i < _a.length; _i++) {\r\n                var event_3 = _a[_i];\r\n                if (!event_3.fullDay) {\r\n                    markers.push({\r\n                        time: event_3.time.start.time,\r\n                        event: event_3,\r\n                        start: true,\r\n                        parent: null\r\n                    });\r\n                    markers.push({\r\n                        time: event_3.time.end.time - 1,\r\n                        event: event_3,\r\n                        start: false,\r\n                        parent: null\r\n                    });\r\n                }\r\n            }\r\n            markers.sort(function (a, b) {\r\n                return a.time - b.time;\r\n            });\r\n            var parent = null;\r\n            for (var _b = 0, markers_1 = markers; _b < markers_1.length; _b++) {\r\n                var marker = markers_1[_b];\r\n                if (marker.start) {\r\n                    marker.parent = parent;\r\n                    parent = marker;\r\n                }\r\n                else if (parent) {\r\n                    parent = parent.parent;\r\n                }\r\n            }\r\n            for (var _c = 0, markers_2 = markers; _c < markers_2.length; _c++) {\r\n                var marker = markers_2[_c];\r\n                if (marker.start) {\r\n                    marker.event.col = marker.parent ? marker.parent.event.col + 1 : 0;\r\n                }\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.iterateDays = function (iterator) {\r\n        var days = this.days;\r\n        for (var i = 0; i < days.length; i++) {\r\n            iterator(days[i]);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.eventsForDay = function (day, getTimes, covers) {\r\n        if (getTimes === void 0) { getTimes = true; }\r\n        if (covers === void 0) { covers = true; }\r\n        var events = [];\r\n        var entries = this.schedules;\r\n        for (var entryIndex = 0; entryIndex < entries.length; entryIndex++) {\r\n            var entry = entries[entryIndex];\r\n            var schedule = entry.schedule;\r\n            var event_4 = entry.event;\r\n            var eventId = entryIndex * Constants.MAX_EVENTS_PER_DAY;\r\n            if ((covers && schedule.coversDay(day)) || (!covers && schedule.matchesDay(day))) {\r\n                if (getTimes) {\r\n                    var times = covers ?\r\n                        entry.schedule.getSpansOver(day) :\r\n                        entry.schedule.getSpansOn(day);\r\n                    for (var timeIndex = 0; timeIndex < times.length; timeIndex++) {\r\n                        events.push(new CalendarEvent_CalendarEvent(eventId + timeIndex, event_4, schedule, times[timeIndex], day));\r\n                    }\r\n                }\r\n                else {\r\n                    var over = schedule.getSpanOver(day);\r\n                    if (over) {\r\n                        events.push(new CalendarEvent_CalendarEvent(eventId, event_4, schedule, over, day));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.findSchedule = function (input) {\r\n        for (var _i = 0, _a = this.schedules; _i < _a.length; _i++) {\r\n            var schedule = _a[_i];\r\n            if (schedule === input || schedule.schedule === input || schedule.event === input) {\r\n                return schedule;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.removeSchedules = function (schedules, delayRefresh) {\r\n        if (schedules === void 0) { schedules = null; }\r\n        if (delayRefresh === void 0) { delayRefresh = false; }\r\n        if (schedules) {\r\n            for (var _i = 0, schedules_1 = schedules; _i < schedules_1.length; _i++) {\r\n                var schedule = schedules_1[_i];\r\n                this.removeSchedule(schedule, true);\r\n            }\r\n        }\r\n        else {\r\n            this.schedules = [];\r\n        }\r\n        if (!delayRefresh) {\r\n            this.refreshEvents();\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.removeSchedule = function (schedule, delayRefresh) {\r\n        if (delayRefresh === void 0) { delayRefresh = false; }\r\n        var found = this.findSchedule(schedule);\r\n        if (found) {\r\n            this.schedules.splice(this.schedules.indexOf(found), 1);\r\n            if (!delayRefresh) {\r\n                this.refreshEvents();\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.addSchedule = function (schedule, allowDuplicates, delayRefresh) {\r\n        if (allowDuplicates === void 0) { allowDuplicates = false; }\r\n        if (delayRefresh === void 0) { delayRefresh = false; }\r\n        var parsed = Parse_Parse.calendarSchedule(schedule);\r\n        if (!allowDuplicates) {\r\n            var existing = this.findSchedule(parsed);\r\n            if (existing) {\r\n                return this;\r\n            }\r\n        }\r\n        this.schedules.push(parsed);\r\n        if (!delayRefresh) {\r\n            this.refreshEvents();\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.addSchedules = function (schedules, allowDuplicates, delayRefresh) {\r\n        if (allowDuplicates === void 0) { allowDuplicates = false; }\r\n        if (delayRefresh === void 0) { delayRefresh = false; }\r\n        for (var _i = 0, schedules_2 = schedules; _i < schedules_2.length; _i++) {\r\n            var schedule = schedules_2[_i];\r\n            this.addSchedule(schedule, allowDuplicates, true);\r\n        }\r\n        if (!delayRefresh) {\r\n            this.refreshEvents();\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.select = function (start, end) {\r\n        this.selection = end ? new DaySpan_DaySpan(start, end) : DaySpan_DaySpan.point(start);\r\n        this.refreshSelection();\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.unselect = function () {\r\n        this.selection = null;\r\n        this.refreshSelection();\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.move = function (jump) {\r\n        if (jump === void 0) { jump = this.size; }\r\n        this.start = this.moveStart(this.start, jump);\r\n        this.end = this.moveEnd(this.end, jump);\r\n        this.refresh();\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.next = function (jump) {\r\n        if (jump === void 0) { jump = this.size; }\r\n        return this.move(jump);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.prototype.prev = function (jump) {\r\n        if (jump === void 0) { jump = this.size; }\r\n        return this.move(-jump);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.days = function (days, around, focus, input) {\r\n        if (days === void 0) { days = 1; }\r\n        if (around === void 0) { around = Day_Day.today(); }\r\n        if (focus === void 0) { focus = 0.4999; }\r\n        var start = around.start().relativeDays(-Math.floor(days * focus));\r\n        var end = start.relativeDays(days - 1).end();\r\n        var mover = function (day, amount) { return day.relativeDays(amount); };\r\n        return new Calendar(start, end, Units.DAY, days, mover, mover, input);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.weeks = function (weeks, around, focus, input) {\r\n        if (weeks === void 0) { weeks = 1; }\r\n        if (around === void 0) { around = Day_Day.today(); }\r\n        if (focus === void 0) { focus = 0.4999; }\r\n        var start = around.start().startOfWeek().relativeWeeks(-Math.floor(weeks * focus));\r\n        var end = start.relativeWeeks(weeks - 1).endOfWeek();\r\n        var mover = function (day, amount) { return day.relativeWeeks(amount); };\r\n        return new Calendar(start, end, Units.WEEK, weeks, mover, mover, input);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.months = function (months, around, focus, input) {\r\n        if (months === void 0) { months = 1; }\r\n        if (around === void 0) { around = Day_Day.today(); }\r\n        if (focus === void 0) { focus = 0.4999; }\r\n        if (input === void 0) { input = { fill: true }; }\r\n        var start = around.start().startOfMonth().relativeMonths(-Math.floor(months * focus));\r\n        var end = start.relativeMonths(months - 1).endOfMonth();\r\n        var moveStart = function (day, amount) { return day.relativeMonths(amount); };\r\n        var moveEnd = function (day, amount) { return day.startOfMonth().relativeMonths(amount).endOfMonth(); };\r\n        return new Calendar(start, end, Units.MONTH, months, moveStart, moveEnd, input);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Calendar.years = function (years, around, focus, input) {\r\n        if (years === void 0) { years = 1; }\r\n        if (around === void 0) { around = Day_Day.today(); }\r\n        if (focus === void 0) { focus = 0.4999; }\r\n        if (input === void 0) { input = { fill: true }; }\r\n        var start = around.start().startOfYear().relativeYears(-Math.floor(years * focus));\r\n        var end = start.relativeYears(years - 1).endOfYear();\r\n        var mover = function (day, amount) { return day.relativeYears(amount); };\r\n        return new Calendar(start, end, Units.YEAR, years, mover, mover, input);\r\n    };\r\n    return Calendar;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Month.ts\n\r\n/**\r\n * The months in a year.\r\n */\r\nvar Month = (function () {\r\n    function Month() {\r\n    }\r\n    Month.JANUARY = 0;\r\n    Month.FEBRUARY = 1;\r\n    Month.MARCH = 2;\r\n    Month.APRIL = 3;\r\n    Month.MAY = 4;\r\n    Month.JUNE = 5;\r\n    Month.JULY = 6;\r\n    Month.AUGUST = 7;\r\n    Month.SEPTEMBER = 8;\r\n    Month.OCTOBER = 9;\r\n    Month.NOVEMBER = 10;\r\n    Month.DECEMBER = 11;\r\n    /**\r\n     * The full list of months in a year.\r\n     */\r\n    Month.LIST = [\r\n        Month.JANUARY,\r\n        Month.FEBRUARY,\r\n        Month.MARCH,\r\n        Month.APRIL,\r\n        Month.MAY,\r\n        Month.JUNE,\r\n        Month.JULY,\r\n        Month.AUGUST,\r\n        Month.SEPTEMBER,\r\n        Month.OCTOBER,\r\n        Month.NOVEMBER,\r\n        Month.DECEMBER\r\n    ];\r\n    return Month;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Weekday.ts\n\r\n/**\r\n * The days in a week.\r\n */\r\nvar Weekday = (function () {\r\n    function Weekday() {\r\n    }\r\n    Weekday.SUNDAY = 0;\r\n    Weekday.MONDAY = 1;\r\n    Weekday.TUESDAY = 2;\r\n    Weekday.WEDNESDAY = 3;\r\n    Weekday.THURSDAY = 4;\r\n    Weekday.FRIDAY = 5;\r\n    Weekday.SATURDAY = 6;\r\n    /**\r\n     * The full list of days in a week.\r\n     */\r\n    Weekday.LIST = [\r\n        Weekday.SUNDAY,\r\n        Weekday.MONDAY,\r\n        Weekday.TUESDAY,\r\n        Weekday.WEDNESDAY,\r\n        Weekday.THURSDAY,\r\n        Weekday.FRIDAY,\r\n        Weekday.SATURDAY\r\n    ];\r\n    /**\r\n     * The list of days starting with Monday and ending on Friday.\r\n     */\r\n    Weekday.WEEK = [\r\n        Weekday.MONDAY,\r\n        Weekday.TUESDAY,\r\n        Weekday.WEDNESDAY,\r\n        Weekday.THURSDAY,\r\n        Weekday.FRIDAY\r\n    ];\r\n    /**\r\n     * The days on the weekend, starting with Saturday and ending with Sunday.\r\n     */\r\n    Weekday.ENDS = [\r\n        Weekday.SATURDAY,\r\n        Weekday.SUNDAY\r\n    ];\r\n    return Weekday;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Pattern.ts\n\r\n\r\n\r\n\r\n/**\r\n * A class which helps describe [[ScheduleInput]] if it matches a pattern.\r\n */\r\nvar Pattern_Pattern = (function () {\r\n    /**\r\n     *\r\n     */\r\n    function Pattern(name, listed, describe, rules) {\r\n        this.name = name;\r\n        this.listed = listed;\r\n        this.describe = describe;\r\n        this.rules = rules;\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    Pattern.prototype.apply = function (input, day) {\r\n        for (var _i = 0, _a = Pattern.PROPS; _i < _a.length; _i++) {\r\n            var prop = _a[_i];\r\n            var rule = this.rules[prop];\r\n            // Should have one value\r\n            if (rule === 1) {\r\n                input[prop] = [day[prop]];\r\n            }\r\n            // Can be any of the values in the array\r\n            if (Functions.isArray(rule)) {\r\n                input[prop] = rule;\r\n            }\r\n            // Must not be present\r\n            if (!Functions.isDefined(rule)) {\r\n                delete input[prop];\r\n            }\r\n        }\r\n        return input;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Pattern.prototype.isMatch = function (input, exactlyWith) {\r\n        var exactly = Functions.isDefined(exactlyWith);\r\n        for (var _i = 0, _a = Pattern.PROPS; _i < _a.length; _i++) {\r\n            var prop = _a[_i];\r\n            var rule = this.rules[prop];\r\n            var curr = input[prop];\r\n            // Optional, skip it\r\n            if (rule === false) {\r\n                continue;\r\n            }\r\n            // Requires any value\r\n            if (rule === true && !curr) {\r\n                return false;\r\n            }\r\n            // Must not be present\r\n            if (!Functions.isDefined(rule) && curr) {\r\n                return false;\r\n            }\r\n            // Must be an array of the same size\r\n            if (Functions.isNumber(rule)) {\r\n                if (Functions.isArray(curr) && curr.length === rule) {\r\n                    if (exactly && curr.indexOf(exactlyWith[prop]) === -1) {\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            // Must be an array of the same values\r\n            if (Functions.isArray(rule)) {\r\n                if (!Functions.isArray(curr)) {\r\n                    return false;\r\n                }\r\n                if (rule.length !== curr.length) {\r\n                    return false;\r\n                }\r\n                for (var i = 0; i < rule.length; i++) {\r\n                    if (rule[i] !== curr[i]) {\r\n                        return false;\r\n                    }\r\n                }\r\n                if (exactly && rule.indexOf(exactlyWith[prop]) === -1) {\r\n                    return false;\r\n                }\r\n            }\r\n            // Must be an object with same over & offset.\r\n            if (Functions.isObject(rule)) {\r\n                if (!Functions.isObject(curr)) {\r\n                    return false;\r\n                }\r\n                var ruleOffset = rule.offset || 0;\r\n                var currOffset = curr.offset || 0;\r\n                if (currOffset !== ruleOffset || curr.every !== rule.every) {\r\n                    return false;\r\n                }\r\n                if (exactly && (exactlyWith[prop] % rule.every) !== ruleOffset) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Pattern.withName = function (name) {\r\n        return PatternMap[name];\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Pattern.findMatch = function (input, listedOnly, exactlyWith) {\r\n        if (listedOnly === void 0) { listedOnly = true; }\r\n        for (var _i = 0, Patterns_1 = Patterns; _i < Patterns_1.length; _i++) {\r\n            var pattern = Patterns_1[_i];\r\n            if ((pattern.listed || !listedOnly) && pattern.isMatch(input, exactlyWith)) {\r\n                return pattern;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * The properties in the [[ScheduleInput]] which are compared against the\r\n     * rules of a pattern.\r\n     */\r\n    Pattern.PROPS = [\r\n        'dayOfWeek', 'dayOfMonth', 'lastDayOfMonth', 'dayOfYear',\r\n        'month', 'week', 'year',\r\n        'weekOfYear', 'weekspanOfYear', 'fullWeekOfYear', 'lastWeekspanOfYear', 'lastFullWeekOfYear',\r\n        'weekOfMonth', 'weekspanOfMonth', 'fullWeekOfMonth', 'lastWeekspanOfMonth', 'lastFullWeekOfMonth'\r\n    ];\r\n    return Pattern;\r\n}());\r\n\r\n/**\r\n *\r\n */\r\nvar Patterns = [\r\n    new Pattern_Pattern('none', true, function (day) { return 'Does not repeat'; }, {\r\n        year: 1,\r\n        month: 1,\r\n        dayOfMonth: 1\r\n    }),\r\n    new Pattern_Pattern('daily', true, function (day) { return 'Daily'; }, {}),\r\n    new Pattern_Pattern('weekly', true, function (day) { return 'Weekly on ' + day.format('dddd'); }, {\r\n        dayOfWeek: 1\r\n    }),\r\n    new Pattern_Pattern('monthlyWeek', true, function (day) { return 'Monthly on the ' + Suffix.CACHE[day.weekspanOfMonth + 1] + ' ' + day.format('dddd'); }, {\r\n        dayOfWeek: 1,\r\n        weekspanOfMonth: 1\r\n    }),\r\n    new Pattern_Pattern('annually', true, function (day) { return 'Annually on ' + day.format('MMMM Do'); }, {\r\n        month: 1,\r\n        dayOfMonth: 1\r\n    }),\r\n    new Pattern_Pattern('annuallyMonthWeek', true, function (day) { return 'Annually on the ' + Suffix.CACHE[day.weekspanOfMonth + 1] + ' ' + day.format('dddd') + ' of ' + day.format('MMMM'); }, {\r\n        month: 1,\r\n        dayOfWeek: 1,\r\n        weekspanOfMonth: 1\r\n    }),\r\n    new Pattern_Pattern('weekday', true, function (day) { return 'Every weekday (Monday to Friday)'; }, {\r\n        dayOfWeek: [Weekday.MONDAY, Weekday.TUESDAY, Weekday.WEDNESDAY, Weekday.THURSDAY, Weekday.FRIDAY]\r\n    }),\r\n    new Pattern_Pattern('monthly', true, function (day) { return 'Monthly on the ' + day.format('Do') + ' day'; }, {\r\n        dayOfMonth: 1\r\n    }),\r\n    new Pattern_Pattern('custom', true, function (day) { return 'Custom...'; }, {\r\n        dayOfWeek: false,\r\n        dayOfMonth: false,\r\n        lastDayOfMonth: false,\r\n        dayOfYear: false,\r\n        year: false,\r\n        month: false,\r\n        week: false,\r\n        weekOfYear: false,\r\n        weekspanOfYear: false,\r\n        fullWeekOfYear: false,\r\n        lastWeekspanOfYear: false,\r\n        lastFullWeekOfYear: false,\r\n        weekOfMonth: false,\r\n        weekspanOfMonth: false,\r\n        fullWeekOfMonth: false,\r\n        lastWeekspanOfMonth: false,\r\n        lastFullWeekOfMonth: false\r\n    })\r\n];\r\n/**\r\n *\r\n */\r\nvar PatternMap = {};\r\nfor (var Pattern__i = 0, Patterns_2 = Patterns; Pattern__i < Patterns_2.length; Pattern__i++) {\r\n    var Pattern_pattern = Patterns_2[Pattern__i];\r\n    PatternMap[Pattern_pattern.name] = Pattern_pattern;\r\n}\r\n\n// CONCATENATED MODULE: ./src/Sort.ts\n\r\n// Sorts.List( Sorts.FullDay, Sorts.Desc( Sorts.Start ) );\r\nvar Sorts = (function () {\r\n    function Sorts() {\r\n    }\r\n    Sorts.Start = function (a, b) {\r\n        return a.time.start.time - b.time.start.time;\r\n    };\r\n    Sorts.End = function (a, b) {\r\n        return a.time.end.time - b.time.end.time;\r\n    };\r\n    Sorts.FullDay = function (a, b) {\r\n        var af = a.fullDay ? 0 : 1;\r\n        var bf = b.fullDay ? 0 : 1;\r\n        return af - bf;\r\n    };\r\n    Sorts.Duration = function (a, b) {\r\n        return a.time.millis() - b.time.millis();\r\n    };\r\n    Sorts.Desc = function (sorter) {\r\n        return function (a, b) {\r\n            return sorter(b, a);\r\n        };\r\n    };\r\n    Sorts.Alphabetical = function (getString) {\r\n        return function (a, b) {\r\n            var as = getString(a.event) || '';\r\n            var bs = getString(b.event) || '';\r\n            return as.localeCompare(bs);\r\n        };\r\n    };\r\n    Sorts.Ordered = function (getOrder) {\r\n        return function (a, b) {\r\n            var ao = getOrder(a.event);\r\n            var bo = getOrder(b.event);\r\n            return ao - bo;\r\n        };\r\n    };\r\n    Sorts.List = function (list) {\r\n        return function (a, b) {\r\n            for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {\r\n                var sorter = list_1[_i];\r\n                var compare = sorter(a, b);\r\n                if (compare !== 0) {\r\n                    return compare;\r\n                }\r\n            }\r\n            return 0;\r\n        };\r\n    };\r\n    return Sorts;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/index.ts\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Calendar\", function() { return Calendar_Calendar; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"CalendarDay\", function() { return CalendarDay_CalendarDay; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"CalendarEvent\", function() { return CalendarEvent_CalendarEvent; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Constants\", function() { return Constants; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Day\", function() { return Day_Day; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"DaySpan\", function() { return DaySpan_DaySpan; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Functions\", function() { return Functions; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Month\", function() { return Month; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Op\", function() { return Op; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"operate\", function() { return operate; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Parse\", function() { return Parse_Parse; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Pattern\", function() { return Pattern_Pattern; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Patterns\", function() { return Patterns; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"PatternMap\", function() { return PatternMap; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Schedule\", function() { return Schedule_Schedule; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Sorts\", function() { return Sorts; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Suffix\", function() { return Suffix; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Time\", function() { return Time_Time; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Units\", function() { return Units; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Weekday\", function() { return Weekday; });\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// dayspan.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4619b077cf9d8c89d702","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"moment\",\"commonjs2\":\"moment\",\"amd\":\"moment\",\"root\":\"moment\"}\n// module id = 0\n// module chunks = 0","\n/**\n * An operation that can be performed on a single number.\n */\nexport enum Op\n{\n  /**\n   * The number is returned unmodified.\n   */\n  NONE,\n\n  /**\n   * The number is rounded down to the nearest whole number.\n   */\n  FLOOR,\n\n  /**\n   * The number is rounded up to the nearest whole number.\n   */\n  CEIL,\n\n  /**\n   * The number is rounded up or down depending on if the fractional value is\n   * greater than or less than 0.5 respectively.\n   */\n  ROUND,\n\n  /**\n   * The fractional part of the number is dropped.\n   */\n  TRUNCATE,\n\n  /**\n   * The number is rounded up when positive and down when negative. This is\n   * effectively ceiling the absolute value where the result preserves the sign.\n   */\n  UP,\n\n  /**\n   * The number is rounded down when positive and up when negative. This is\n   * effectively floor the absolute value where the result preserves the sign.\n   */\n  DOWN\n}\n\n\n/**\n * Performs the requested operation on the given number, optionally taking\n * the absolute value of the number before the operation.\n *\n * @param value The number to operate on.\n * @param op The operation to perform.\n * @param absolute If the number should be positive before the operation.\n * @return The operated result, or the original value if its not a valid number.\n */\nexport function operate(value: number, op: Op, absolute: boolean = false)\n{\n  if (isFinite(value))\n  {\n    if (absolute)\n    {\n      value = Math.abs( value );\n    }\n\n    switch (op)\n    {\n    case Op.NONE:\n      return value;\n    case Op.FLOOR:\n      return Math.floor( value );\n    case Op.CEIL:\n      return Math.ceil( value );\n    case Op.ROUND:\n      return Math.round( value );\n    case Op.TRUNCATE:\n    case Op.DOWN:\n      return value < 0 ? Math.ceil( value ) : Math.floor( value );\n    case Op.UP:\n      return value < 0 ? Math.floor( value ) : Math.ceil( value );\n    }\n  }\n\n  return value;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Op.ts","\n\n/**\n * The class which contains commonly used functions by the library. These\n * functions and variables exist in a class so they may be overridden if\n * desired.\n */\nexport class Functions\n{\n\n  /**\n   * Determines whether the given input is an array.\n   *\n   * @param input The variable to test.\n   * @return True if the variable is an array, otherwise false.\n   */\n  public static isArray(input: any): boolean\n  {\n    return input instanceof Array;\n  }\n\n  /**\n   *\n   */\n  public static isArrayEquals(x: any[], y: any[]): boolean\n  {\n    if (x === y) return true;\n    if (x.length !== y.length) return false;\n\n    for (let i = 0; i < x.length; i++)\n    {\n      if (x[ i ] !== y[ i ])\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Determines whether the given input is a string.\n   *\n   * @param input The variable to test.\n   * @return True if the variable is a string, otherwise false.\n   */\n  public static isString(input: any): boolean\n  {\n    return typeof(input) === 'string';\n  }\n\n  /**\n   *\n   */\n  public static isNumber(input: any): boolean\n  {\n    return isFinite(input);\n  }\n\n  /**\n   *\n   */\n  public static isObject(input: any): boolean\n  {\n    return !this.isArray(input) && typeof(input) === 'object';\n  }\n\n  /**\n   * Determines whether the given input is defined.\n   *\n   * @param input The variable to test.\n   * @return True if the variable is defined, otherwise false.\n   */\n  public static isDefined(input: any): boolean\n  {\n    return typeof(input) !== 'undefined';\n  }\n\n  /**\n   *\n   */\n  public static isFrequencyValueEvery(input: any): boolean\n  {\n    return this.isObject( input ) && this.isNumber( input.every );\n  }\n\n  /**\n   *\n   */\n  public static isFrequencyValueOneOf(input: any): boolean\n  {\n    return this.isArray( input ) && input.length > 0;\n  }\n\n  /**\n   * Returns the first argument which is defined.\n   *\n   * @param a The first argument to look at.\n   * @param b The second argument to look at.\n   * @return The first defined argument.\n   * @see [[Functions.isDefined]]\n   */\n  public static coalesce(a: any, b: any, c?: any): any\n  {\n    return this.isDefined( a ) ? a : (this.isDefined( b ) ? b : c);\n  }\n\n  /**\n   *\n   */\n  public static pad(x: string, length: number, padding: string, before: boolean): string\n  {\n    while (x.length < length)\n    {\n      before ? x = padding + x : x = x + padding;\n    }\n\n    return x;\n  }\n\n  /**\n   *\n   */\n  public static padNumber(x: number, length: number, first: number = length)\n  {\n    return this.pad(x + '', length, '0', true).substring( 0, first );\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Functions.ts","\n\n/**\n * A class that stores commonly used values.\n */\nexport class Constants\n{\n\n  /**\n   * The number of milliseconds in a second.\n   */\n  public static MILLIS_IN_SECOND: number = 1000;\n\n  /**\n   * The number of milliseconds in a minute.\n   */\n  public static MILLIS_IN_MINUTE: number = Constants.MILLIS_IN_SECOND * 60;\n\n  /**\n   * The number of milliseconds in an hour.\n   */\n  public static MILLIS_IN_HOUR: number = Constants.MILLIS_IN_MINUTE * 60;\n\n  /**\n   * The number of milliseconds in a day (not including DST days).\n   */\n  public static MILLIS_IN_DAY: number = Constants.MILLIS_IN_HOUR * 24;\n\n  /**\n   * The number of milliseconds in a week (not including ones that include DST).\n   */\n  public static MILLIS_IN_WEEK: number = Constants.MILLIS_IN_DAY * 7;\n\n\n  /**\n   * The number of days in a week.\n   */\n  public static DAYS_IN_WEEK: number = 7;\n\n\n  /**\n   * The number of months in a year.\n   */\n  public static MONTHS_IN_YEAR: number = 12;\n\n  /**\n   * The number of hours in a day (not including DST days).\n   */\n  public static HOURS_IN_DAY: number = 24;\n\n\n  /**\n   * The first month of the year.\n   */\n  public static MONTH_MIN: number = 0;\n\n  /**\n   * The last month of the year.\n   */\n  public static MONTH_MAX: number = 11;\n\n  /**\n   * The first day of a month.\n   */\n  public static DAY_MIN: number = 1;\n\n  /**\n   * The last day of the longest month.\n   */\n  public static DAY_MAX: number = 31;\n\n  /**\n   * The first hour of the day.\n   */\n  public static HOUR_MIN: number = 0;\n\n  /**\n   * The last hour of the day.\n   */\n  public static HOUR_MAX: number = 23;\n\n  /**\n   * The first minute of the hour.\n   */\n  public static MINUTE_MIN: number = 0;\n\n  /**\n   * The last minute of the hour.\n   */\n  public static MINUTE_MAX: number = 59;\n\n  /**\n   * The first second of the minute.\n   */\n  public static SECOND_MIN: number = 0;\n\n  /**\n   * The last second of the minute.\n   */\n  public static SECOND_MAX: number = 59;\n\n  /**\n   * The first millisecond of the second.\n   */\n  public static MILLIS_MIN: number = 0;\n\n  /**\n   * The last millisecond of the second.\n   */\n  public static MILLIS_MAX: number = 999;\n\n  /**\n   * The first day of the week.\n   */\n  public static WEEKDAY_MIN: number = 0;\n\n  /**\n   * The last day of the week.\n   */\n  public static WEEKDAY_MAX: number = 6;\n\n\n  /**\n   * The default duration for an event.\n   */\n  public static DURATION_DEFAULT: number = 1;\n\n  /**\n   * The default duration unit for an all day event.\n   */\n  public static DURATION_DEFAULT_UNIT_ALL: string = 'days';\n\n  /**\n   * The default duration unit for an event at a given time.\n   */\n  public static DURATION_DEFAULT_UNIT_TIMES: string = 'hours';\n\n  /**\n   * Computes the duration unit given its for an all day event.\n   *\n   * @param all If the event is all day.\n   * @return The default unit for the event.\n   */\n  public static DURATION_DEFAULT_UNIT: (all: boolean) => string = all => all ? Constants.DURATION_DEFAULT_UNIT_ALL : Constants.DURATION_DEFAULT_UNIT_TIMES;\n\n\n  /**\n   * The number of milliseconds for various duration units. These are worse case\n   * scenario and do not include DST changes.\n   */\n  public static DURATION_TO_MILLIS = {\n    minute:   Constants.MILLIS_IN_MINUTE,\n    minutes:  Constants.MILLIS_IN_MINUTE,\n    hour:     Constants.MILLIS_IN_HOUR,\n    hours:    Constants.MILLIS_IN_HOUR,\n    day:      Constants.MILLIS_IN_DAY,\n    days:     Constants.MILLIS_IN_DAY,\n    week:     Constants.MILLIS_IN_WEEK,\n    weeks:    Constants.MILLIS_IN_WEEK,\n    month:    Constants.MILLIS_IN_DAY * Constants.DAY_MAX,\n    months:   Constants.MILLIS_IN_DAY * Constants.DAY_MAX\n  };\n\n  /**\n   * The maximum estimated number of events per day. This is used to calculate\n   * [[CalendarEvent.id]] to give each event a unique ID. If you think you will\n   * have more events than this per day, you can enlarge the value.\n   */\n  public static MAX_EVENTS_PER_DAY: number = 24;\n\n  /**\n   * The day of the week which determines the first week of the year or month.\n   * By default this day is Thursday.\n   */\n  public static WEEK_OF_MONTH_MINIMUM_WEEKDAY: number = 4;\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Constants.ts","\n\n/**\n * Units of time that are compromised of 1 or more days for the [[Calendar]] class.\n */\nexport enum Units\n{\n  DAY,\n  WEEK,\n  MONTH,\n  YEAR\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Units.ts","\nimport { Day } from './Day';\nimport { Suffix } from './Suffix';\nimport { Weekday } from './Weekday';\nimport { ScheduleInput } from './Schedule';\nimport { Functions as fn } from './Functions';\n\n\n/**\n * Describes a [[Pattern]] given a day to base it on.\n *\n * @param day The day to base the description on.\n * @returns The description of the pattern.\n */\nexport type DescribePattern = (day: Day) => string;\n\n/**\n * A rule helps parse [[ScheduleInput]] and determines whether it matches the\n * given pattern.\n *\n * - When a number is given, the input MUST be an array of the same length and contain any values.\n * - When an array of numbers is given, the input MUST be an array containing the same values.\n * - When a TRUE is given the input MUST contain that property and can be any value.\n * - When a FALSE is given the input MAY contain that property (optional).\n * - When a property is NOT specified, the input MUST NOT contain that property.\n * - When an object with every is given, the input must match the every and offset values (have the same frequency).\n */\nexport type PatternRule =\n  number |                          // has array with this number of elements\n  number[] |                        // is array with same values\n  boolean |                         // is true or false\n  {every: number, offset?: number}; // is object with matching every and offset\n\n/**\n * The set of rules you can specify for determining if a [[ScheduleInput]]\n * matches a pattern.\n */\nexport interface PatternRules {\n  dayOfWeek?: PatternRule;\n  dayOfMonth?: PatternRule;\n  lastDayOfMonth?: PatternRule;\n  dayOfYear?: PatternRule;\n  month?: PatternRule;\n  week?: PatternRule;\n  year?: PatternRule;\n  weekOfYear?: PatternRule;\n  weekspanOfYear?: PatternRule;\n  fullWeekOfYear?: PatternRule;\n  lastWeekspanOfYear?: PatternRule;\n  lastFullWeekOfYear?: PatternRule;\n  weekOfMonth?: PatternRule;\n  weekspanOfMonth?: PatternRule;\n  fullWeekOfMonth?: PatternRule;\n  lastWeekspanOfMonth?: PatternRule;\n  lastFullWeekOfMonth?: PatternRule;\n}\n\n\n/**\n * A class which helps describe [[ScheduleInput]] if it matches a pattern.\n */\nexport class Pattern\n{\n\n  /**\n   * The properties in the [[ScheduleInput]] which are compared against the\n   * rules of a pattern.\n   */\n  public static PROPS: string[] =\n  [\n    'dayOfWeek', 'dayOfMonth', 'lastDayOfMonth', 'dayOfYear',\n    'month', 'week', 'year',\n    'weekOfYear', 'weekspanOfYear', 'fullWeekOfYear', 'lastWeekspanOfYear', 'lastFullWeekOfYear',\n    'weekOfMonth', 'weekspanOfMonth', 'fullWeekOfMonth', 'lastWeekspanOfMonth', 'lastFullWeekOfMonth'\n  ];\n\n  /**\n   *\n   */\n  public listed: boolean;\n\n  /**\n   *\n   */\n  public describe: DescribePattern;\n\n  /**\n   *\n   */\n  public name: string;\n\n  /**\n   *\n   */\n  public rules: PatternRules;\n\n\n  /**\n   *\n   */\n  public constructor(name: string, listed: boolean, describe: DescribePattern, rules: PatternRules)\n  {\n    this.name = name;\n    this.listed = listed;\n    this.describe = describe;\n    this.rules = rules;\n  }\n\n  /**\n   *\n   */\n  public apply(input: ScheduleInput, day: Day): ScheduleInput\n  {\n    for (let prop of Pattern.PROPS)\n    {\n      let rule = this.rules[ prop ];\n\n      // Should have one value\n      if (rule === 1)\n      {\n        input[ prop ] = [day[ prop ]];\n      }\n\n      // Can be any of the values in the array\n      if (fn.isArray(rule))\n      {\n        input[ prop ] = rule;\n      }\n\n      // Must not be present\n      if (!fn.isDefined(rule))\n      {\n        delete input[ prop ];\n      }\n    }\n\n    return input;\n  }\n\n  /**\n   *\n   */\n  public isMatch(input: ScheduleInput, exactlyWith?: Day): boolean\n  {\n    let exactly: boolean = fn.isDefined( exactlyWith );\n\n    for (let prop of Pattern.PROPS)\n    {\n      let rule = this.rules[ prop ];\n      let curr = input[ prop ];\n\n      // Optional, skip it\n      if (rule === false)\n      {\n        continue;\n      }\n\n      // Requires any value\n      if (rule === true && !curr)\n      {\n        return false;\n      }\n\n      // Must not be present\n      if (!fn.isDefined(rule) && curr)\n      {\n        return false;\n      }\n\n      // Must be an array of the same size\n      if (fn.isNumber(rule))\n      {\n        if (fn.isArray(curr) && curr.length === rule)\n        {\n          if (exactly && curr.indexOf( exactlyWith[ prop ] ) === -1)\n          {\n            return false;\n          }\n        }\n        else\n        {\n          return false;\n        }\n      }\n\n      // Must be an array of the same values\n      if (fn.isArray(rule))\n      {\n        if (!fn.isArray(curr))\n        {\n          return false;\n        }\n\n        if (rule.length !== curr.length)\n        {\n          return false;\n        }\n\n        for (var i = 0; i < rule.length; i++)\n        {\n          if (rule[ i ] !== curr[ i ])\n          {\n            return false;\n          }\n        }\n\n        if (exactly && rule.indexOf( exactlyWith[ prop ] ) === -1)\n        {\n          return false;\n        }\n      }\n\n      // Must be an object with same over & offset.\n      if (fn.isObject(rule))\n      {\n        if (!fn.isObject(curr))\n        {\n          return false;\n        }\n\n        var ruleOffset = rule.offset || 0;\n        var currOffset = curr.offset || 0;\n\n        if (currOffset !== ruleOffset || curr.every !== rule.every)\n        {\n          return false;\n        }\n\n        if (exactly && (exactlyWith[ prop ] % rule.every) !== ruleOffset)\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   */\n  public static withName(name: string): Pattern\n  {\n    return PatternMap[ name ];\n  }\n\n  /**\n   *\n   */\n  public static findMatch(input: ScheduleInput, listedOnly: boolean = true, exactlyWith?: Day): Pattern\n  {\n    for (let pattern of Patterns)\n    {\n      if ((pattern.listed || !listedOnly) && pattern.isMatch( input, exactlyWith ))\n      {\n        return pattern;\n      }\n    }\n\n    return null;\n  }\n\n\n}\n\n\n/**\n *\n */\nexport let Patterns: Pattern[] = [\n  new Pattern(\n    'none', true,\n    (day: Day) => 'Does not repeat',\n    {\n      year: 1,\n      month: 1,\n      dayOfMonth: 1\n    }\n  ),\n  new Pattern(\n    'daily', true,\n    (day: Day) => 'Daily',\n    {\n\n    }\n  ),\n  new Pattern(\n    'weekly', true,\n    (day: Day) =>  'Weekly on ' + day.format('dddd'),\n    {\n      dayOfWeek: 1\n    }\n  ),\n  new Pattern(\n    'monthlyWeek', true,\n    (day: Day) => 'Monthly on the ' + Suffix.CACHE[day.weekspanOfMonth + 1] + ' ' + day.format('dddd'),\n    {\n      dayOfWeek: 1,\n      weekspanOfMonth: 1\n    }\n  ),\n  new Pattern(\n    'annually', true,\n    (day: Day) => 'Annually on ' + day.format('MMMM Do'),\n    {\n      month: 1,\n      dayOfMonth: 1\n    }\n  ),\n  new Pattern(\n    'annuallyMonthWeek', true,\n    (day: Day) => 'Annually on the ' + Suffix.CACHE[day.weekspanOfMonth + 1] + ' ' + day.format('dddd') + ' of ' + day.format('MMMM'),\n    {\n      month: 1,\n      dayOfWeek: 1,\n      weekspanOfMonth: 1\n    }\n  ),\n  new Pattern(\n    'weekday', true,\n    (day: Day) => 'Every weekday (Monday to Friday)',\n    {\n      dayOfWeek: [Weekday.MONDAY, Weekday.TUESDAY, Weekday.WEDNESDAY, Weekday.THURSDAY, Weekday.FRIDAY]\n    }\n  ),\n  new Pattern(\n    'monthly', true,\n    (day: Day) => 'Monthly on the ' + day.format('Do') + ' day',\n    {\n      dayOfMonth: 1\n    }\n  ),\n  new Pattern(\n    'custom', true,\n    (day: Day) => 'Custom...',\n    {\n      dayOfWeek: false,\n      dayOfMonth: false,\n      lastDayOfMonth: false,\n      dayOfYear: false,\n      year: false,\n      month: false,\n      week: false,\n      weekOfYear: false,\n      weekspanOfYear: false,\n      fullWeekOfYear: false,\n      lastWeekspanOfYear: false,\n      lastFullWeekOfYear: false,\n      weekOfMonth: false,\n      weekspanOfMonth: false,\n      fullWeekOfMonth: false,\n      lastWeekspanOfMonth: false,\n      lastFullWeekOfMonth: false\n    }\n  )\n];\n\n/**\n *\n */\nexport let PatternMap: { [name: string]: Pattern } = {};\n\nfor (let pattern of Patterns)\n{\n  PatternMap[ pattern.name ] = pattern;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Pattern.ts","\nimport { Day } from './Day';\nimport { Op } from './Op';\nimport { Units } from './Units';\n\n\n/**\n * A class for a range of time between two [[Day]] timestamps.\n */\nexport class DaySpan\n{\n\n\n  /**\n   * The starting timestamp of the span (inclusive).\n   */\n  public start: Day;\n\n  /**\n   * The endind timestamp of the span (inclusive).\n   */\n  public end: Day;\n\n\n  /**\n   * Creates a new span of time.\n   *\n   * @param start The starting timestamp.\n   * @param end The ending timestamp.\n   */\n  public constructor(start: Day, end: Day)\n  {\n    this.start = start;\n    this.end = end;\n  }\n\n  /**\n   * Whether this span starts and ends on the same timestamp.\n   */\n  public get isPoint(): boolean\n  {\n    return this.start.time === this.end.time;\n  }\n\n  /**\n   * Determines whether the given timestamp lies between the start and end\n   * timestamp.\n   *\n   * @param day The timestamp to test.\n   * @returns True if the day is >= the start and <= the end of this span.\n   */\n  public contains(day: Day): boolean\n  {\n    return day.time >= this.start.time && day.time <= this.end.time;\n  }\n\n  /**\n   * Determines whether the given timestamp is between the start and end\n   * timestamp or lies on the same day as the start or end timestamp.\n   *\n   * @param day The timestamp to test.\n   * @see [[Day.sameDay]]\n   */\n  public matchesDay(day: Day): boolean\n  {\n    return this.contains( day ) || day.sameDay( this.start ) || day.sameDay( this.end );\n  }\n\n  /**\n   * Determines whether the given timestamp is between the start and end\n   * timestamp or lies on the same week as the start or end timestamp.\n   *\n   * @param day The timestamp to test.\n   * @see [[Day.sameWeek]]\n   */\n  public matchesWeek(day: Day): boolean\n  {\n    return this.contains( day ) || day.sameWeek( this.start ) || day.sameWeek( this.end );\n  }\n\n  /**\n   * Determines whether the given timestamp is between the start and end\n   * timestamp or lies on the same month as the start or end timestamp.\n   *\n   * @param day The timestamp to test.\n   * @see [[Day.sameMonth]]\n   */\n  public matchesMonth(day: Day): boolean\n  {\n    return this.contains( day ) || day.sameMonth( this.start ) || day.sameMonth( this.end );\n  }\n\n  /**\n   * Determines whether the given timestamp is between the start and end\n   * timestamp or lies on the same year as the start or end timestamp.\n   *\n   * @param day The timestamp to test.\n   * @see [[Day.sameYear]]\n   */\n  public matchesYear(day: Day): boolean\n  {\n    return this.contains( day ) || day.sameYear( this.start ) || day.sameYear( this.end );\n  }\n\n\n  /**\n   * Calculates the number of milliseconds between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.millisBetween]]\n   */\n  public millis(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.millisBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of seconds between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.secondsBetween]]\n   */\n  public seconds(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.secondsBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of minutes between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.minutesBetween]]\n   */\n  public minutes(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.minutesBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of hours between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.hoursBetween]]\n   */\n  public hours(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.hoursBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of days between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.daysBetween]]\n   */\n  public days(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.daysBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of weeks between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.weeksBetween]]\n   */\n  public weeks(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.weeksBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of months between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.monthsBetween]]\n   */\n  public months(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.monthsBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of years between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.yearsBetween]]\n   */\n  public years(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.yearsBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Summarizes this span given an approximate unit of time and a few other\n   * options. If the start and end are on the same unit, a single value will\n   * be returned. Otherwise a start and end will be returned with a `delimiter`.\n   *\n   * @param type The unit of time this span is for.\n   * @param dayOfWeek When `true` the weekday of the start and end are included.\n   * @param short When `true` the short form of weekdays and months will be used.\n   * @param repeat When `true` the year will be repeated on the start and end\n   *  timestamp even if they are the same year.\n   * @param contextual When `true` the year will be hidden if it's the current\n   *  year.\n   * @param delimiter The string to separate the start and end timestamps with.\n   * @returns The summary of this span.\n   */\n  public summary(type: Units, dayOfWeek: boolean = true, short: boolean = false, repeat: boolean = false, contextual: boolean = true, delimiter: string = ' - '): string\n  {\n    let formats = DaySpan.SUMMARY_FORMATS[ type ];\n    let today: Day = Day.today();\n    let showStartYear: boolean = !contextual || !this.start.sameYear( today );\n    let showEndYear: boolean = !contextual || !this.end.sameYear( today );\n    let start: string = this.start.format( formats(short, dayOfWeek, showStartYear) );\n    let end: string = this.end.format( formats(short, dayOfWeek, showEndYear) );\n    let summary: string = start;\n\n    if (start !== end)\n    {\n      if (!repeat)\n      {\n        summary = this.start.format( formats(short, dayOfWeek, !this.start.sameYear(this.end)) );\n      }\n\n      summary += delimiter;\n      summary += end;\n    }\n    else\n    {\n      summary = start;\n    }\n\n    return summary;\n  }\n\n  /**\n   * Determines whether the gven span intersects with this span.\n   *\n   * @param span The span to test.\n   * @returns `true` if the spans intersect, otherwise `false`.\n   */\n  public intersects(span: DaySpan): boolean\n  {\n    return !(\n      this.end.time < span.start.time ||\n      this.start.time > span.end.time\n    );\n  }\n\n  /**\n   * Calculates the intersection between this span and the given span. If there\n   * is no intersection between the two spans then `null` is returned.\n   *\n   * @param span The span to calculate the intersection with.\n   * @returns The intersection or `null` if none exists.\n   */\n  public intersection(span: DaySpan): DaySpan\n  {\n    let start: Day = this.start.max( span.start );\n    let end: Day = this.end.min( span.end );\n\n    return start.isAfter( end ) ? null : new DaySpan(start, end);\n  }\n\n  /**\n   * Calculates the union between this span and the given span.\n   *\n   * @param span The span to calculate the union with.\n   * @returns The union of the two spans.\n   */\n  public union(span: DaySpan): DaySpan\n  {\n    let start: Day = this.start.min( span.start );\n    let end: Day = this.end.max( span.end );\n\n    return new DaySpan(start, end);\n  }\n\n  /**\n   * Returns a point [[DaySpan]] with the same start and end timestamp.\n   *\n   * @param day The timestamp which will be the start and end.\n   * @returns The new instance.\n   * @see [[DaySpan.isPoint]]\n   */\n  public static point(day: Day): DaySpan\n  {\n    return new DaySpan( day, day );\n  }\n\n\n  /**\n   * Formatting functions which assist the [[DaySpan.summary]] function.\n   */\n  public static SUMMARY_FORMATS =\n  {\n    [Units.DAY]: (short: boolean, dayOfWeek: boolean, year: boolean) => {\n      return (dayOfWeek ? (short ? 'ddd, ' : 'dddd, ') : '') + (short ? 'MMM ' : 'MMMM ') + 'Do' + (year ? ' YYYY' : '');\n    },\n    [Units.WEEK]: (short: boolean, dayOfWeek: boolean, year: boolean) => {\n      return (dayOfWeek ? (short ? 'ddd, ' : 'dddd, ') : '') + (short ? 'MMM ' : 'MMMM ') + 'Do' + (year ? ' YYYY' : '');\n    },\n    [Units.MONTH]: (short: boolean, dayOfWeek: boolean, year: boolean) => {\n      return (short ? 'MMM' : 'MMMM') + (year ? ' YYYY' : '');\n    },\n    [Units.YEAR]: (short: boolean, dayOfWeek: boolean, year: boolean) => {\n      return (year ? 'YYYY' : '');\n    }\n  };\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/DaySpan.ts","\n/**\n * A class which takes a number and determines the suffix for that number.\n *\n * ```typescript\n * Suffix.CACHE[ 2 ];         // 2nd\n * Suffix.determine( 3 );     // rd\n * Suffix.get( 4 );           // th\n * Suffix.get( 4, true );     // 4th\n * ```\n */\nexport class Suffix\n{\n\n  /**\n   * The array of suffixes used.\n   */\n  public static MAP: string[] = [\n    'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'\n  ];\n\n  /**\n   * An internal cache of [[Suffix._CACHE_SIZE]] suffixes.\n   */\n  private static _CACHE: string[];\n\n  /**\n   *\n   */\n  private static _CACHE_SIZE: number = 366;\n\n\n  /**\n   *\n   */\n  public static get CACHE(): string[]\n  {\n    if (!this._CACHE)\n    {\n      this._CACHE = [];\n\n      for (let i = 0; i < this._CACHE_SIZE; i++)\n      {\n        this._CACHE[ i ] = this.get( i, true );\n      }\n    }\n\n    return this._CACHE;\n  }\n\n  /**\n   *\n   */\n  public static determine(value: number): string\n  {\n    return value >= 11 && value <= 13 ? 'th' : this.MAP[ value % this.MAP.length ];\n  }\n\n  /**\n   *\n   */\n  public static get(value: number, append: boolean = false): string\n  {\n    let suffix: string = this.determine(value);\n    return append ? value + suffix : suffix;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Suffix.ts","\nimport { Functions as fn } from './Functions';\nimport { FrequencyValue, FrequencyCheck, FrequencyValueEvery, FrequencyValueOneOf } from './Frequency';\nimport { Day, DayInput, DayIterator, DurationInput } from './Day';\nimport { DaySpan } from './DaySpan';\nimport { Constants } from './Constants';\nimport { Parse } from './Parse';\nimport { Time, TimeInput } from './Time';\nimport { Suffix } from './Suffix';\n// @ts-ignore\nimport * as moment from 'moment';\n\n\n\n/**\n *\n */\nexport interface ScheduleInput\n{\n  /**\n   *\n   */\n  start?: DayInput;\n\n  /**\n   *\n   */\n  end?: DayInput;\n\n  /**\n   *\n   */\n  on?: DayInput;\n\n  /**\n   *\n   */\n  times?: TimeInput[];\n\n  /**\n   *\n   */\n  duration?: number;\n\n  /**\n   *\n   */\n  durationUnit?: DurationInput;\n\n  /**\n   *\n   */\n  exclude?: DayInput[];\n\n  /**\n   *\n   */\n  month?: FrequencyValue;\n\n  /**\n   *\n   */\n  year?: FrequencyValue;\n\n  /**\n   *\n   */\n  week?: FrequencyValue;\n\n  /**\n   *\n   */\n  dayOfWeek?: FrequencyValue;\n\n  /**\n   *\n   */\n  dayOfMonth?: FrequencyValue;\n\n  /**\n   *\n   */\n  lastDayOfMonth?: FrequencyValue;\n\n  /**\n   *\n   */\n  dayOfYear?: FrequencyValue;\n\n  /**\n   *\n   */\n  weekOfYear?: FrequencyValue;\n\n  /**\n   *\n   */\n  weekspanOfYear?: FrequencyValue;\n\n  /**\n   *\n   */\n  fullWeekOfYear?: FrequencyValue;\n\n  /**\n   *\n   */\n  lastWeekspanOfYear?: FrequencyValue;\n\n  /**\n   *\n   */\n  lastFullWeekOfYear?: FrequencyValue;\n\n  /**\n   *\n   */\n  weekOfMonth?: FrequencyValue;\n\n  /**\n   *\n   */\n  weekspanOfMonth?: FrequencyValue;\n\n  /**\n   *\n   */\n  fullWeekOfMonth?: FrequencyValue;\n\n  /**\n   *\n   */\n  lastWeekspanOfMonth?: FrequencyValue;\n\n  /**\n   *\n   */\n  lastFullWeekOfMonth?: FrequencyValue;\n}\n\n\n/**\n *\n */\nexport type ScheduleExclusions = { [dayIdentifier: number]: boolean };\n\n\n/**\n *\n */\nexport class Schedule\n{\n\n  /**\n   *\n   */\n  public start: Day;\n\n  /**\n   *\n   */\n  public end: Day;\n\n  /**\n   *\n   */\n  public duration: number;\n\n  /**\n   *\n   */\n  public durationUnit: DurationInput;\n\n  /**\n   *\n   */\n  public times: Time[];\n\n  /**\n   *\n   */\n  public durationInDays: number;\n\n  /**\n   *\n   */\n  public exclude: ScheduleExclusions;\n\n  /**\n   *\n   */\n  public dayOfWeek: FrequencyCheck;\n\n  /**\n   *\n   */\n  public dayOfMonth: FrequencyCheck;\n\n  /**\n   *\n   */\n  public lastDayOfMonth: FrequencyCheck;\n\n  /**\n   *\n   */\n  public dayOfYear: FrequencyCheck;\n\n  /**\n   *\n   */\n  public month: FrequencyCheck;\n\n  /**\n   *\n   */\n  public week: FrequencyCheck;\n\n  /**\n   *\n   */\n  public weekOfYear: FrequencyCheck;\n\n  /**\n   *\n   */\n  public weekspanOfYear: FrequencyCheck;\n\n  /**\n   *\n   */\n  public fullWeekOfYear: FrequencyCheck;\n\n  /**\n   *\n   */\n  public lastWeekspanOfYear: FrequencyCheck;\n\n  /**\n   *\n   */\n  public lastFullWeekOfYear: FrequencyCheck;\n\n  /**\n   *\n   */\n  public weekOfMonth: FrequencyCheck;\n\n  /**\n   *\n   */\n  public weekspanOfMonth: FrequencyCheck;\n\n  /**\n   *\n   */\n  public fullWeekOfMonth: FrequencyCheck;\n\n  /**\n   *\n   */\n  public lastWeekspanOfMonth: FrequencyCheck;\n\n  /**\n   *\n   */\n  public lastFullWeekOfMonth: FrequencyCheck;\n\n  /**\n   *\n   */\n  public year: FrequencyCheck;\n\n  /**\n   *\n   */\n  public checks: FrequencyCheck[];\n\n\n  /**\n   *\n   */\n  public constructor(input?: ScheduleInput)\n  {\n    if (fn.isDefined(input))\n    {\n      this.set(input);\n    }\n  }\n\n  /**\n   *\n   */\n  public set(input: ScheduleInput): this\n  {\n    Parse.schedule(input, this);\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public get lastTime(): Time\n  {\n    return this.times[ this.times.length - 1 ];\n  }\n\n  /**\n   *\n   */\n  public updateDurationInDays(): this\n  {\n    let start: number = this.lastTime ? this.lastTime.toMilliseconds() : 0;\n    let duration: number = this.duration * (Constants.DURATION_TO_MILLIS[ this.durationUnit ] || 0);\n    let exclude: number = Constants.MILLIS_IN_DAY;\n    let day: number = Constants.MILLIS_IN_DAY;\n\n    this.durationInDays = Math.max(0, Math.ceil((start + duration - exclude) / day));\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public updateChecks(): this\n  {\n    this.checks = Parse.givenFrequency([\n      this.year,\n      this.month,\n      this.week,\n      this.weekOfYear,\n      this.fullWeekOfYear,\n      this.weekspanOfYear,\n      this.lastFullWeekOfYear,\n      this.lastWeekspanOfYear,\n      this.weekOfMonth,\n      this.weekspanOfMonth,\n      this.fullWeekOfMonth,\n      this.lastWeekspanOfMonth,\n      this.lastFullWeekOfMonth,\n      this.dayOfWeek,\n      this.dayOfMonth,\n      this.lastDayOfMonth,\n      this.dayOfYear\n    ]);\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public matchesSpan(day: Day): boolean\n  {\n    return (this.start === null || day.isSameOrAfter(this.start)) &&\n      (this.end === null || day.isBefore(this.end));\n  }\n\n  /**\n   *\n   */\n  public matchesRange(start: Day, end: Day): boolean\n  {\n    return (this.start === null || start.isSameOrBefore(this.start)) &&\n      (this.end === null || end.isBefore(this.end));\n  }\n\n  /**\n   *\n   */\n  public isExcluded(day: Day): boolean\n  {\n    return !!this.exclude[ day.dayIdentifier ];\n  }\n\n  /**\n   *\n   */\n  public isIncluded(day: Day): boolean\n  {\n    return !this.exclude[ day.dayIdentifier ];\n  }\n\n  /**\n   *\n   */\n  public matchesDay(day: Day): boolean\n  {\n    if (!this.isIncluded( day ) || !this.matchesSpan( day ))\n    {\n      return false;\n    }\n\n    for (let check of this.checks)\n    {\n      if (!check( day[ check.property ] ))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Determines if the given day is covered by this schedule. A schedule can\n   * specify events that span multiple days - so even though the day does not\n   * match the starting day of a span - it can be a day that is within the\n   * schedule.\n   *\n   * @param day The day to test.\n   * @param\n   */\n  public coversDay(day: Day): boolean\n  {\n    return !!this.findStartingDay( day );\n  }\n\n  /**\n   *\n   */\n  public nextDay(day: Day, includeDay: boolean = false, lookAhead: number = 366): Day\n  {\n    let next: Day = null;\n    let setNext: DayIterator = d => {\n      next = d;\n      return false;\n    };\n\n    this.iterateDays(day, 1, true, setNext, includeDay, lookAhead);\n\n    return next;\n  }\n\n  /**\n   *\n   */\n  public nextDays(day: Day, max: number, includeDay: boolean = false, lookAhead: number = 366): Day[]\n  {\n    let nexts: Day[] = [];\n\n    this.iterateDays(day, max, true, d => nexts.push(d), includeDay, lookAhead);\n\n    return nexts;\n  }\n\n  /**\n   *\n   */\n  public prevDay(day: Day, includeDay: boolean = false, lookBack: number = 366): Day\n  {\n    let prev: Day = null;\n    let setPrev: DayIterator = d => {\n      prev = d;\n      return false;\n    };\n\n    this.iterateDays(day, 1, false, setPrev, includeDay, lookBack);\n\n    return prev;\n  }\n\n  /**\n   *\n   */\n  public prevDays(day: Day, max: number, includeDay: boolean = false, lookBack: number = 366): Day[]\n  {\n    let prevs: Day[] = [];\n\n    this.iterateDays(day, max, false, d => prevs.push(d), includeDay, lookBack);\n\n    return prevs;\n  }\n\n  /**\n   *\n   */\n  public iterateDays(day: Day, max: number, next: boolean, onDay: DayIterator, includeDay: boolean = false, lookup: number = 366): this\n  {\n    let iterated: number = 0;\n\n    for (let days = 0; days < lookup; days++)\n    {\n      if (!includeDay || days > 0)\n      {\n        day = next ? day.next() : day.prev();\n      }\n\n      if (this.matchesDay(day))\n      {\n        if (onDay( day ) === false)\n        {\n          break;\n        }\n\n        if (++iterated >= max)\n        {\n          break;\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public matchesTime(day: Day): boolean\n  {\n    if (!this.matchesDay( day ))\n    {\n      return false;\n    }\n\n    for (let time of this.times)\n    {\n      if (day.sameTime(time))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   *\n   */\n  public isFullDay(): boolean\n  {\n    return this.times.length === 0;\n  }\n\n  /**\n   *\n   */\n  public getFullSpan(day: Day): DaySpan\n  {\n    let start: Day = day.start();\n    let end: Day = start.add( this.duration, this.durationUnit );\n\n    return new DaySpan( start, end );\n  }\n\n  /**\n   *\n   */\n  public getTimeSpan(day: Day, time: Time): DaySpan\n  {\n    let start: Day = day.withTime( time );\n    let end: Day = start.add( this.duration, this.durationUnit );\n\n    return new DaySpan( start, end );\n  }\n\n  /**\n   *\n   */\n  public getSpansOver(day: Day): DaySpan[]\n  {\n    let spans: DaySpan[] = [];\n    let start: Day = this.findStartingDay( day );\n\n    if (!start)\n    {\n      return spans;\n    }\n\n    if (this.isFullDay())\n    {\n      spans.push(this.getFullSpan(start));\n    }\n    else\n    {\n      for (let time of this.times)\n      {\n        let span: DaySpan = this.getTimeSpan( start, time );\n\n        if (span.matchesDay(start))\n        {\n          spans.push( span );\n        }\n      }\n    }\n\n    return spans;\n  }\n\n  /**\n   *\n   */\n  public getSpanOver(day: Day): DaySpan\n  {\n    let start: Day = this.findStartingDay( day );\n\n    return start ? this.getFullSpan( start ) : null;\n  }\n\n  /**\n   *\n   */\n  public getSpansOn(day: Day, check: boolean = false): DaySpan[]\n  {\n    let spans: DaySpan[] = [];\n\n    if (check && !this.matchesDay(day))\n    {\n      return spans;\n    }\n\n    if (this.isFullDay())\n    {\n      spans.push(this.getFullSpan( day ));\n    }\n    else\n    {\n      for (let time of this.times)\n      {\n        let span: DaySpan = this.getTimeSpan( day, time );\n\n        spans.push(span);\n      }\n    }\n\n    return spans;\n  }\n\n  /**\n   *\n   */\n  public findStartingDay(day: Day): Day\n  {\n    let behind: number = this.durationInDays;\n\n    while (behind >= 0)\n    {\n      if (this.matchesDay(day))\n      {\n        return day;\n      }\n\n      day = day.prev();\n      behind--;\n    }\n\n    return null;\n  }\n\n  /**\n   *\n   */\n  public getExclusions(returnDays: boolean = true)\n  {\n    let exclusions: DayInput[] = [];\n\n    for (let dayIdentifierKey in this.exclude)\n    {\n      let dayIdentifier: number = parseInt(dayIdentifierKey);\n\n      exclusions.push( returnDays ? Day.fromDayIdentifier(dayIdentifier)  : dayIdentifier );\n    }\n\n    return exclusions;\n  }\n\n  /**\n   *\n   */\n  public toInput(returnDays: boolean = false, returnTimes: boolean = false, timeFormat: string = '', alwaysDuration: boolean = false): ScheduleInput\n  {\n    let defaultUnit: string = Constants.DURATION_DEFAULT_UNIT( this.isFullDay() );\n    let out: ScheduleInput = {};\n    let exclusions: DayInput[] = this.getExclusions( returnDays );\n    let times: TimeInput[]  = [];\n\n    for (let time of this.times)\n    {\n      times.push( returnTimes ? time : (timeFormat ? time.format( timeFormat ) : time.toString()) );\n    }\n\n    if (this.start) out.start = returnDays ? this.start : this.start.time;\n    if (this.end) out.end = returnDays ? this.end : this.end.time;\n    if (times.length) out.times = times;\n    if (alwaysDuration || this.duration !== Constants.DURATION_DEFAULT) out.duration = this.duration;\n    if (alwaysDuration || this.durationUnit !== defaultUnit) out.durationUnit = this.durationUnit;\n    if (exclusions.length) out.exclude = exclusions;\n    if (this.dayOfWeek.input) out.dayOfWeek = this.dayOfWeek.input;\n    if (this.dayOfMonth.input) out.dayOfMonth = this.dayOfMonth.input;\n    if (this.lastDayOfMonth.input) out.lastDayOfMonth = this.lastDayOfMonth.input;\n    if (this.dayOfYear.input) out.dayOfYear = this.dayOfYear.input;\n    if (this.year.input) out.year = this.year.input;\n    if (this.month.input) out.month = this.month.input;\n    if (this.week.input) out.week = this.week.input;\n    if (this.weekOfYear.input) out.weekOfYear = this.weekOfYear.input;\n    if (this.weekspanOfYear.input) out.weekspanOfYear = this.weekspanOfYear.input;\n    if (this.fullWeekOfYear.input) out.fullWeekOfYear = this.fullWeekOfYear.input;\n    if (this.lastWeekspanOfYear.input) out.lastWeekspanOfYear = this.lastWeekspanOfYear.input;\n    if (this.lastFullWeekOfYear.input) out.lastFullWeekOfYear = this.lastFullWeekOfYear.input;\n    if (this.weekOfMonth.input) out.weekOfMonth = this.weekOfMonth.input;\n    if (this.weekspanOfMonth.input) out.weekspanOfMonth = this.weekspanOfMonth.input;\n    if (this.fullWeekOfMonth.input) out.fullWeekOfMonth = this.fullWeekOfMonth.input;\n    if (this.lastWeekspanOfMonth.input) out.lastWeekspanOfMonth = this.lastWeekspanOfMonth.input;\n    if (this.lastFullWeekOfMonth.input) out.lastFullWeekOfMonth = this.lastFullWeekOfMonth.input;\n\n    return out;\n  }\n\n  /**\n   *\n   */\n  public describe(thing: string = 'event',\n    includeRange: boolean = true,\n    includeTimes: boolean = true,\n    includeDuration: boolean = false,\n    includeExcludes: boolean = false): string\n  {\n    let out: string = '';\n\n    if (includeRange)\n    {\n      if (this.start)\n      {\n        out += 'Starting on ' + this.start.format('dddd Do, YYYY');\n\n        if (this.end)\n        {\n          out += ' and ending on ' + this.end.format('dddd Do, YYYY');\n        }\n      }\n      else if (this.end)\n      {\n        out += 'Up until ' + this.end.format('dddd Do, YYYY');\n      }\n    }\n\n    if (out)\n    {\n      out += ' the ' + thing + ' will occur';\n    }\n    else\n    {\n      out += 'The ' + thing + ' will occur';\n    }\n\n    out += this.describeRule( this.dayOfWeek.input, 'day of the week', x => moment.weekdays()[x], 1, false);\n    out += this.describeRule( this.lastDayOfMonth.input, 'last day of the month', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.dayOfMonth.input, 'day of the month', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.dayOfYear.input, 'day of the year', x => Suffix.CACHE[x], 1 );\n    out += this.describeRule( this.year.input, 'year', x => x, 0, false, ' in ' );\n    out += this.describeRule( this.month.input, 'month', x => moment.months()[x], 0, false, ' in ' );\n    out += this.describeRule( this.weekOfYear.input, 'week of the year', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.weekspanOfYear.input, 'weekspan of the year', x => Suffix.CACHE[x + 1], 1 );\n    out += this.describeRule( this.fullWeekOfYear.input, 'full week of the year', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.lastWeekspanOfYear.input, 'last weekspan of the year', x => Suffix.CACHE[x + 1], 1 );\n    out += this.describeRule( this.lastFullWeekOfYear.input, 'last full week of the year', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.weekOfMonth.input, 'week of the month', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.fullWeekOfMonth.input, 'full week of the month', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.weekspanOfMonth.input, 'weekspan of the month', x => Suffix.CACHE[x + 1], 1 );\n    out += this.describeRule( this.lastFullWeekOfMonth.input, 'last full week of the month', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.lastWeekspanOfMonth.input, 'last weekspan of the month', x => Suffix.CACHE[x + 1], 1 );\n\n    if (includeTimes && this.times.length)\n    {\n      out += ' at ';\n      out += this.describeArray( this.times, x => x.format('hh:mm a') );\n    }\n\n    if (includeDuration && this.duration !== Constants.DURATION_DEFAULT)\n    {\n      out += ' lasting ' + this.duration + ' ';\n\n      if (this.durationUnit)\n      {\n        out += this.durationUnit + ' ';\n      }\n    }\n\n    if (includeExcludes)\n    {\n      let excludes: Day[] = <Day[]>this.getExclusions( true );\n\n      if (excludes.length)\n      {\n        out += ' excluding ';\n        out += this.describeArray( excludes, x => x.format('MM/DD/YYYY') );\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   *\n   */\n  private describeRule(value: FrequencyValue, unit: string, map: (x: number) => any, everyOffset: number = 0, the: boolean = true, on: string = ' on ', required: boolean = false): string\n  {\n    let out: string = '';\n    let suffix: string = the ? ' ' + unit : '';\n\n    if (fn.isFrequencyValueEvery(value))\n    {\n      let valueEvery: FrequencyValueEvery = <FrequencyValueEvery>value;\n\n      out += ' every ' + Suffix.CACHE[ valueEvery.every ] + ' ' + unit;\n\n      if (valueEvery.offset)\n      {\n        out += ' starting at ' + map( valueEvery.offset + everyOffset ) + suffix;\n      }\n    }\n    else if (fn.isFrequencyValueOneOf(value))\n    {\n      let valueOne: FrequencyValueOneOf = <FrequencyValueOneOf>value;\n\n      if (valueOne.length)\n      {\n        out += on + (the ? 'the ' : '');\n        out += this.describeArray( valueOne, map );\n        out += suffix;\n      }\n    }\n    else if (required)\n    {\n      out +=  on + 'any ' + unit;\n    }\n\n    return out;\n  }\n\n  /**\n   *\n   */\n  private describeArray<T>(array: T[], map: (item: T) => string): string\n  {\n    let out: string = '';\n    let last: number = array.length - 1;\n\n    out += map( array[ 0 ] );\n\n    for (let i = 1; i < last; i++)\n    {\n      out += ', ' + map( array[ i ] );\n    }\n\n    if (last > 0)\n    {\n      out += ' and ' + map( array[ last ] );\n    }\n\n    return out;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Schedule.ts","\nimport { Functions as fn } from './Functions';\nimport { Constants } from './Constants';\nimport { Parse } from './Parse';\n\n\n/**\n * A value that can possibly be parsed into a Time instance.\n *\n * @see [[Time.parse]]\n */\nexport type TimeInput = Time | number | string | {hour: number, minute?: number, second?: number, millisecond?: number};\n\n/**\n * A class which holds a specific time during in any day.\n */\nexport class Time\n{\n\n  /**\n   * The regular expression used to parse a time from a string.\n   *\n   * - ## = hour\n   * - ##:## = hour & minute\n   * - ##:##:## = hour, minute, & second\n   * - ##:##:##.### = hour, minute, second, and milliseconds\n   */\n  public static REGEX = /^(\\d\\d?):?(\\d\\d)?:?(\\d\\d)?\\.?(\\d\\d\\d)?$/;\n\n  /**\n   * The hour between 0 and 23\n   */\n  public hour: number;\n\n  /**\n   * The minute between 0 and 59\n   */\n  public minute: number;\n\n  /**\n   * The second between 0 and 59\n   */\n  public second: number;\n\n  /**\n   * The millisecond between 0 and 999\n   */\n  public millisecond: number;\n\n\n  /**\n   * Creates a new Time instance given an hour and optionally a minute, second,\n   * and millisecond. If they have not been specified they default to 0.\n   *\n   * @param hour The hour.\n   * @param minute The minute.\n   * @param second The second.\n   * @param millisecond The millisecond.\n   */\n  public constructor(hour: number, minute: number = Constants.MINUTE_MIN, second: number = Constants.SECOND_MIN, millisecond: number = Constants.MILLIS_MIN)\n  {\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond;\n  }\n\n  /**\n   * Formats this time into a string. The following list describes the available\n   * formatting patterns:\n   *\n   * ### Hour\n   * - H: 0-23\n   * - HH: 00-23\n   * - h: 12,1-12,1-11\n   * - hh: 12,01-12,01-11\n   * - k: 1-24\n   * - kk: 01-24\n   * - a: am,pm\n   * - A: AM,PM\n   * ### Minute\n   * - m: 0-59\n   * - mm: 00-59\n   * ### Second\n   * - s: 0-59\n   * - ss: 00-59\n   * ### Millisecond\n   * - S: 0-9\n   * - SS: 00-99\n   * - SSS: 000-999\n   *\n   * @param format The format to output.\n   * @returns The formatted time.\n   */\n  public format(format: string): string\n  {\n    let formatterEntries = Time.FORMATTERS;\n    let out: string = '';\n\n    for (let i = 0; i < format.length; i++)\n    {\n      let handled: boolean = false;\n\n      for (let k = 0; k < formatterEntries.length && !handled; k++)\n      {\n        let entry = formatterEntries[ k ];\n        let part: string = format.substring( i, i + entry.size );\n\n        if (part.length === entry.size)\n        {\n          let formatter = entry.formats[ part ];\n\n          if (formatter)\n          {\n            out += formatter(this);\n            i += entry.size - 1;\n            handled = true;\n          }\n        }\n      }\n\n      if (!handled)\n      {\n        out += format.charAt(i);\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * @returns The number of milliseconds from the start of the day until this\n   *  time.\n   */\n  public toMilliseconds(): number\n  {\n    return this.hour * Constants.MILLIS_IN_HOUR +\n      this.minute * Constants.MILLIS_IN_MINUTE +\n      this.second * Constants.MILLIS_IN_SECOND +\n      this.millisecond;\n  }\n\n  /**\n   * @returns The time formatted using the smallest format that completely\n   *  represents this time.\n   */\n  public toString(): string\n  {\n    if (this.millisecond) return this.format('HH:mm:ss.SSS');\n    if (this.second) return this.format('HH:mm:ss');\n    if (this.minute) return this.format('HH:mm');\n\n    return this.format('HH');\n  }\n\n  /**\n   * @returns A unique identifier for this time. The number returned is in the\n   *  following format: SSSssmmHH\n   */\n  public toIdentifer(): number\n  {\n    return this.hour +\n      this.minute * 100 +\n      this.second * 10000 +\n      this.millisecond * 10000000;\n  }\n\n  /**\n   * @returns An object with hour, minute, second, a millisecond properties if\n   *  they are non-zero on this time.\n   */\n  public toObject(): TimeInput\n  {\n    let out: TimeInput = {\n      hour: this.hour\n    };\n\n    if (this.minute) out.minute = this.minute;\n    if (this.second) out.second = this.second;\n    if (this.millisecond) out.millisecond = this.millisecond;\n\n    return out;\n  }\n\n  /**\n   * Parses a value and tries to convert it to a Time instance.\n   *\n   * @param input The input to parse.\n   * @returns The instance parsed or `null` if it was invalid.\n   * @see [[Parse.time]]\n   */\n  public static parse(input: any): Time\n  {\n    return Parse.time(input);\n  }\n\n  /**\n   * Parses a string and converts it to a Time instance. If the string is not\n   * in a valid format `null` is returned.\n   *\n   * @param time The string to parse.\n   * @returns The instance parsed or `null` if it was invalid.\n   * @see [[Time.REGEX]]\n   */\n  public static fromString(time: string): Time\n  {\n    let matches: string[] = this.REGEX.exec( time );\n\n    if (!matches)\n    {\n      return null;\n    }\n\n    let h: number = parseInt(matches[1]) || 0;\n    let m: number = parseInt(matches[2]) || 0;\n    let s: number = parseInt(matches[3]) || 0;\n    let l: number = parseInt(matches[4]) || 0;\n\n    return this.build(h, m, s, l);\n  }\n\n  /**\n   * Parses a number and converts it to a Time instance. The number is assumed\n   * to be in the [[Time.toIdentifier]] format.\n   *\n   * @param time The number to parse.\n   * @returns The instance parsed.\n   */\n  public static fromIdentifier(time: number): Time\n  {\n    let h: number = time % 100;\n    let m: number = Math.floor(time / 100) % 100;\n    let s: number = Math.floor(time / 10000) % 100;\n    let l: number = Math.floor(time / 10000000) % 1000;\n\n    return this.build(h, m, s, l);\n  }\n\n  /**\n   * Returns a new instance given an hour and optionally a minute, second,\n   * and millisecond. If they have not been specified they default to 0.\n   *\n   * @param hour The hour.\n   * @param minute The minute.\n   * @param second The second.\n   * @param millisecond The millisecond.\n   * @returns A new instance.\n   */\n  public static build(hour: number, minute: number = Constants.MINUTE_MIN, second: number = Constants.SECOND_MIN, millisecond: number = Constants.MILLIS_MIN): Time\n  {\n    return new Time(hour, minute, second, millisecond)\n  }\n\n  /**\n   * A set of formatting functions keyed by their format string.\n   */\n  public static FORMATTERS = [\n    {\n      size: 3,\n      formats: {\n        SSS: (t: Time) => fn.padNumber(t.millisecond, 3)\n      }\n    },\n    {\n      size: 2,\n      formats: {\n        HH: (t: Time) => fn.padNumber(t.hour, 2),\n        hh: (t: Time) => fn.padNumber((t.hour % 12) || 12, 2),\n        kk: (t: Time) => fn.padNumber(t.hour + 1, 2),\n        mm: (t: Time) => fn.padNumber(t.minute, 2),\n        ss: (t: Time) => fn.padNumber(t.second, 2),\n        SS: (t: Time) => fn.padNumber(t.millisecond, 3, 2)\n      }\n    },\n    {\n      size: 1,\n      formats: {\n        A: (t: Time) => t.hour < 12 ? 'AM' : 'PM',\n        a: (t: Time) => t.hour < 12 ? 'am' : 'pm',\n        H: (t: Time) => t.hour + '',\n        h: (t: Time) => ((t.hour % 12) || 12) + '',\n        k: (t: Time) => (t.hour + 1) + '',\n        m: (t: Time) => t.minute + '',\n        s: (t: Time) => t.second + '',\n        S: (t: Time) => fn.padNumber(t.millisecond, 3, 1)\n      }\n    }\n  ];\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Time.ts","\nimport { Functions as fn } from './Functions';\nimport { FrequencyCheck } from './Frequency';\nimport { Schedule, ScheduleInput, ScheduleExclusions } from './Schedule';\nimport { Constants } from './Constants';\nimport { Day, DayInput, DurationInput } from './Day';\nimport { CalendarScheduleInput, CalendarSchedule } from './Calendar';\nimport { Time } from './Time';\n\n\n/**\n * The class which takes user input and parses it to specific structures.\n */\nexport class Parse\n{\n\n  /**\n   * Parses a value and converts it to a [[FrequencyCheck]].\n   *\n   * @param input The input to parse into a function.\n   * @returns A function which determines whether a value matches a frequency.\n   * @see [[Schedule]]\n   */\n  public static frequency(input: any, property: string): FrequencyCheck\n  {\n    let check: FrequencyCheck = (value: number) => {\n      return true;\n    };\n\n    check.given = false;\n\n    if (fn.isFrequencyValueEvery(input))\n    {\n      let offset: number = input.offset || 0;\n      let every: number = input.every;\n\n      check = (value: number) => {\n        return value % every === offset;\n      };\n      check.given = true;\n    }\n\n    if (fn.isFrequencyValueOneOf(input))\n    {\n      let map: object = {};\n\n      for (let i = 0; i < input.length; i++) {\n        map[ input[ i ] ] = true;\n      }\n\n      check = (value: number) => {\n        return !!map[ value ];\n      };\n      check.given = true;\n    }\n\n    check.input = input;\n    check.property = property;\n\n    return check;\n  }\n\n  /**\n   * Parses [[DayInput]] into a [[Day]] instance.\n   *\n   * ```typescript\n   * Parse.day( 65342300 );               // unix timestamp\n   * Parse.day( '01/02/2014' );           // strings in many formats\n   * Parse.day( day );                    // return a passed instance\n   * Parse.day( [2018, 0, 2] );           // array: 01/02/2018\n   * Parse.day( {year: 2018, month: 2} ); // object: 03/01/2018\n   * Parse.day( true );                   // today\n   * ```\n   *\n   * @param input The input to parse.\n   * @returns The Day parsed or `null` if the value is not valid.\n   */\n  public static day(input: DayInput): Day\n  {\n    if (fn.isNumber(input))\n    {\n      return Day.unix( <number>input );\n    }\n    else if (fn.isString(input))\n    {\n      return Day.fromString( <string>input );\n    }\n    else if (input instanceof Day)\n    {\n      return input;\n    }\n    else if (fn.isArray( input ))\n    {\n      return Day.fromArray( <number[]>input );\n    }\n    else if (fn.isObject( input ))\n    {\n      return Day.fromObject( <object>input );\n    }\n    else if (input === true)\n    {\n      return Day.today();\n    }\n\n    return null;\n  }\n\n  /**\n   * Parses a value and tries to convert it to a Time instance.\n   *\n   * ```typescript\n   * Parse.time( time );      // return a passed instance\n   * Parse.time( 9 );         // 09:00:00.000\n   * Parse.time( 3009 );      // 09:30:00.000\n   * Parse.time( 593009 );    // 09:30:59.000\n   * Parsetime( '09' );       // 09:00:00.000\n   * Parse.time( '9:30' );    // 09:30:00.000\n   * Parse.time( '9:30:59' ); // 09:30:59.000\n   * Parse.time( {hour: 2} ); // 02:00:00.000\n   * ```\n   *\n   * @param input The input to parse.\n   * @returns The instance parsed or `null` if it was invalid.\n   * @see [[Time.fromIdentifier]]\n   * @see [[Time.fromString]]\n   */\n  public static time(input: any): Time\n  {\n    if (input instanceof Time)\n    {\n      return input;\n    }\n    if (fn.isNumber(input))\n    {\n      return Time.fromIdentifier( <number>input );\n    }\n    if (fn.isString(input))\n    {\n      return Time.fromString( <string>input );\n    }\n    if (fn.isObject(input) && fn.isNumber(input.hour))\n    {\n      return new Time(input.hour, input.minute, input.second, input.millisecond);\n    }\n\n    return null;\n  }\n\n  /**\n   * Parses a value and tries to convert it to an array of Time instances.\n   * If any of the given values are not a valid time value then the resulting\n   * array will not contain a time instance.\n   *\n   * @param input The input to parse.\n   * @returns A non-null array of time instances.\n   * @see [[Parse.time]]\n   */\n  public static times(input: any): Time[]\n  {\n    let times: Time[] = [];\n\n    if (fn.isArray(input))\n    {\n      for (let timeInput of input)\n      {\n        let time = this.time( timeInput );\n\n        if (time)\n        {\n          times.push( time );\n        }\n      }\n    }\n\n    return times;\n  }\n\n  /**\n   * Parses an array of excluded days into a map of excluded days where the\n   * array value and returned object key are [[Day.dayIdentifier]].\n   *\n   * ```typescript\n   * Parse.exclusions( [ 01012018, 05062014 ] ); // {'01012018': true, '05062014': true}\n   * ```\n   *\n   * @param input The input to parse.\n   * @returns The object with identifier keys and `true` values.\n   * @see [[Day.dayIdentifier]]\n   */\n  public static exclusions(input: any): ScheduleExclusions\n  {\n    let exclusions: ScheduleExclusions = {};\n\n    if (fn.isArray(input))\n    {\n      for (let dayIdentifier of input)\n      {\n        if (fn.isNumber(dayIdentifier))\n        {\n          exclusions[ dayIdentifier ] = true;\n        }\n        else\n        {\n          let day: Day = this.day( dayIdentifier );\n\n          if (day)\n          {\n            exclusions[ day.dayIdentifier ] = true;\n          }\n        }\n      }\n    }\n\n    return exclusions;\n  }\n\n  /**\n   * Parses an object which specifies a schedule where events may or may not\n   * repeat and they may be all day events or at specific times.\n   *\n   * @param input The input to parse into a schedule.\n   * @param out The schedule to set the values of and return.\n   * @returns An instance of the parsed [[Schedule]].\n   */\n  public static schedule(input: ScheduleInput, out: Schedule = new Schedule()): Schedule\n  {\n    let on: Day = this.day( input.on );\n    let times: Time[] = this.times( input.times );\n    let fullDay: boolean = times.length === 0;\n\n    if (on)\n    {\n      input.start = on.start();\n      input.end = on.end();\n      input.year = [on.year];\n      input.month = [on.month];\n      input.dayOfMonth = [on.dayOfMonth];\n    }\n\n    out.times = times;\n    out.duration = fn.coalesce( input.duration, Constants.DURATION_DEFAULT );\n    out.durationUnit = <DurationInput>fn.coalesce( input.durationUnit, Constants.DURATION_DEFAULT_UNIT( fullDay ) );\n    out.start = this.day( input.start );\n    out.end = this.day( input.end );\n    out.exclude = this.exclusions( input.exclude );\n    out.year = this.frequency( input.year, 'year' );\n    out.month = this.frequency( input.month, 'month' );\n    out.week = this.frequency( input.week, 'week' );\n    out.weekOfYear = this.frequency( input.weekOfYear, 'weekOfYear' );\n    out.weekspanOfYear = this.frequency( input.weekspanOfYear, 'weekspanOfYear' );\n    out.fullWeekOfYear = this.frequency( input.fullWeekOfYear, 'fullWeekOfYear' );\n    out.lastWeekspanOfYear = this.frequency( input.lastWeekspanOfYear, 'lastWeekspanOfYear' );\n    out.lastFullWeekOfYear = this.frequency( input.lastFullWeekOfYear, 'lastFullWeekOfYear' );\n    out.weekOfMonth = this.frequency( input.weekOfMonth, 'weekOfMonth' );\n    out.weekspanOfMonth = this.frequency( input.weekspanOfMonth, 'weekspanOfMonth' );\n    out.fullWeekOfMonth = this.frequency( input.fullWeekOfMonth, 'fullWeekOfMonth' );\n    out.lastWeekspanOfMonth = this.frequency( input.lastWeekspanOfMonth, 'lastWeekspanOfMonth' );\n    out.lastFullWeekOfMonth = this.frequency( input.lastFullWeekOfMonth, 'lastFullWeekOfMonth' );\n    out.dayOfWeek = this.frequency( input.dayOfWeek, 'dayOfWeek' );\n    out.dayOfMonth = this.frequency( input.dayOfMonth, 'dayOfMonth' );\n    out.lastDayOfMonth = this.frequency( input.lastDayOfMonth, 'lastDayOfMonth' );\n    out.dayOfYear = this.frequency( input.dayOfYear, 'dayOfYear' );\n    out.updateDurationInDays();\n    out.updateChecks();\n\n    return out;\n  }\n\n  /**\n   * Parses an array of [[FrequencyCheck]] functions and returns an array of\n   * functions for only the checks that were specified by the user.\n   *\n   * @param checks The array of check functions to filter through.\n   * @returns The array of user specified checks.\n   */\n  public static givenFrequency(checks: FrequencyCheck[]): FrequencyCheck[]\n  {\n    let out: FrequencyCheck[] = [];\n\n    for (let check of checks)\n    {\n      if (check.given)\n      {\n        out.push( check );\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parses [[CalendarScheduleInput]] and returns a [[CalendarSchedule]].\n   *\n   * @param input The input to parse.\n   * @returns The parsed value.\n   */\n  public static calendarSchedule<T>(input: CalendarScheduleInput<T>): CalendarSchedule<T>\n  {\n    if (input.schedule instanceof Schedule)\n    {\n      return <CalendarSchedule<T>>input;\n    }\n\n    return {\n      schedule: this.schedule( input.schedule ),\n      event: input.event\n    };\n  }\n\n  /**\n   * Parses a schedule from a CRON pattern. TODO\n   */\n  public static cron(pattern: string, out: Schedule = new Schedule()): Schedule\n  {\n    return out;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Parse.ts","\nimport { Constants } from './Constants';\nimport { Op, operate } from './Op';\nimport { Parse } from './Parse';\nimport { Time } from './Time';\n// @ts-ignore\nimport * as moment from 'moment';\n\n\n/**\n *\n */\nexport type DurationInput = moment.unitOfTime.DurationConstructor;\n\n/**\n *\n */\nexport type DayInput = number | string | Day | number[] | object | true;\n\n/**\n *\n */\nexport type DayIterator = (day: Day) => any;\n\n/**\n *\n */\nexport class Day\n{\n\n  /**\n   *\n   */\n  public static readonly LOAD_TIME: Day = Day.now();\n\n  /**\n   *\n   */\n  public readonly date: moment.Moment;\n\n  /**\n   *\n   */\n  public readonly time: number;\n\n  /**\n   *\n   */\n  public readonly millis: number;\n\n  /**\n   *\n   */\n  public readonly seconds: number;\n\n  /**\n   *\n   */\n  public readonly minute: number;\n\n  /**\n   *\n   */\n  public readonly hour: number;\n\n  /**\n   *\n   */\n  public readonly month: number;\n\n  /**\n   *\n   */\n  public readonly year: number;\n\n  /**\n   *\n   */\n  public readonly quarter: number;\n\n\n  /**\n   *\n   */\n  public readonly dayOfWeek: number;\n\n  /**\n   *\n   */\n  public readonly dayOfMonth: number;\n\n  /**\n   *\n   */\n  public readonly lastDayOfMonth: number;\n\n  /**\n   *\n   */\n  public readonly dayOfYear: number;\n\n\n  /**\n   *\n   */\n  public readonly week: number;\n\n  /**\n   *\n   */\n  public readonly weekOfYear: number;\n\n  /**\n   *\n   */\n  public readonly weekspanOfYear: number;\n\n  /**\n   *\n   */\n  public readonly fullWeekOfYear: number;\n\n  /**\n   *\n   */\n  public readonly lastWeekspanOfYear: number;\n\n  /**\n   *\n   */\n  public readonly lastFullWeekOfYear: number;\n\n\n  /**\n   *\n   */\n  public readonly weekOfMonth: number;\n\n  /**\n   *\n   */\n  public readonly weekspanOfMonth: number;\n\n  /**\n   *\n   */\n  public readonly fullWeekOfMonth: number;\n\n  /**\n   *\n   */\n  public readonly lastWeekspanOfMonth: number;\n\n  /**\n   *\n   */\n  public readonly lastFullWeekOfMonth: number;\n\n\n  /**\n   *\n   */\n  public readonly dayIdentifier: number;\n\n  /**\n   *\n   */\n  public readonly weekIdentifier: number;\n\n  /**\n   *\n   */\n  public readonly monthIdentifier: number;\n\n  /**\n   *\n   */\n  public readonly quarterIdentifier: number;\n\n\n\n  /**\n   *\n   */\n  public constructor(date: moment.Moment)\n  {\n    this.date                 = date;\n    this.time                 = date.unix();\n    this.millis               = date.millisecond();\n    this.seconds              = date.second();\n    this.minute               = date.minute();\n    this.hour                 = date.hour();\n    this.month                = date.month();\n    this.year                 = date.year();\n    this.quarter              = date.quarter();\n    this.dayOfWeek            = date.day();\n    this.dayOfMonth           = date.date();\n    this.dayOfYear            = date.dayOfYear();\n    this.week                 = date.week();\n\n    this.lastDayOfMonth       = Day.getLastDayOfMonth( date );\n    this.weekOfYear           = Day.getWeekOfYear( date );\n    this.weekspanOfYear       = Day.getWeekspanOfYear( date );\n    this.fullWeekOfYear       = Day.getFullWeekOfYear( date );\n    this.lastWeekspanOfYear   = Day.getLastWeekspanOfYear( date );\n    this.lastFullWeekOfYear   = Day.getLastFullWeekOfYear( date );\n\n    this.weekOfMonth          = Day.getWeekOfMonth( date );\n    this.weekspanOfMonth      = Day.getWeekspanOfMonth( date );\n    this.fullWeekOfMonth      = Day.getFullWeekOfMonth( date );\n    this.lastWeekspanOfMonth  = Day.getLastWeekspanOfMonth( date );\n    this.lastFullWeekOfMonth  = Day.getLastFullWeekOfMonth( date );\n\n    this.dayIdentifier        = Day.getDayIdentifier( date );\n    this.weekIdentifier       = Day.getWeekIdentifier( date );\n    this.monthIdentifier      = Day.getMonthIdentifier( date );\n    this.quarterIdentifier    = Day.getQuarterIdentifier( date );\n  }\n\n  // Same\n\n  /**\n   *\n   */\n  public sameDay(day: Day): boolean\n  {\n    return this.dayIdentifier === day.dayIdentifier;\n  }\n\n  /**\n   *\n   */\n  public sameMonth(day: Day): boolean {\n    return this.monthIdentifier === day.monthIdentifier;\n  }\n\n  /**\n   *\n   */\n  public sameWeek(day: Day): boolean {\n    return this.weekIdentifier === day.weekIdentifier;\n  }\n\n  /**\n   *\n   */\n  public sameYear(day: Day): boolean {\n    return this.year === day.year;\n  }\n\n  /**\n   *\n   */\n  public sameQuarter(day: Day): boolean {\n    return this.quarterIdentifier === day.quarterIdentifier;\n  }\n\n  /**\n   *\n   */\n  public sameHour(day: Day): boolean {\n    return this.dayIdentifier === day.dayIdentifier && this.hour === day.hour;\n  }\n\n  /**\n   *\n   */\n  public sameMinute(day: Day): boolean {\n    return this.dayIdentifier === day.dayIdentifier && this.hour === day.hour && this.minute === day.minute;\n  }\n\n  /**\n   *\n   */\n  public sameTime(time: Time): boolean {\n    return this.hour === time.hour && this.minute === time.minute && this.seconds === time.second && this.millis === time.millisecond;\n  }\n\n  // Comparison\n\n  /**\n   *\n   */\n  public isBefore(day: Day, precision?: moment.unitOfTime.StartOf): boolean {\n    return this.date.isBefore( day.date, precision );\n  }\n\n  /**\n   *\n   */\n  public isSameOrBefore(day: Day, precision?: moment.unitOfTime.StartOf): boolean {\n    return this.date.isSameOrBefore( day.date, precision );\n  }\n\n  /**\n   *\n   */\n  public isAfter(day: Day, precision?: moment.unitOfTime.StartOf): boolean {\n    return this.date.isAfter( day.date, precision );\n  }\n\n  /**\n   *\n   */\n  public isSameOrAfter(day: Day, precision?: moment.unitOfTime.StartOf): boolean {\n    return this.date.isSameOrAfter( day.date, precision );\n  }\n\n  /**\n   *\n   */\n  public max(day: Day): Day {\n    return this.date.isAfter( day.date ) ? this : day;\n  }\n\n  /**\n   *\n   */\n  public min(day: Day): Day {\n    return this.date.isBefore( day.date ) ? this : day;\n  }\n\n  // Between\n\n  public millisBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'milliseconds', true ), op, absolute );\n  }\n\n  public secondsBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'seconds', true ), op, absolute );\n  }\n\n  public minutesBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'minutes', true ), op, absolute );\n  }\n\n  public hoursBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'hours', true ), op, absolute );\n  }\n\n  public daysBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'days', true ), op, absolute );\n  }\n\n  public weeksBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'weeks', true ), op, absolute );\n  }\n\n  public monthsBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'months', true ), op, absolute );\n  }\n\n  public yearsBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'years', true ), op, absolute );\n  }\n\n  public isBetween(start: Day, end: Day, inclusive: boolean = true): boolean {\n    return this.date.isBetween(start.date, end.date, null, inclusive ? '[]' : '[)');\n  }\n\n  public mutate(mutator: (date: moment.Moment) => void): Day {\n    var d = this.toMoment();\n    mutator( d );\n    return new Day( d );\n  }\n\n  public add(amount: number, unit: string): Day {\n    return this.mutate(d => d.add(amount, <DurationInput>unit));\n  }\n\n  public relative(millis: number): Day {\n    return this.mutate(d => d.add(millis, 'milliseconds'));\n  }\n\n  // Days\n\n  public relativeDays(days: number): Day {\n    return this.mutate(d => d.add(days, 'days'));\n  }\n\n  public prev(days: number = 1): Day {\n    return this.relativeDays( -days );\n  }\n\n  public next(days: number = 1): Day {\n    return this.relativeDays( days );\n  }\n\n  public withDayOfMonth(day: number): Day {\n    return this.mutate(d => d.date(day));\n  }\n\n  public withDayOfWeek(dayOfWeek: number): Day {\n    return this.mutate(d => d.day(dayOfWeek));\n  }\n\n  public withDayOfYear(dayOfYear: number): Day {\n    return this.mutate(d => d.dayOfYear(dayOfYear));\n  }\n\n  // Month\n\n  public withMonth(month: number): Day {\n    return this.mutate(d => d.month(month));\n  }\n\n  public relativeMonths(months: number): Day {\n    return this.mutate(d => d.add(months, 'months'));\n  }\n\n  public prevMonth(months: number = 1): Day {\n    return this.relativeMonths( -months );\n  }\n\n  public nextMonth(months: number = 1): Day {\n    return this.relativeMonths( months );\n  }\n\n  // Week Of Year\n\n  public withWeek(week: number, relativeWeek: number = this.week): Day {\n    return this.mutate(d => d.add((week - relativeWeek) * Constants.DAYS_IN_WEEK, 'days'));\n  }\n\n  public withWeekOfYear(week: number): Day {\n    return this.withWeek(week, this.weekOfYear);\n  }\n\n  public withFullWeekOfYear(week: number): Day {\n    return this.withWeek(week, this.fullWeekOfYear);\n  }\n\n  public withWeekspanOfYear(week: number): Day {\n    return this.withWeek(week, this.weekspanOfYear);\n  }\n\n  public withWeekOfMonth(week: number): Day {\n    return this.withWeek(week, this.weekOfMonth);\n  }\n\n  public withWeekspanOfMonth(week: number): Day {\n    return this.withWeek(week, this.weekspanOfMonth);\n  }\n\n  public withFullWeekOfMonth(week: number): Day {\n    return this.withWeek(week, this.fullWeekOfMonth);\n  }\n\n  public relativeWeeks(weeks: number): Day {\n    return this.mutate(d => d.add(weeks, 'weeks'));\n  }\n\n  public prevWeek(weeks: number = 1): Day {\n    return this.relativeWeeks( -weeks );\n  }\n\n  public nextWeek(weeks: number = 1): Day {\n    return this.relativeWeeks( weeks );\n  }\n\n  // Year\n\n  public withYear(year: number): Day {\n    return this.mutate(d => d.year(year));\n  }\n\n  public relativeYears(years: number): Day {\n    return this.mutate(d => d.add(years, 'year'));\n  }\n\n  public prevYear(years: number = 1): Day {\n    return this.relativeYears( -years );\n  }\n\n  public nextYear(years: number = 1): Day {\n    return this.relativeYears( years );\n  }\n\n  // Hour\n\n  public withHour(hour: number): Day {\n    return this.mutate(d => d.hour(hour));\n  }\n\n  public relativeHours(hours: number): Day {\n    return this.mutate(d => d.add(hours, 'hours'));\n  }\n\n  public prevHour(hours: number = 1): Day {\n    return this.relativeHours( -hours );\n  }\n\n  public nextHour(hours: number = 1): Day {\n    return this.relativeHours( hours );\n  }\n\n  // Time\n\n  public withTimes(\n      hour: number = Constants.HOUR_MIN,\n      minute: number = Constants.MINUTE_MIN,\n      second: number = Constants.SECOND_MIN,\n      millisecond: number = Constants.MILLIS_MIN): Day {\n    return this.mutate(d => d.set({hour, minute, second, millisecond}));\n  }\n\n  public withTime(time: Time): Day {\n    return this.withTimes(time.hour, time.minute, time.second, time.millisecond);\n  }\n\n  public asTime(): Time {\n    return new Time(this.hour, this.minute, this.seconds, this.millis);\n  }\n\n  // Start & End\n\n  // Time\n\n  public start(): Day {\n    return this.mutate(d => d.startOf('day'));\n  }\n\n  public isStart(): boolean {\n    return this.hour === Constants.HOUR_MIN &&\n      this.minute === Constants.MINUTE_MIN &&\n      this.seconds === Constants.SECOND_MIN &&\n      this.millis === Constants.MILLIS_MIN;\n  }\n\n  public end(inclusive: boolean = true): Day {\n    return inclusive ?\n      this.mutate(d => d.endOf('day')) :\n      this.mutate(d => d.startOf('day').add(1, 'day'));\n  }\n\n  public isEnd(): boolean {\n    return this.hour === Constants.HOUR_MAX &&\n      this.minute === Constants.MINUTE_MAX &&\n      this.seconds === Constants.SECOND_MAX &&\n      this.millis === Constants.MILLIS_MAX;\n  }\n\n  // Hour\n\n  public startOfHour(): Day {\n    return this.mutate(d => d.startOf('hour'));\n  }\n\n  public isStartOfHour(): boolean {\n    return this.minute === Constants.MINUTE_MIN &&\n      this.seconds === Constants.SECOND_MIN &&\n      this.millis === Constants.MILLIS_MIN;\n  }\n\n  public endOfHour(inclusive: boolean = true): Day {\n    return inclusive ?\n      this.mutate(d => d.endOf('hour')) :\n      this.mutate(d => d.startOf('hour').add(1, 'hour'));\n  }\n\n  public isEndOfHour(): boolean {\n    return this.minute === Constants.MINUTE_MAX &&\n      this.seconds === Constants.SECOND_MAX &&\n      this.millis === Constants.MILLIS_MAX;\n  }\n\n  // Week\n\n  public startOfWeek(): Day {\n    return this.mutate(d => d.startOf('week'));\n  }\n\n  public isStartOfWeek(): boolean {\n    return this.dayOfWeek === Constants.WEEKDAY_MIN;\n  }\n\n  public endOfWeek(inclusive: boolean = true): Day {\n    return inclusive ?\n      this.mutate(d => d.endOf('week')) :\n      this.mutate(d => d.startOf('week').add(1, 'week'));\n  }\n\n  public isEndOfWeek(): boolean {\n    return this.dayOfWeek === Constants.WEEKDAY_MAX;\n  }\n\n  // Month\n\n  public startOfMonth(): Day {\n    return this.mutate(d => d.startOf('month'));\n  }\n\n  public isStartOfMonth(): boolean {\n    return this.dayOfMonth === Constants.DAY_MIN;\n  }\n\n  public endOfMonth(inclusive: boolean = true): Day {\n    return inclusive ?\n      this.mutate(d => d.endOf('month')) :\n      this.mutate(d => d.startOf('month').add(1, 'month'));\n  }\n\n  public isEndOfMonth(): boolean {\n    return this.dayOfMonth === this.daysInMonth();\n  }\n\n  // Year\n\n  public startOfYear(): Day {\n    return this.mutate(d => d.startOf('year'));\n  }\n\n  public isStartOfYear(): boolean {\n    return this.month === Constants.MONTH_MIN && this.dayOfMonth === Constants.DAY_MIN;\n  }\n\n  public endOfYear(inclusive: boolean = true): Day {\n    return inclusive ?\n      this.mutate(d => d.endOf('year')) :\n      this.mutate(d => d.startOf('year').add(1, 'year'));\n  }\n\n  public isEndOfYear(): boolean {\n    return this.month === Constants.MONTH_MAX && this.dayOfMonth === Constants.DAY_MAX;\n  }\n\n  // Days In X\n\n  public daysInMonth(): number {\n    return this.date.daysInMonth();\n  }\n\n  public daysInYear(): number {\n    return this.endOfYear().dayOfYear;\n  }\n\n  public weeksInYear(): number {\n    return this.date.weeksInYear();\n  }\n\n  // Display\n\n  public format(format: string): string {\n    return this.date.format( format );\n  }\n\n  public utc(keepLocalTime?: boolean): Day {\n    return this.mutate(d => d.utc(keepLocalTime));\n  }\n\n  public toMoment(): moment.Moment {\n    return this.date.clone();\n  }\n\n  public toDate(): Date {\n    return this.date.toDate();\n  }\n\n  public toArray(): number[] {\n    return this.date.toArray();\n  }\n\n  public toJSON(): string {\n    return this.date.toJSON();\n  }\n\n  public toISOString(keepOffset: boolean = false): string {\n    return this.date.toISOString( keepOffset );\n  }\n\n  public toObject(): object {\n    return this.date.toObject();\n  }\n\n  public toString(): string {\n    return this.date.toString();\n  }\n\n  // State\n\n  public isDST(): boolean {\n    return this.date.isDST();\n  }\n\n  public isLeapYear(): boolean {\n    return this.date.isLeapYear();\n  }\n\n  // Instances\n\n  public static now(): Day {\n    return new Day(moment());\n  }\n\n  public static today(): Day {\n    return this.now().start();\n  }\n\n  public static tomorrow(): Day {\n    return this.today().next();\n  }\n\n  public static fromMoment(moment: moment.Moment): Day {\n    return moment && moment.isValid() ? new Day( moment ) : null;\n  }\n\n  public static unix(millis: number): Day {\n    return this.fromMoment(moment(millis));\n  }\n\n  public static parse(input: DayInput): Day {\n    return Parse.day(input);\n  }\n\n  public static fromString(input: string): Day {\n    return this.fromMoment(moment(input));\n  }\n\n  public static fromFormat(input: string, formats: string | string[]): Day {\n    return this.fromMoment(moment(input, formats));\n  }\n\n  public static fromObject(input: object): Day {\n    return this.fromMoment(moment(input));\n  }\n\n  public static fromDate(input: Date): Day {\n    return this.fromMoment(moment(input));\n  }\n\n  public static fromArray(input: number[]): Day {\n    return this.fromMoment(moment(input));\n  }\n\n  public static fromDayIdentifier(id: number): Day {\n    let date: number = id % 100;\n    let month: number = (Math.floor(id / 100) % 100) - 1;\n    let year: number = Math.floor(id / 10000);\n\n    return this.build(year, month, date);\n  }\n\n  public static build(year: number, month: number,\n    date: number = Constants.DAY_MIN,\n    hour: number = Constants.HOUR_MIN,\n    minute: number = Constants.MINUTE_MIN,\n    second: number = Constants.SECOND_MIN,\n    millisecond: number = Constants.MILLIS_MIN): Day\n  {\n    return new Day( moment({year, month, date, hour, minute, second, millisecond}) );\n  }\n\n\n\n\n\n\n\n\n  public static getWeekspanOfYear(date: moment.Moment): number\n  {\n    return Math.floor( (date.dayOfYear() - 1) / Constants.DAYS_IN_WEEK );\n  }\n\n  public static getLastWeekspanOfYear(date: moment.Moment): number\n  {\n    let lastOfYear = date.clone().endOf('year');\n    let daysInYear: number = lastOfYear.dayOfYear();\n\n    return Math.floor( (daysInYear - date.dayOfYear()) / Constants.DAYS_IN_WEEK );\n  }\n\n  public static getWeekOfYear(date: moment.Moment): number\n  {\n    let firstOfYear = date.clone().startOf('year');\n    let weeks: number = date.week();\n\n    return firstOfYear.day() > Constants.WEEK_OF_MONTH_MINIMUM_WEEKDAY ? weeks - 1 : weeks;\n  }\n\n  public static getFullWeekOfYear(date: moment.Moment): number\n  {\n    let firstOfYear = date.clone().startOf('year');\n    let weeks: number = date.week();\n\n    return firstOfYear.day() === Constants.WEEKDAY_MIN ? weeks : weeks - 1;\n  }\n\n  public static getLastFullWeekOfYear(date: moment.Moment): number\n  {\n    let firstOfYear = date.clone().startOf('year');\n    let weeks: number = date.week();\n    let weeksMax: number = date.weeksInYear();\n    let lastWeek: number = weeksMax - weeks;\n\n    return firstOfYear.day() === Constants.WEEKDAY_MIN ? lastWeek + 1 : lastWeek;\n  }\n\n  public static getWeekspanOfMonth(date: moment.Moment): number\n  {\n    return Math.floor((date.date() - 1) / Constants.DAYS_IN_WEEK);\n  }\n\n  public static getLastWeekspanOfMonth(date: moment.Moment): number\n  {\n    return Math.floor((date.daysInMonth() - date.date()) / Constants.DAYS_IN_WEEK);\n  }\n\n  public static getFullWeekOfMonth(date: moment.Moment): number\n  {\n    return Math.floor((date.date() - 1 - date.day() + Constants.DAYS_IN_WEEK) / Constants.DAYS_IN_WEEK);\n  }\n\n  public static getLastFullWeekOfMonth(date: moment.Moment): number\n  {\n    return Math.floor((date.daysInMonth() - date.date() - (Constants.WEEKDAY_MAX - date.day()) + Constants.DAYS_IN_WEEK) / Constants.DAYS_IN_WEEK);\n  }\n\n  public static getWeekOfMonth(date: moment.Moment): number\n  {\n    let dom = date.date();\n    let dow = date.day();\n    let sundayDate = dom - dow;\n\n    return Math.floor( ( sundayDate + Constants.WEEK_OF_MONTH_MINIMUM_WEEKDAY + 5 ) / Constants.DAYS_IN_WEEK );\n  }\n\n  public static getLastDayOfMonth(date: moment.Moment): number\n  {\n    return date.daysInMonth() - date.date() + 1;\n  }\n\n  public static getWeekIdentifier(date: moment.Moment): number\n  {\n    return date.week() + date.year() * 100;\n  }\n\n  public static getMonthIdentifier(date: moment.Moment): number\n  {\n    return (date.month() + 1) + date.year() * 100;\n  }\n\n  public static getDayIdentifier(date: moment.Moment): number\n  {\n    return date.date() + (date.month() + 1) * 100 + date.year() * 10000;\n  }\n\n  public static getQuarterIdentifier(date: moment.Moment): number\n  {\n    return date.quarter() + date.year() * 10;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Day.ts","\nimport { Op } from './Op';\nimport { Day } from './Day';\nimport { DaySpan } from './DaySpan';\nimport { CalendarEvent } from './CalendarEvent';\n\n\n/**\n * A day in a [[Calendar]] with extra information relative to any selection on\n * the calendar, the current date, or events on the day.\n */\nexport class CalendarDay<T> extends Day\n{\n\n  /**\n   * Whether this day is the current day (ex: today).\n   */\n  public currentDay: boolean = false;\n\n  /**\n   * Whether this day is on the same week as the current day (ex: today).\n   */\n  public currentWeek: boolean = false;\n\n  /**\n   * Whether this day is on the same month as the current day (ex: today).\n   */\n  public currentMonth: boolean = false;\n\n  /**\n   * Whether this day is on the same year as the current day (ex: today).\n   */\n  public currentYear: boolean = false;\n\n  /**\n   * How many days away this day is from the current day (ex: today). If this\n   * day is the current day the offset is 0. If this day is before the current\n   * day it will be the negative number of days away. Otherwise this will be\n   * positive meaning this day is after the current day by the given days.\n   */\n  public currentOffset: number = 0;\n\n  /**\n   * Whether this day is part of a selection on the calendar.\n   */\n  public selectedDay: boolean = false;\n\n  /**\n   * Whether this day is on the same week that the calendar selection is.\n   */\n  public selectedWeek: boolean = false;\n\n  /**\n   * Whether this day is on the same month that the calendar selection is.\n   */\n  public selectedMonth: boolean = false;\n\n  /**\n   * Whether this day is on the same year that the calendar selection is.\n   */\n  public selectedYear: boolean = false;\n\n  /**\n   * Whether this day is in the current calendar or not. Some days are outside\n   * the calendar span and used to fill in weeks. Month calendars will fill in\n   * days so the list of days in the calendar start on Sunday and end on Saturday.\n   */\n  public inCalendar: boolean = false;\n\n  /**\n   * The list of events on this day based on the settings and schedules in the\n   * calendar.\n   */\n  public events: CalendarEvent<T>[] = [];\n\n\n  /**\n   * Updates the current flags on this day given the current day (ex: today).\n   *\n   * @param current The current day of the calendar.\n   */\n  public updateCurrent(current: Day): this\n  {\n    this.currentDay = this.sameDay(current);\n    this.currentWeek = this.sameWeek(current);\n    this.currentMonth = this.sameMonth(current);\n    this.currentYear = this.sameYear(current);\n    this.currentOffset = this.daysBetween(current, Op.DOWN, false);\n\n    return this;\n  }\n\n  /**\n   * Updates the selection flags on this day given the selection range on the\n   * calendar.\n   *\n   * @param selected The span of days selected on the calendar.\n   */\n  public updateSelected(selected: DaySpan): this\n  {\n    this.selectedDay = selected.matchesDay(this);\n    this.selectedWeek = selected.matchesWeek(this);\n    this.selectedMonth = selected.matchesMonth(this);\n    this.selectedYear = selected.matchesYear(this);\n\n    return this;\n  }\n\n  /**\n   * Clears the selection flags on this day. This is done when the selection on\n   * the calendar is cleared.\n   */\n  public clearSelected(): this\n  {\n    this.selectedDay = this.selectedWeek = this.selectedMonth = this.selectedYear = false;\n\n    return this;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CalendarDay.ts","\nimport { Constants } from './Constants';\nimport { Day } from './Day';\nimport { DaySpan } from './DaySpan';\nimport { Schedule } from './Schedule';\n\n\n/**\n * An event on a given day and the schedule that generated the event.\n */\nexport class CalendarEvent<T>\n{\n\n  /**\n   * The relatively unique identifier of this event. It is generated based on\n   * the index of the schedule in the calendar and the time of day listed in the\n   * schedule. This number will no longer be unique if the schedule has more\n   * than [[Constants.MAX_EVENTS_PER_DAY]] occurrences in a single day\n   * (based on number of times in [[Schedule.times]]).\n   */\n  public id: number;\n\n  /**\n   * The event paired with the schedule. This can be any value which describes\n   * the event. A string for a simple title-only event, or an object with title,\n   * colors, icons, notification settings, etc.\n   */\n  public event: T;\n\n  /**\n   * The schedule which generated this event.\n   */\n  public schedule: Schedule;\n\n  /**\n   * The span of time this event occurs. If this is an all day event this span\n   * will start at the beginning of the day and end at the beginning of the\n   * next day.\n   *\n   * @see [[Schedule.isFullDay]]\n   */\n  public time: DaySpan;\n\n  /**\n   * Whether this event is an all day event.\n   *\n   * @see [[Schedule.isFullDay]]\n   */\n  public fullDay: boolean;\n\n  /**\n   * Whether this event is the first day of an occurrence. A calendar can\n   * generate multiple [[CalendarEvent]] instances over each day it covers if\n   * [[Calendar.repeatCovers]] is true. These instances have matching\n   * [[CalendarEvent.id]] values.\n   */\n  public starting: boolean;\n\n  /**\n   * Whether this event is the last day of an occurrence. A calendar can\n   * generate multiple [[CalendarEvent]] instances over each day it covers if\n   * [[Calendar.repeatCovers]] is true. These instances have matching\n   * [[CalendarEvent.id]] values.\n   */\n  public ending: boolean;\n\n  /**\n   * The row this event is on in a visual calendar. An event can span multiple\n   * days and it is desirable to have the occurrence on each day to line up.\n   * This is only set when [[Calendar.updateRows]] is true or manually set.\n   * This value makes sense for visual calendars for all day events or when the\n   * visual calendar is not positioning events based on their time span.\n   */\n  public row: number = 0;\n\n  /**\n   * The column this event is on in a visual calendar. An event can have its\n   * time overlap with another event displaying one of the events in another\n   * column. This is only set when [[Calendar.updateColumns]] is true or\n   * manually set. This value makes sense for visual calendars that are\n   * displaying event occurrences at specific times positioned accordingly.\n   */\n  public col: number = 0;\n\n\n  /**\n   * Creates a new event instance given the id, the event paired with the\n   * schedule, the schedule, the time span of the event, and the day on the\n   * calendar the event belongs to.\n   *\n   * @param id The relatively unique identifier of this event.\n   * @param event The event paired with the schedule.\n   * @param schedule The schedule that generated this event.\n   * @param time The time span of this event.\n   * @param actualDay The day on the calendar this event is for.\n   */\n  public constructor(id: number, event: T, schedule: Schedule, time: DaySpan, actualDay: Day) {\n    this.id = id;\n    this.event = event;\n    this.schedule = schedule;\n    this.time = time;\n    this.fullDay = schedule.isFullDay();\n    this.starting = time.isPoint || time.start.sameDay( actualDay );\n    this.ending = time.isPoint || time.end.relative(-1).sameDay( actualDay );\n  }\n\n\n  /**\n   * The id of the schedule uniqe within the calendar which generated this event.\n   */\n  public get scheduleId(): number\n  {\n    return Math.floor( this.id / Constants.MAX_EVENTS_PER_DAY );\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CalendarEvent.ts","\nimport { Functions as fn } from './Functions';\nimport { Day } from './Day';\nimport { DaySpan } from './DaySpan';\nimport { Schedule, ScheduleInput } from './Schedule';\nimport { Op } from './Op';\nimport { Units } from './Units';\nimport { Parse } from './Parse';\nimport { SortEvent } from './Sort';\nimport { Constants } from './Constants';\nimport { CalendarDay } from './CalendarDay';\nimport { CalendarEvent } from './CalendarEvent';\n\n\n/**\n *\n */\nexport interface CalendarSchedule<T>\n{\n  schedule: Schedule;\n  event: T;\n}\n\n/**\n *\n */\nexport type CalendarScheduleIdentifier<T> = CalendarSchedule<T> | Schedule | T;\n\n/**\n *\n */\nexport type CalendarScheduleInput<T> = CalendarSchedule<T> | { schedule: ScheduleInput, event: T };\n\n/**\n *\n */\nexport type CalendarMover = (day: Day, amount: number) => Day;\n\n/**\n *\n */\nexport interface CalendarInput<T>\n{\n  /**\n   * @see [[Calendar.fill]]\n   */\n  fill?: boolean;\n  /**\n   * @see [[Calendar.minimumSize]]\n   */\n  minimumSize?: number;\n  /**\n   * @see [[Calendar.repeatCovers]]\n   */\n  repeatCovers?: boolean;\n  /**\n   * @see [[Calendar.listTimes]]\n   */\n  listTimes?: boolean;\n  /**\n   * @see [[Calendar.eventsOutside]]\n   */\n  eventsOutside?: boolean;\n  /**\n   * @see [[Calendar.updateRows]]\n   */\n  updateRows?: boolean;\n  /**\n   * @see [[Calendar.updateColumns]]\n   */\n  updateColumns?: boolean;\n  /**\n   * @see [[Calendar.eventSorter]]\n   */\n  eventSorter?: SortEvent<T>;\n  /**\n   * @see [[Calendar.schedules]]\n   */\n  schedules?: CalendarSchedule<T>[];\n}\n\n/**\n *\n */\nexport class Calendar<T>\n{\n\n  /**\n   *\n   */\n  public span: DaySpan;\n\n  /**\n   *\n   */\n  public filled: DaySpan;\n\n  /**\n   *\n   */\n  public length: number;\n\n  /**\n   *\n   */\n  public type: Units;\n\n  /**\n   *\n   */\n  public size: number;\n\n  /**\n   *\n   */\n  public moveStart: CalendarMover;\n\n  /**\n   *\n   */\n  public moveEnd: CalendarMover;\n\n\n  /**\n   *\n   */\n  public fill: boolean = false;\n\n  /**\n   *\n   */\n  public minimumSize: number = 0;\n\n  /**\n   *\n   */\n  public repeatCovers: boolean = true;\n\n  /**\n   *\n   */\n  public listTimes: boolean = false;\n\n  /**\n   *\n   */\n  public eventsOutside: boolean = false;\n\n  /**\n   *\n   */\n  public updateRows: boolean = false;\n\n  /**\n   *\n   */\n  public updateColumns: boolean = false;\n\n  /**\n   *\n   */\n  public eventSorter: SortEvent<T> = null;\n\n\n  /**\n   *\n   */\n  public selection: DaySpan = null;\n\n  /**\n   *\n   */\n  public days: CalendarDay<T>[] = [];\n\n  /**\n   *\n   */\n  public schedules: CalendarSchedule<T>[] = [];\n\n\n  /**\n   *\n   */\n  public constructor(start: Day, end: Day, type: Units, size: number, moveStart: CalendarMover, moveEnd: CalendarMover, input?: CalendarInput<T>)\n  {\n    this.span = new DaySpan(start, end);\n    this.filled = new DaySpan(start, end);\n    this.type = type;\n    this.size = size;\n    this.moveStart = moveStart;\n    this.moveEnd = moveEnd;\n\n    if (fn.isDefined(input))\n    {\n      this.withInput(input, false);\n    }\n\n    this.refresh();\n  }\n\n  /**\n   *\n   */\n  public withInput(input: CalendarInput<T>, refresh: boolean = true): this\n  {\n    this.fill = fn.coalesce( input.fill, this.fill );\n    this.minimumSize = fn.coalesce( input.minimumSize, this.minimumSize );\n    this.repeatCovers = fn.coalesce( input.repeatCovers, this.repeatCovers );\n    this.listTimes = fn.coalesce( input.listTimes, this.listTimes );\n    this.eventsOutside = fn.coalesce( input.eventsOutside, this.eventsOutside );\n    this.updateRows = fn.coalesce( input.updateRows, this.updateRows );\n    this.updateColumns = fn.coalesce( input.updateColumns, this.updateColumns );\n    this.eventSorter = fn.coalesce( input.eventSorter, this.eventSorter );\n\n    if (fn.isArray(input.schedules))\n    {\n      this.removeSchedules();\n      this.addSchedules(input.schedules, false, true);\n    }\n\n    if (refresh)\n    {\n      this.refresh();\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public withMinimumSize(minimumSize: number): this\n  {\n    this.minimumSize = minimumSize;\n    this.refresh();\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public withRepeatCovers(repeatCovers: boolean): this\n  {\n    this.repeatCovers = repeatCovers;\n    this.refreshEvents();\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public withListTimes(listTimes: boolean): this\n  {\n    this.listTimes = listTimes;\n    this.refreshEvents();\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public withEventsOutside(eventsOutside: boolean): this\n  {\n    this.eventsOutside = eventsOutside;\n    this.refreshEvents();\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public withUpdateRows(updateRows: boolean, refresh: boolean = true): this\n  {\n    this.updateRows = updateRows;\n\n    if (refresh && updateRows)\n    {\n      this.refreshRows();\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public withUpdateColumns(updateColumns: boolean, refresh: boolean = true): this\n  {\n    this.updateColumns = updateColumns;\n\n    if (refresh && updateColumns)\n    {\n      this.refreshColumns();\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public get start(): Day\n  {\n    return this.span.start;\n  }\n\n  /**\n   *\n   */\n  public set start(day: Day)\n  {\n    this.span.start = day;\n  }\n\n  /**\n   *\n   */\n  public get end(): Day\n  {\n    return this.span.end;\n  }\n\n  /**\n   *\n   */\n  public set end(day: Day)\n  {\n    this.span.end = day;\n  }\n\n  /**\n   *\n   */\n  public summary(dayOfWeek: boolean = true, short: boolean = false, repeat: boolean = false, contextual: boolean = true, delimiter: string = ' - '): string\n  {\n    return this.span.summary( this.type, dayOfWeek, short, repeat, contextual, delimiter );\n  }\n\n  /**\n   *\n   */\n  public split(by: number = 1): Calendar<T>[]\n  {\n    let split: Calendar<T>[] = [];\n    let start: Day = this.start;\n    let end: Day = this.moveEnd( this.end, by - this.size );\n\n    for (let i = 0; i < this.size; i++)\n    {\n      split.push(new Calendar<T>(start, end, this.type, by, this.moveStart, this.moveEnd, this));\n      start = this.moveStart( start, by );\n      end = this.moveEnd( end, by );\n    }\n\n    return split;\n  }\n\n  /**\n   *\n   */\n  public refresh(today: Day = Day.today()): this\n  {\n    this.length = this.span.days(Op.UP, true);\n    this.resetDays();\n    this.refreshCurrent(today);\n    this.refreshSelection();\n    this.refreshEvents();\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public resetFilled(): this\n  {\n    this.filled.start = this.fill ? this.start.startOfWeek() : this.start;\n    this.filled.end = this.fill ? this.end.endOfWeek() : this.end;\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public resetDays(): this\n  {\n    this.resetFilled();\n\n    let days: CalendarDay<T>[] = this.days;\n    let filled: DaySpan = this.filled;\n    let current: Day = filled.start;\n    let daysBetween: number = filled.days(Op.UP);\n    let total: number = Math.max( this.minimumSize, daysBetween );\n\n    for (let i = 0; i < total; i++)\n    {\n      let day: CalendarDay<T> = days[ i ];\n\n      if (!day || !day.sameDay( current ))\n      {\n        day = new CalendarDay<T>( current.date );\n\n        if (i < days.length)\n        {\n          days.splice( i, 1, day );\n        }\n        else\n        {\n          days.push( day );\n        }\n      }\n\n      day.inCalendar = this.span.contains( day );\n\n      current = current.next();\n    }\n\n    if (days.length > total)\n    {\n      days.splice( total, days.length - total );\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public refreshCurrent(today: Day = Day.today()): this\n  {\n    return this.iterateDays(d =>\n    {\n      d.updateCurrent(today);\n    });\n  }\n\n  /**\n   *\n   */\n  public refreshSelection(): this\n  {\n    return this.iterateDays(d =>\n    {\n      if (this.selection)\n      {\n        d.updateSelected( this.selection );\n      }\n      else\n      {\n        d.clearSelected();\n      }\n    });\n  }\n\n  /**\n   *\n   */\n  public refreshEvents(): this\n  {\n    this.iterateDays(d =>\n    {\n      if (d.inCalendar || this.eventsOutside)\n      {\n        d.events = this.eventsForDay(d, this.listTimes, this.repeatCovers);\n\n        if (this.eventSorter)\n        {\n          d.events.sort( this.eventSorter );\n        }\n      }\n    });\n\n    if (this.updateRows)\n    {\n      this.refreshRows();\n    }\n\n    if (this.updateColumns)\n    {\n      this.refreshColumns();\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public refreshRows(): this\n  {\n    type EventToRowMap = { [id: number]: number };\n    type UsedMap = { [row: number]: boolean };\n\n    let eventToRow: EventToRowMap = {};\n    let onlyFullDay: boolean = this.listTimes;\n\n    this.iterateDays(d =>\n    {\n      if (d.dayOfWeek === 0)\n      {\n        eventToRow = {};\n      }\n\n      let used: UsedMap = {};\n\n      for (let event of d.events)\n      {\n        if (onlyFullDay && !event.fullDay)\n        {\n          continue;\n        }\n\n        if (event.id in eventToRow)\n        {\n          used[ event.row = eventToRow[ event.id ] ] = true;\n        }\n      }\n\n      let rowIndex: number = 0;\n\n      for (let event of d.events)\n      {\n        if ((onlyFullDay && !event.fullDay) || event.id in eventToRow)\n        {\n          continue;\n        }\n\n        while (used[ rowIndex ])\n        {\n          rowIndex++;\n        }\n\n        eventToRow[ event.id ] = event.row = rowIndex;\n\n        rowIndex++;\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public refreshColumns(): this\n  {\n    interface Marker {\n      time: number,\n      event: CalendarEvent<T>,\n      start: boolean,\n      parent: Marker;\n    }\n\n    this.iterateDays(d =>\n    {\n      let markers: Marker[] = [];\n\n      for (let event of d.events)\n      {\n        if (!event.fullDay)\n        {\n          markers.push({\n            time: event.time.start.time,\n            event: event,\n            start: true,\n            parent: null\n          });\n\n          markers.push({\n            time: event.time.end.time - 1,\n            event: event,\n            start: false,\n            parent: null\n          });\n        }\n      }\n\n      markers.sort((a, b) =>\n      {\n        return a.time - b.time;\n      });\n\n      let parent = null;\n\n      for (let marker of markers)\n      {\n        if (marker.start)\n        {\n          marker.parent = parent;\n          parent = marker;\n        }\n        else if (parent)\n        {\n          parent = parent.parent;\n        }\n      }\n\n      for (let marker of markers)\n      {\n        if (marker.start)\n        {\n          marker.event.col = marker.parent ? marker.parent.event.col + 1 : 0;\n        }\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public iterateDays(iterator: (day: CalendarDay<T>) => any): this\n  {\n    let days: CalendarDay<T>[] = this.days;\n\n    for (let i = 0; i < days.length; i++)\n    {\n      iterator( days[ i ] );\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public eventsForDay(day: Day, getTimes: boolean = true, covers: boolean = true): CalendarEvent<T>[]\n  {\n    let events: CalendarEvent<T>[] = [];\n    let entries: CalendarSchedule<T>[] = this.schedules;\n\n    for (let entryIndex = 0; entryIndex < entries.length; entryIndex++)\n    {\n      let entry: CalendarSchedule<T> = entries[ entryIndex ];\n      let schedule: Schedule = entry.schedule;\n      let event: T = entry.event;\n      let eventId: number = entryIndex * Constants.MAX_EVENTS_PER_DAY;\n\n      if ((covers && schedule.coversDay(day)) || (!covers && schedule.matchesDay(day)))\n      {\n        if (getTimes)\n        {\n          let times: DaySpan[] = covers ?\n            entry.schedule.getSpansOver(day) :\n            entry.schedule.getSpansOn(day);\n\n          for (let timeIndex = 0; timeIndex < times.length; timeIndex++)\n          {\n            events.push(new CalendarEvent<T>(eventId + timeIndex, event, schedule, times[ timeIndex ], day));\n          }\n        }\n        else\n        {\n          let over: DaySpan = schedule.getSpanOver(day);\n\n          if (over)\n          {\n            events.push(new CalendarEvent<T>(eventId, event, schedule, over, day));\n          }\n        }\n      }\n    }\n\n    return events\n  }\n\n  /**\n   *\n   */\n  public findSchedule(input: CalendarScheduleIdentifier<T>): CalendarSchedule<T>\n  {\n    for (let schedule of this.schedules)\n    {\n      if (schedule === input || schedule.schedule === input || schedule.event === input)\n      {\n        return schedule;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   *\n   */\n  public removeSchedules(schedules: CalendarScheduleIdentifier<T>[] = null, delayRefresh: boolean = false): this\n  {\n    if (schedules)\n    {\n      for (let schedule of schedules)\n      {\n        this.removeSchedule( schedule, true );\n      }\n    }\n    else\n    {\n      this.schedules = [];\n    }\n\n    if (!delayRefresh)\n    {\n      this.refreshEvents();\n    }\n    return this;\n  }\n\n  /**\n   *\n   */\n  public removeSchedule(schedule: CalendarScheduleIdentifier<T>, delayRefresh: boolean = false): this\n  {\n    let found = this.findSchedule(schedule);\n\n    if (found)\n    {\n      this.schedules.splice( this.schedules.indexOf(found), 1 );\n\n      if (!delayRefresh)\n      {\n        this.refreshEvents();\n      }\n    }\n    return this;\n  }\n\n  /**\n   *\n   */\n  public addSchedule(schedule: CalendarScheduleInput<T>, allowDuplicates: boolean = false, delayRefresh: boolean = false): this\n  {\n    let parsed = Parse.calendarSchedule(schedule);\n\n    if (!allowDuplicates)\n    {\n      let existing = this.findSchedule(parsed);\n\n      if (existing)\n      {\n        return this;\n      }\n    }\n\n    this.schedules.push(parsed);\n\n    if (!delayRefresh)\n    {\n      this.refreshEvents();\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public addSchedules(schedules: CalendarScheduleInput<T>[], allowDuplicates: boolean = false, delayRefresh: boolean = false): this\n  {\n    for (let schedule of schedules)\n    {\n      this.addSchedule(schedule, allowDuplicates, true);\n    }\n\n    if (!delayRefresh)\n    {\n      this.refreshEvents();\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public select(start: Day, end?: Day): this\n  {\n    this.selection = end ? new DaySpan( start, end ) : DaySpan.point( start );\n    this.refreshSelection();\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public unselect(): this\n  {\n    this.selection = null;\n    this.refreshSelection();\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public move(jump: number = this.size): this\n  {\n    this.start = this.moveStart( this.start, jump );\n    this.end = this.moveEnd( this.end, jump );\n    this.refresh();\n\n    return this;\n  }\n\n  /**\n   *\n   */\n  public next(jump: number = this.size): this\n  {\n    return this.move( jump );\n  }\n\n  /**\n   *\n   */\n  public prev(jump: number = this.size): this\n  {\n    return this.move( -jump );\n  }\n\n\n  /**\n   *\n   */\n  public static days<T>(days: number = 1, around: Day = Day.today(), focus: number = 0.4999, input?: CalendarInput<T>): Calendar<T>\n  {\n    let start: Day = around.start().relativeDays( -Math.floor( days * focus ) );\n    let end: Day = start.relativeDays( days - 1 ).end();\n    let mover: CalendarMover = (day, amount) => day.relativeDays(amount);\n\n    return new Calendar(start, end, Units.DAY, days, mover, mover, input);\n  }\n\n  /**\n   *\n   */\n  public static weeks<T>(weeks: number = 1, around: Day = Day.today(), focus: number = 0.4999, input?: CalendarInput<T>): Calendar<T>\n  {\n    let start: Day = around.start().startOfWeek().relativeWeeks( -Math.floor( weeks * focus ) );\n    let end: Day = start.relativeWeeks( weeks - 1 ).endOfWeek();\n    let mover: CalendarMover = (day, amount) => day.relativeWeeks(amount);\n\n    return new Calendar(start, end, Units.WEEK, weeks, mover, mover, input);\n  }\n\n  /**\n   *\n   */\n  public static months<T>(months: number = 1, around: Day = Day.today(), focus: number = 0.4999, input: CalendarInput<T> = {fill: true}): Calendar<T>\n  {\n    let start: Day = around.start().startOfMonth().relativeMonths( -Math.floor( months * focus ) );\n    let end: Day = start.relativeMonths( months - 1 ).endOfMonth();\n    let moveStart: CalendarMover = (day, amount) => day.relativeMonths(amount);\n    let moveEnd: CalendarMover = (day, amount) => day.startOfMonth().relativeMonths(amount).endOfMonth();\n\n    return new Calendar(start, end, Units.MONTH, months, moveStart, moveEnd, input);\n  }\n\n  /**\n   *\n   */\n  public static years<T>(years: number = 1, around: Day = Day.today(), focus: number = 0.4999, input: CalendarInput<T> = {fill: true}): Calendar<T>\n  {\n    let start: Day = around.start().startOfYear().relativeYears( -Math.floor( years * focus ) );\n    let end: Day = start.relativeYears( years - 1 ).endOfYear();\n    let mover: CalendarMover = (day, amount) => day.relativeYears(amount);\n\n    return new Calendar(start, end, Units.YEAR, years, mover, mover, input);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Calendar.ts","\n/**\n * The months in a year.\n */\nexport class Month\n{\n\n  public static JANUARY: number = 0;\n  public static FEBRUARY: number = 1;\n  public static MARCH: number = 2;\n  public static APRIL: number = 3;\n  public static MAY: number = 4;\n  public static JUNE: number = 5;\n  public static JULY: number = 6;\n  public static AUGUST: number = 7;\n  public static SEPTEMBER: number = 8;\n  public static OCTOBER: number = 9;\n  public static NOVEMBER: number = 10;\n  public static DECEMBER: number = 11;\n\n  /**\n   * The full list of months in a year.\n   */\n  public static LIST: number[] = [\n    Month.JANUARY,\n    Month.FEBRUARY,\n    Month.MARCH,\n    Month.APRIL,\n    Month.MAY,\n    Month.JUNE,\n    Month.JULY,\n    Month.AUGUST,\n    Month.SEPTEMBER,\n    Month.OCTOBER,\n    Month.NOVEMBER,\n    Month.DECEMBER\n  ];\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Month.ts","\n\n/**\n * The days in a week.\n */\nexport class Weekday\n{\n\n  public static SUNDAY: number = 0;\n  public static MONDAY: number = 1;\n  public static TUESDAY: number = 2;\n  public static WEDNESDAY: number = 3;\n  public static THURSDAY: number = 4;\n  public static FRIDAY: number = 5;\n  public static SATURDAY: number = 6;\n\n  /**\n   * The full list of days in a week.\n   */\n  public static LIST: number[] = [\n    Weekday.SUNDAY,\n    Weekday.MONDAY,\n    Weekday.TUESDAY,\n    Weekday.WEDNESDAY,\n    Weekday.THURSDAY,\n    Weekday.FRIDAY,\n    Weekday.SATURDAY\n  ];\n\n  /**\n   * The list of days starting with Monday and ending on Friday.\n   */\n  public static WEEK: number[] = [\n    Weekday.MONDAY,\n    Weekday.TUESDAY,\n    Weekday.WEDNESDAY,\n    Weekday.THURSDAY,\n    Weekday.FRIDAY\n  ];\n\n  /**\n   * The days on the weekend, starting with Saturday and ending with Sunday.\n   */\n  public static ENDS: number[] = [\n    Weekday.SATURDAY,\n    Weekday.SUNDAY\n  ];\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Weekday.ts","\nimport { CalendarEvent } from './CalendarEvent';\n\n\n\nexport type SortEvent<T> = (a: CalendarEvent<T>, b: CalendarEvent<T>) => number;\n\n// Sorts.List( Sorts.FullDay, Sorts.Desc( Sorts.Start ) );\nexport class Sorts\n{\n\n  public static Start<T>(a: CalendarEvent<T>, b: CalendarEvent<T>): number\n  {\n    return a.time.start.time - b.time.start.time;\n  }\n\n  public static End<T>(a: CalendarEvent<T>, b: CalendarEvent<T>): number\n  {\n    return a.time.end.time - b.time.end.time;\n  }\n\n  public static FullDay<T>(a: CalendarEvent<T>, b: CalendarEvent<T>): number\n  {\n    let af: number = a.fullDay ? 0 : 1;\n    let bf: number = b.fullDay ? 0 : 1;\n\n    return af - bf;\n  }\n\n  public static Duration<T>(a: CalendarEvent<T>, b: CalendarEvent<T>): number\n  {\n    return a.time.millis() - b.time.millis();\n  }\n\n  public static Desc<T>(sorter: SortEvent<T>): SortEvent<T>\n  {\n    return (a, b) =>\n    {\n      return sorter( b, a );\n    };\n  }\n\n  public static Alphabetical<T>(getString: (event: T) => string): SortEvent<T>\n  {\n    return (a, b) =>\n    {\n      let as: string = getString( a.event ) || '';\n      let bs: string = getString( b.event ) || '';\n\n      return as.localeCompare( bs );\n    };\n  }\n\n  public static Ordered<T>(getOrder: (event: T) => number): SortEvent<T>\n  {\n    return (a, b) =>\n    {\n      let ao: number = getOrder( a.event );\n      let bo: number = getOrder( b.event );\n\n      return ao - bo;\n    };\n  }\n\n  public static List<T>(list: SortEvent<T>[]): SortEvent<T>\n  {\n    return (a, b) =>\n    {\n      for (let sorter of list)\n      {\n        let compare: number = sorter(a, b);\n\n        if (compare !== 0)\n        {\n          return compare;\n        }\n      }\n\n      return 0;\n    };\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Sort.ts"],"sourceRoot":""}