{"version":3,"sources":["webpack://ds/webpack/universalModuleDefinition","webpack://ds/webpack/bootstrap","webpack://ds/external {\"commonjs\":\"moment\",\"commonjs2\":\"moment\",\"amd\":\"moment\",\"root\":\"moment\"}","webpack://ds/./src/Functions.ts","webpack://ds/./src/Operation.ts","webpack://ds/./src/Units.ts","webpack://ds/./src/Constants.ts","webpack://ds/./src/DaySpan.ts","webpack://ds/./src/Identifier.ts","webpack://ds/./src/Suffix.ts","webpack://ds/./src/Iterator.ts","webpack://ds/./src/Pattern.ts","webpack://ds/./src/ScheduleModifier.ts","webpack://ds/./src/Schedule.ts","webpack://ds/./src/Event.ts","webpack://ds/./src/Time.ts","webpack://ds/./src/Parse.ts","webpack://ds/./src/Day.ts","webpack://ds/./src/CalendarDay.ts","webpack://ds/./src/CalendarEvent.ts","webpack://ds/./src/Calendar.ts","webpack://ds/./src/Month.ts","webpack://ds/./src/Weekday.ts","webpack://ds/./src/Sort.ts","webpack://ds/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Op","Units","Functions","isArray","input","Array","isArrayEquals","x","y","length","isString","isNumber","isFinite","isObject","this","isDefined","isValue","isFrequencyValueEvery","every","isFrequencyValueOneOf","coalesce","a","b","extend","target","from","prop","pad","padding","before","padNumber","first","substring","operate","op","absolute","Math","abs","NONE","FLOOR","floor","CEIL","ceil","ROUND","round","TRUNCATE","DOWN","UP","Constants","MILLIS_IN_SECOND","MILLIS_IN_MINUTE","MILLIS_IN_HOUR","MILLIS_IN_DAY","MILLIS_IN_WEEK","MINUTES_IN_HOUR","MINUTES_IN_DAY","DAYS_IN_WEEK","MONTHS_IN_YEAR","HOURS_IN_DAY","MONTH_MIN","MONTH_MAX","DAY_MIN","DAY_MAX","HOUR_MIN","HOUR_MAX","MINUTE_MIN","MINUTE_MAX","SECOND_MIN","SECOND_MAX","MILLIS_MIN","MILLIS_MAX","WEEKDAY_MIN","WEEKDAY_MAX","DURATION_DEFAULT","DURATION_DEFAULT_UNIT_ALL","DURATION_DEFAULT_UNIT_TIMES","DURATION_DEFAULT_UNIT","all","DURATION_TO_MILLIS","minute","minutes","hour","hours","day","days","week","weeks","month","months","MAX_EVENTS_PER_DAY","WEEK_OF_MONTH_MINIMUM_WEEKDAY","DaySpan_DaySpan","DaySpan","start","end","time","contains","compareTo","matchesDay","sameDay","matchesWeek","sameWeek","matchesMonth","sameMonth","matchesYear","sameYear","millis","millisBetween","seconds","secondsBetween","minutesBetween","hoursBetween","daysBetween","weeksBetween","monthsBetween","years","yearsBetween","startDelta","relativeTo","endDelta","getBounds","dayHeight","dayWidth","columnOffset","clip","offsetX","offsetY","startRaw","endRaw","right","top","max","bottom","min","height","left","width","summary","type","dayOfWeek","short","repeat","contextual","delimiter","formats","SUMMARY_FORMATS","today","Day_Day","showStartYear","showEndYear","format","intersects","span","intersection","isAfter","union","point","DaySpan_a","DAY","year","WEEK","MONTH","YEAR","Identifier_Identifier","Identifier","is","id","getLength","compute","values","_i","arguments","scales","getScales","total","decompute","parseInt","curr","mod","push","find","Time","Day","Week","Month","Year","outer","inner","outerString","Quarter","Identifier_IdentifierTime","_super","IdentifierTime","__extends","SCALES","LENGTH","dayOfMonth","obj","build","endInclusive","endOfHour","describe","DESCRIBE_FORMAT_SHORT","DESCRIBE_FORMAT_LONG","matches","timeIdentifier","Identifier_IdentifierDay","IdentifierDay","dayIdentifier","Identifier_IdentifierWeek","IdentifierWeek","withWeek","endOfWeek","weekIdentifier","Identifier_IdentifierMonth","IdentifierMonth","endOfMonth","monthIdentifier","Identifier_IdentifierQuarter","IdentifierQuarter","quarter","relativeMonths","quarterIdentifier","Identifier_IdentifierYear","IdentifierYear","endOfYear","IteratorAction","Suffix","_CACHE","_CACHE_SIZE","determine","MAP","prepend","suffix","Iterator_Iterator","Iterator","source","result","clone","act","item","action","Continue","replaceWith","callback","stop","Stop","replace","Replace","remove","Remove","isEmpty","filter","empty","iterate","iterator","count","list","out","getKey","take","amount","_this","next","prev","skip","skipped","append","iterators","join","apply","concat","purge","reverse","items","modifies","actions","replaces","index_1","reduce","initial","reducer","reduced","prevItem","map","mapper","unmapper","nextItem","undefined","withResult","getResult","forArray","splice","forObject","parent","iterators_1","child","childIterator","ScheduleModifier_ScheduleModifier","ScheduleModifier","clear","otherwise","lookAtTime","getIdentifier","getAll","move","fromType","to","toType","fromIdentifier","toIdentifier","moveTime","fromTime","toTime","moveIds","_a","sameTime","moved","moveIds_1","newStart","withTime","newId","removeTime","removed","set","unset","rawId","asNumber","query","identifiers","spans","describeMap","Schedule_Schedule","Schedule","exclude","include","cancel","meta","parseMeta","Parse_Parse","schedule","toInput","times","isFullDay","updateDurationInDays","lastTime","toMilliseconds","duration","durationUnit","durationInDays","updateChecks","checks","givenFrequency","weekOfYear","fullWeekOfYear","weekspanOfYear","lastFullWeekOfYear","lastWeekspanOfYear","weekOfMonth","weekspanOfMonth","fullWeekOfMonth","lastWeekspanOfMonth","lastFullWeekOfMonth","lastDayOfMonth","dayOfYear","matchesSpan","isSameOrAfter","isBefore","matchesRange","isExcluded","isIncluded","isCancelled","getMeta","getMetas","setFullDay","fullDay","defaultTime","adjustDefinedSpan","addSpan","single","getSingleEventSpan","getFullSpan","add","getTimeSpan","isFullyExcluded","check","hasIncludedTime","iterateIncludeTimes","nextDay","includeDay","lookAhead","iterateDaycast","nextDays","prevDay","lookBack","prevDays","lookup","iterated","iterateSpans","covers","current","lookBehind","timeIterator","matchesTime","sameMinute","coversDay","coversTime","setFrequency","frequency","setExcluded","excluded","identifierType","setCancelled","cancelled","removeInclude","found","moveSingleEvent","moveInstance","takeTime","isSingleEvent","asTime","startOfYear","isSingleYear","isSingleDayOfYear","isSingleMonth","isSingleDayOfMonth","isSingleWeekOfMonth","isSingleDayOfWeek","isSingleWeekOfYear","isSingleFrequency","forecast","around","daysAfter","daysBefore","lookAround","tuplesForDay","tuples","last","offset","matchAgainst","returnDays","returnTimes","timeFormat","alwaysDuration","defaultUnit","exclusions","v","inclusions","cancels","hasMeta","toString","thing","includeRange","includeTimes","includeDuration","includeExcludes","includeIncludes","includeCancels","describeRule","external_commonjs_moment_commonjs2_moment_amd_moment_root_moment_","CACHE","describeArray","excludes","includes","unit","everyOffset","the","on","required","valueEvery","valueOne","array","forDay","parse","forTime","forSpan","isDay","isHour","Event","data","visible","Time_Time","second","millisecond","formatterEntries","FORMATTERS","handled","k","entry","part","size","formatter","charAt","matchesHour","matchesMinute","matchesSecond","parsed","valid","toObject","fromString","REGEX","exec","h","SSS","HH","hh","kk","mm","ss","SS","A","H","S","Parse","given","every_1","offset_1","map_1","unix","fromArray","fromObject","input_1","timeInput","sort","modifier","input_2","identifier","checks_1","event","parseData","cron","pattern","date","valueOf","getLastDayOfMonth","getWeekOfYear","getWeekspanOfYear","getFullWeekOfYear","getLastWeekspanOfYear","getLastFullWeekOfYear","getWeekOfMonth","getWeekspanOfMonth","getFullWeekOfMonth","getLastWeekspanOfMonth","getLastFullWeekOfMonth","sameQuarter","sameHour","precision","isSameOrBefore","diff","isBetween","inclusive","mutate","mutator","toMoment","relative","relativeDays","withDayOfMonth","withDayOfWeek","withDayOfYear","withMonth","prevMonth","nextMonth","relativeWeek","withWeekOfYear","withFullWeekOfYear","withWeekspanOfYear","withWeekOfMonth","withWeekspanOfMonth","withFullWeekOfMonth","relativeWeeks","prevWeek","nextWeek","withYear","relativeYears","prevYear","nextYear","withHour","relativeHours","prevHour","nextHour","withTimes","startOf","isStart","endOf","isEnd","startOfHour","isStartOfHour","isEndOfHour","startOfWeek","isStartOfWeek","isEndOfWeek","startOfMonth","isStartOfMonth","isEndOfMonth","daysInMonth","isStartOfYear","isEndOfYear","daysInYear","weeksInYear","utc","keepLocalTime","toDate","toArray","toJSON","toISOString","keepOffset","isDST","isLeapYear","now","tomorrow","fromMoment","moment","isValid","unixSeconds","fromFormat","fromDate","fromDayIdentifier","firstOfYear","lastWeek","sundayDate","CalendarDay_CalendarDay","CalendarDay","currentDay","currentWeek","currentMonth","currentYear","currentOffset","selectedDay","selectedWeek","selectedMonth","selectedYear","inCalendar","events","CalendarDay_extends","iterateEvents","updateCurrent","updateSelected","selected","clearSelected","CalendarEvent_CalendarEvent","CalendarEvent","actualDay","row","col","starting","isPoint","ending","getTimeBounds","Calendar_Calendar","Calendar","moveStart","moveEnd","fill","minimumSize","repeatCovers","listTimes","eventsOutside","updateRows","updateColumns","eventSorter","selection","filled","refresh","typeChange","sizeChange","focus_1","otherwiseFocus","prefer","preferToday","TYPES","getStart","getEnd","focus_2","setEvents","delayRefresh","withMinimumSize","withRepeatCovers","refreshEvents","withListTimes","withEventsOutside","withUpdateRows","refreshRows","withUpdateColumns","refreshColumns","split","by","calendar","resetDays","refreshCurrent","refreshSelection","refreshVisible","resetFilled","e","iterateDays","eventsForDay","eventToRow","onlyFullDay","used","event_1","rowIndex","_b","_c","event_2","markers","event_3","markers_1","marker","markers_2","getDay","dayCount","getTimes","sorter","entries","entryIndex","eventId","timeIndex","findEvent","event_4","removeEvents","events_1","event_5","removeEvent","indexOf","addEvent","allowDuplicates","addEvents","events_2","event_6","parsedEvents","select","unselect","jump","plain","plainData","plainMeta","event_7","plainEvent","fromInput","forType","focus","defaultInput","Calendar_a","JANUARY","FEBRUARY","MARCH","APRIL","MAY","JUNE","JULY","AUGUST","SEPTEMBER","OCTOBER","NOVEMBER","DECEMBER","LIST","Weekday","SUNDAY","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","ENDS","Pattern_Pattern","Pattern","listed","rules","applyGeneric","removeFrequency","PROPS","rule","isMatch","exactlyWith","isMatchGeneric","getFrequency","exactly","ruleOffset","withName","PatternMap","findMatch","listedOnly","Patterns_2","Patterns","Pattern_i","Patterns_1","Pattern_pattern","Sorts","Start","End","FullDay","Duration","Desc","Alphabetical","getString","as","bs","localeCompare","Ordered","getOrder","List","sorters","sorters_1","compare","__webpack_exports__"],"mappings":"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","file":"dayspan.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"moment\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ds\", [\"moment\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ds\"] = factory(require(\"moment\"));\n\telse\n\t\troot[\"ds\"] = factory(root[\"moment\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","\n\n/**\n * The class which contains commonly used functions by the library. These\n * functions and variables exist in a class so they may be overridden if\n * desired.\n */\nexport class Functions\n{\n\n  /**\n   * Determines whether the given input is an array.\n   *\n   * @param input The variable to test.\n   * @returns `true` if the variable is an array, otherwise `false`.\n   */\n  public static isArray(input: any): boolean\n  {\n    return input instanceof Array;\n  }\n\n  /**\n   * Determines whether the two arrays given are stricly equivalent. If the\n   * arrays are not the same length or contain the same values in the same order\n   * then `false` is returned.\n   *\n   * @param x The first array to test.\n   * @param y The second array to test.\n   * @returns `true` if they have the same exact values, otherwise `false`.\n   */\n  public static isArrayEquals(x: any[], y: any[]): boolean\n  {\n    if (x === y) return true;\n    if (x.length !== y.length) return false;\n\n    for (let i = 0; i < x.length; i++)\n    {\n      if (x[ i ] !== y[ i ])\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Determines whether the given input is a string.\n   *\n   * @param input The variable to test.\n   * @returns `true` if the variable is a string, otherwise `false`.\n   */\n  public static isString(input: any): boolean\n  {\n    return typeof(input) === 'string';\n  }\n\n  /**\n   * Determines whether the given input is a finite number (a number which is\n   * not infinite or not the result of a divide-by-zero operation).\n   *\n   * @param input The variable to test.\n   * @returns `true` if the variable is a finite number, otherwise `false`.\n   */\n  public static isNumber(input: any): boolean\n  {\n    return isFinite(input) && typeof input === 'number';\n  }\n\n  /**\n   * Determines whether the given input is an object and NOT an array.\n   *\n   * @param input The variable to test.\n   * @returns `true` if the variable is a plain object, otherwise `false`.\n   */\n  public static isObject(input: any): boolean\n  {\n    return input !== null && !this.isArray(input) && typeof(input) === 'object';\n  }\n\n  /**\n   * Determines whether the given input is defined.\n   *\n   * @param input The variable to test.\n   * @return `true` if the variable is defined, otherwise `false`.\n   */\n  public static isDefined(input: any): boolean\n  {\n    return typeof(input) !== 'undefined';\n  }\n\n  /**\n   * Determines whether the given input is defined and not null.\n   *\n   * @param input The variable to test.\n   * @return `true` if the variable is defined and not null, otherwise `false`.\n   */\n  public static isValue(input: any): boolean\n  {\n    return input !== null && typeof(input) !== 'undefined';\n  }\n\n  /**\n   * Determines whether the given input appears to be a valid\n   * [[FrequencyValueEvery]].\n   *\n   * ```typescript\n   * Functions.isFrequencyValueEvery({});                   // false\n   * Functions.isFrequencyValueEvery([]);                   // false\n   * Functions.isFrequencyValueEvery([1]);                  // false\n   * Functions.isFrequencyValueEvery(null);                 // false\n   * Functions.isFrequencyValueEvery({every:2});            // true\n   * Functions.isFrequencyValueEvery({offset:1});           // false\n   * Functions.isFrequencyValueEvery({every:2, offset:1});  // true\n   * ```\n   *\n   * @param input The variable to test.\n   * @returns `true` if the variable appears to be a [[FrequencyValueEvery]],\n   *    otherwise false.\n   */\n  public static isFrequencyValueEvery(input: any): boolean\n  {\n    return this.isObject( input ) && this.isNumber( input.every );\n  }\n\n  /**\n   * Determines whether the given input appears to be a valid\n   * [[FrequencyValueOneOf]].\n   *\n   * ```typescript\n   * Functions.isFrequencyValueOneOf({});    // false\n   * Functions.isFrequencyValueOneOf([]);    // false\n   * Functions.isFrequencyValueOneOf([1]);   // true\n   * Functions.isFrequencyValueOneOf(null);  // false\n   * ```\n   *\n   * @param input The variable to test.\n   * @returns `true` if the variable appears to be a [[FrequencyValueOneOf]],\n   *    otherwise false.\n   */\n  public static isFrequencyValueOneOf(input: any): boolean\n  {\n    return this.isArray( input ) && input.length > 0;\n  }\n\n  /**\n   * Returns the first argument which is defined.\n   *\n   * ```typescript\n   * Functions.coalesce(3, 4);                // 3\n   * Functions.coalesce(undefined, 4);        // 4\n   * Functions.coalesce(null, 4);             // null\n   * Functions.coalesce(void 0, void 0, 5);   // 5\n   * ```\n   *\n   * @param a The first argument to look at.\n   * @param b The second argument to look at.\n   * @returns The first defined argument.\n   * @see [[Functions.isDefined]]\n   */\n  public static coalesce(a: any, b: any, c?: any): any\n  {\n    return this.isDefined( a ) ? a : (this.isDefined( b ) ? b : c);\n  }\n\n  /**\n   * Copies values from `from` object and sets them to the `target` object.\n   *\n   * @param target The object to set values to.\n   * @param from The object to copy value references from.\n   * @returns The reference to `target`.\n   */\n  public static extend(target: any, from: any): any\n  {\n    for (let prop in from)\n    {\n      target[ prop ] = from[ prop ];\n    }\n\n    return target;\n  }\n\n  /**\n   * Pads the string `x` up to `length` characters with the given `padding`\n   * optionally placing the `padding` `before` `x`.\n   *\n   * ```typescript\n   * Functions.pad('hey', 5, '_', false);   // 'hey__'\n   * Functions.pad('hey', 5, '_', true);    // '__hey'\n   * Functions.pad('heyman', 5, '_', true); // 'heyman'\n   * ```\n   *\n   * @param x The string to pad.\n   * @param length The length to pad to.\n   * @param padding The string to pad with.\n   * @param before If the padding should go before the string to pad.\n   * @returns The padded string if any padding needed be added.\n   */\n  public static pad(x: string, length: number, padding: string, before: boolean): string\n  {\n    while (x.length < length)\n    {\n      before ? x = padding + x : x = x + padding;\n    }\n\n    return x;\n  }\n\n  /**\n   * Pads the number `x` up to `length` digits where the padding is `0` and it\n   * goes before `x`. This function will only return the first `length`\n   * characters of the padding string representation of the number but can return\n   * an alternative number of `first` characters.\n   *\n   * ```typescript\n   * Functions.padNumber(29, 3);      // '029'\n   * Functions.padNumber(29, 3, 2);   // '02'\n   * Functions.padNumber(9573, 3);    // '957'\n   * ```\n   *\n   * @param x The number to pad with zeros in the beginning.\n   * @param length The number of digits the number should be padded to.\n   * @param first The number of digits to return from the start of the string.\n   * @returns A padded number.\n   */\n  public static padNumber(x: number, length: number, first: number = length)\n  {\n    return this.pad(x + '', length, '0', true).substring( 0, first );\n  }\n\n}\n","\n/**\n * An operation that can be performed on a single number.\n */\nexport enum Op\n{\n  /**\n   * The number is returned unmodified.\n   */\n  NONE,\n\n  /**\n   * The number is rounded down to the nearest whole number.\n   */\n  FLOOR,\n\n  /**\n   * The number is rounded up to the nearest whole number.\n   */\n  CEIL,\n\n  /**\n   * The number is rounded up or down depending on if the fractional value is\n   * greater than or less than 0.5 respectively.\n   */\n  ROUND,\n\n  /**\n   * The fractional part of the number is dropped.\n   */\n  TRUNCATE,\n\n  /**\n   * The number is rounded up when positive and down when negative. This is\n   * effectively ceiling the absolute value where the result preserves the sign.\n   */\n  UP,\n\n  /**\n   * The number is rounded down when positive and up when negative. This is\n   * effectively floor the absolute value where the result preserves the sign.\n   */\n  DOWN\n}\n\n\n/**\n * Performs the requested operation on the given number, optionally taking\n * the absolute value of the number before the operation.\n *\n * @param value The number to operate on.\n * @param op The operation to perform.\n * @param absolute If the number should be positive before the operation.\n * @return The operated result, or the original value if its not a valid number.\n */\nexport function operate(value: number, op: Op, absolute: boolean = false)\n{\n  if (isFinite(value))\n  {\n    if (absolute)\n    {\n      value = Math.abs( value );\n    }\n\n    switch (op)\n    {\n    case Op.NONE:\n      return value;\n    case Op.FLOOR:\n      return Math.floor( value );\n    case Op.CEIL:\n      return Math.ceil( value );\n    case Op.ROUND:\n      return Math.round( value );\n    case Op.TRUNCATE:\n    case Op.DOWN:\n      return value < 0 ? Math.ceil( value ) : Math.floor( value );\n    case Op.UP:\n      return value < 0 ? Math.floor( value ) : Math.ceil( value );\n    }\n  }\n\n  return value;\n}\n","\n\n/**\n * Units of time that are compromised of 1 or more days for the [[Calendar]] class.\n */\nexport enum Units\n{\n  DAY,\n  WEEK,\n  MONTH,\n  YEAR\n}\n","\n\n/**\n * A class that stores commonly used values.\n */\nexport class Constants\n{\n\n  /**\n   * The number of milliseconds in a second.\n   */\n  public static MILLIS_IN_SECOND: number = 1000;\n\n  /**\n   * The number of milliseconds in a minute.\n   */\n  public static MILLIS_IN_MINUTE: number = Constants.MILLIS_IN_SECOND * 60;\n\n  /**\n   * The number of milliseconds in an hour.\n   */\n  public static MILLIS_IN_HOUR: number = Constants.MILLIS_IN_MINUTE * 60;\n\n  /**\n   * The number of milliseconds in a day (not including DST days).\n   */\n  public static MILLIS_IN_DAY: number = Constants.MILLIS_IN_HOUR * 24;\n\n  /**\n   * The number of milliseconds in a week (not including ones that include DST).\n   */\n  public static MILLIS_IN_WEEK: number = Constants.MILLIS_IN_DAY * 7;\n\n  /**\n   * The number of minutes in an hour.\n   */\n  public static MINUTES_IN_HOUR = 60;\n\n  /**\n   * The number of minutes in a day (not including DST days).\n   */\n  public static MINUTES_IN_DAY = 60 * 24;\n\n  /**\n   * The number of days in a week.\n   */\n  public static DAYS_IN_WEEK: number = 7;\n\n\n  /**\n   * The number of months in a year.\n   */\n  public static MONTHS_IN_YEAR: number = 12;\n\n  /**\n   * The number of hours in a day (not including DST days).\n   */\n  public static HOURS_IN_DAY: number = 24;\n\n\n  /**\n   * The first month of the year.\n   */\n  public static MONTH_MIN: number = 0;\n\n  /**\n   * The last month of the year.\n   */\n  public static MONTH_MAX: number = 11;\n\n  /**\n   * The first day of a month.\n   */\n  public static DAY_MIN: number = 1;\n\n  /**\n   * The last day of the longest month.\n   */\n  public static DAY_MAX: number = 31;\n\n  /**\n   * The first hour of the day.\n   */\n  public static HOUR_MIN: number = 0;\n\n  /**\n   * The last hour of the day.\n   */\n  public static HOUR_MAX: number = 23;\n\n  /**\n   * The first minute of the hour.\n   */\n  public static MINUTE_MIN: number = 0;\n\n  /**\n   * The last minute of the hour.\n   */\n  public static MINUTE_MAX: number = 59;\n\n  /**\n   * The first second of the minute.\n   */\n  public static SECOND_MIN: number = 0;\n\n  /**\n   * The last second of the minute.\n   */\n  public static SECOND_MAX: number = 59;\n\n  /**\n   * The first millisecond of the second.\n   */\n  public static MILLIS_MIN: number = 0;\n\n  /**\n   * The last millisecond of the second.\n   */\n  public static MILLIS_MAX: number = 999;\n\n  /**\n   * The first day of the week.\n   */\n  public static WEEKDAY_MIN: number = 0;\n\n  /**\n   * The last day of the week.\n   */\n  public static WEEKDAY_MAX: number = 6;\n\n\n  /**\n   * The default duration for an event.\n   */\n  public static DURATION_DEFAULT: number = 1;\n\n  /**\n   * The default duration unit for an all day event.\n   */\n  public static DURATION_DEFAULT_UNIT_ALL: string = 'days';\n\n  /**\n   * The default duration unit for an event at a given time.\n   */\n  public static DURATION_DEFAULT_UNIT_TIMES: string = 'hours';\n\n  /**\n   * Computes the duration unit given its for an all day event.\n   *\n   * @param all If the event is all day.\n   * @return The default unit for the event.\n   */\n  public static DURATION_DEFAULT_UNIT: (all: boolean) => string =\n    all => all ? Constants.DURATION_DEFAULT_UNIT_ALL :\n                 Constants.DURATION_DEFAULT_UNIT_TIMES;\n\n  /**\n   * The number of milliseconds for various duration units. These are worse case\n   * scenario and do not include DST changes.\n   */\n  public static DURATION_TO_MILLIS = {\n    minute:   Constants.MILLIS_IN_MINUTE,\n    minutes:  Constants.MILLIS_IN_MINUTE,\n    hour:     Constants.MILLIS_IN_HOUR,\n    hours:    Constants.MILLIS_IN_HOUR,\n    day:      Constants.MILLIS_IN_DAY,\n    days:     Constants.MILLIS_IN_DAY,\n    week:     Constants.MILLIS_IN_WEEK,\n    weeks:    Constants.MILLIS_IN_WEEK,\n    month:    Constants.MILLIS_IN_DAY * Constants.DAY_MAX,\n    months:   Constants.MILLIS_IN_DAY * Constants.DAY_MAX\n  };\n\n  /**\n   * The maximum estimated number of events per day. This is used to calculate\n   * [[CalendarEvent.id]] to give each event a unique ID. If you think you will\n   * have more events than this per day, you can enlarge the value.\n   */\n  public static MAX_EVENTS_PER_DAY: number = 24;\n\n  /**\n   * The day of the week which determines the first week of the year or month.\n   * By default this day is Thursday.\n   */\n  public static WEEK_OF_MONTH_MINIMUM_WEEKDAY: number = 4;\n\n}\n","\nimport { Day } from './Day';\nimport { Op } from './Operation';\nimport { Units } from './Units';\nimport { Constants } from './Constants';\n\n\n\n/**\n * The calculated bounds of a DaySpan relative to a given day.\n */\nexport interface DaySpanBounds\n{\n\n  /**\n   * The top of the span within the rectangle of the given day.\n   */\n  top: number;\n\n  /**\n   * The bottom of the span within the rectangle of the givne day.\n   */\n  bottom: number;\n\n  /**\n   * The height of the span within the rectangle of the given day. This is\n   * equivalent by `bottom - top`.\n   */\n  height: number;\n\n  /**\n   * The left of the span within the rectangle of the given day.\n   */\n  left: number;\n\n  /**\n   * The right of the span within the rectangle of the given day.\n   */\n  right: number;\n\n  /**\n   * The width of the span within the rectangle of the given day. This is\n   * equivalent by `right - left`.\n   */\n  width: number;\n}\n\n/**\n * A class for a range of time between two [[Day]] timestamps.\n */\nexport class DaySpan\n{\n\n\n  /**\n   * The starting timestamp of the span (inclusive).\n   */\n  public start: Day;\n\n  /**\n   * The endind timestamp of the span (inclusive).\n   */\n  public end: Day;\n\n\n  /**\n   * Creates a new span of time.\n   *\n   * @param start The starting timestamp.\n   * @param end The ending timestamp.\n   */\n  public constructor(start: Day, end: Day)\n  {\n    this.start = start;\n    this.end = end;\n  }\n\n  /**\n   * Whether this span starts and ends on the same timestamp.\n   */\n  public get isPoint(): boolean\n  {\n    return this.start.time === this.end.time;\n  }\n\n  /**\n   * Determines whether the given timestamp lies between the start and end\n   * timestamp.\n   *\n   * @param day The timestamp to test.\n   * @returns True if the day is >= the start and <= the end of this span.\n   */\n  public contains(day: Day): boolean\n  {\n    return day.time >= this.start.time && day.time <= this.end.time;\n  }\n\n  /**\n   * Compares the given timestamp to this span. If the timestamp is before this\n   * span then `-1` is returned, if the timestamp is after this span then `1`\n   * us returned, otherwise `0` is returned when the timestamp is in this span.\n   *\n   * @param day The timestamp to compare to.\n   * @returns `-1`, `0`, or `1` depending on the given timestamp relative to\n   *    this span.\n   */\n  public compareTo(day: Day): number\n  {\n    return day.time < this.start.time ? -1 : (day.time > this.end.time ? 1 : 0);\n  }\n\n  /**\n   * Determines whether the given timestamp is between the start and end\n   * timestamp or lies on the same day as the start or end timestamp.\n   *\n   * @param day The timestamp to test.\n   * @see [[Day.sameDay]]\n   */\n  public matchesDay(day: Day): boolean\n  {\n    return this.contains( day ) || day.sameDay( this.start ) || day.sameDay( this.end );\n  }\n\n  /**\n   * Determines whether the given timestamp is between the start and end\n   * timestamp or lies on the same week as the start or end timestamp.\n   *\n   * @param day The timestamp to test.\n   * @see [[Day.sameWeek]]\n   */\n  public matchesWeek(day: Day): boolean\n  {\n    return this.contains( day ) || day.sameWeek( this.start ) || day.sameWeek( this.end );\n  }\n\n  /**\n   * Determines whether the given timestamp is between the start and end\n   * timestamp or lies on the same month as the start or end timestamp.\n   *\n   * @param day The timestamp to test.\n   * @see [[Day.sameMonth]]\n   */\n  public matchesMonth(day: Day): boolean\n  {\n    return this.contains( day ) || day.sameMonth( this.start ) || day.sameMonth( this.end );\n  }\n\n  /**\n   * Determines whether the given timestamp is between the start and end\n   * timestamp or lies on the same year as the start or end timestamp.\n   *\n   * @param day The timestamp to test.\n   * @see [[Day.sameYear]]\n   */\n  public matchesYear(day: Day): boolean\n  {\n    return this.contains( day ) || day.sameYear( this.start ) || day.sameYear( this.end );\n  }\n\n\n  /**\n   * Calculates the number of milliseconds between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.millisBetween]]\n   */\n  public millis(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.millisBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of seconds between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.secondsBetween]]\n   */\n  public seconds(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.secondsBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of minutes between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.minutesBetween]]\n   */\n  public minutes(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.minutesBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of hours between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.hoursBetween]]\n   */\n  public hours(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.hoursBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of days between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.daysBetween]]\n   */\n  public days(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.daysBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of weeks between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.weeksBetween]]\n   */\n  public weeks(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.weeksBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of months between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.monthsBetween]]\n   */\n  public months(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.monthsBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of years between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.yearsBetween]]\n   */\n  public years(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.yearsBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Returns a delta value between 0 and 1 which represents where the\n   * [[DaySpan.start]] is relative to the given day. The delta value would\n   * be less than 0 if the start of the event is before the given day.\n   *\n   * @param relativeTo The day to find the start delta relative to.\n   * @return A number between 0 and 1 if the start of this span is in the\n   *    24-hour period starting at the given timestamp, otherwise the value\n   *    returned may be less than 0 or greater than 1.\n   */\n  public startDelta(relativeTo: Day): number\n  {\n    return (this.start.time - relativeTo.time) / Constants.MILLIS_IN_DAY;\n  }\n\n  /**\n   * Returns a delta value between 0 and 1 which represents where the\n   * [[DaySpan.end]] is relative to the given day. The delta value would\n   * be greater than 1 if the end of the event is after the given day.\n   *\n   * @param relativeTo The day to find the end delta relative to.\n   * @return A number between 0 and 1 if the end of this span is in the\n   *    24-hour period starting at the given timestamp, otherwise the value\n   *    returned may be less than 0 or greater than 1.\n   */\n  public endDelta(relativeTo: Day): number\n  {\n    return (this.end.time - relativeTo.time) / Constants.MILLIS_IN_DAY;\n  }\n\n  /**\n   * Calculates the bounds for span event if it were placed in a rectangle which\n   * represents a day (24 hour period). By default the returned values are\n   * between 0 and 1 and can be scaled by the proper rectangle dimensions or the\n   * rectangle dimensions can be passed to this function.\n   *\n   * @param relativeTo The day to find the bounds relative to. If this is not the\n   *    start of the day the returned bounds is relative to the given time.\n   * @param dayHeight The height of the rectangle of the day.\n   * @param dayWidth The width of the rectangle of the day.\n   * @param columnOffset The offset in the rectangle of the day to adjust this\n   *    span by. This also reduces the width of the returned bounds to keep the\n   *    bounds in the rectangle of the day.\n   * @param clip `true` if the bounds should stay in the day rectangle, `false`\n   *    and the bounds may go outside the rectangle of the day for multi-day\n   *    spans.\n   * @param offsetX How much to translate the left & right properties by.\n   * @param offsetY How much to translate the top & bottom properties by.\n   * @returns The calculated bounds for this span.\n   */\n  public getBounds(relativeTo: Day, dayHeight: number = 1, dayWidth: number = 1, columnOffset: number = 0, clip: boolean = true, offsetX: number = 0, offsetY: number = 0): DaySpanBounds\n  {\n    let startRaw: number = this.startDelta( relativeTo );\n    let endRaw: number = this.endDelta( relativeTo );\n\n    let start: number = clip ? Math.max(0, startRaw) : startRaw;\n    let end: number = clip ? Math.min(1, endRaw) : endRaw;\n\n    let left: number = columnOffset;\n    let right: number = dayWidth - left;\n\n    let top: number = start * dayHeight;\n    let bottom: number = end * dayHeight;\n\n    return {\n      top: top + offsetY,\n      bottom: bottom + offsetY,\n      height: bottom - top,\n      left: left + offsetX,\n      right: right + offsetX,\n      width: right\n    };\n  }\n\n  /**\n   * Summarizes this span given an approximate unit of time and a few other\n   * options. If the start and end are on the same unit, a single value will\n   * be returned. Otherwise a start and end will be returned with a `delimiter`.\n   *\n   * @param type The unit of time this span is for.\n   * @param dayOfWeek When `true` the weekday of the start and end are included.\n   * @param short When `true` the short form of weekdays and months will be used.\n   * @param repeat When `true` the year will be repeated on the start and end\n   *  timestamp even if they are the same year.\n   * @param contextual When `true` the year will be hidden if it's the current\n   *  year.\n   * @param delimiter The string to separate the start and end timestamps with.\n   * @returns The summary of this span.\n   */\n  public summary(type: Units, dayOfWeek: boolean = true, short: boolean = false, repeat: boolean = false, contextual: boolean = true, delimiter: string = ' - '): string\n  {\n    let formats = DaySpan.SUMMARY_FORMATS[ type ];\n    let today: Day = Day.today();\n    let showStartYear: boolean = !contextual || !this.start.sameYear( today );\n    let showEndYear: boolean = !contextual || !this.end.sameYear( today );\n    let start: string = this.start.format( formats(short, dayOfWeek, showStartYear) );\n    let end: string = this.end.format( formats(short, dayOfWeek, showEndYear) );\n    let summary: string = start;\n\n    if (start !== end)\n    {\n      if (!repeat)\n      {\n        summary = this.start.format( formats(short, dayOfWeek, !this.start.sameYear(this.end)) );\n      }\n\n      summary += delimiter;\n      summary += end;\n    }\n    else\n    {\n      summary = start;\n    }\n\n    return summary;\n  }\n\n  /**\n   * Determines whether the gven span intersects with this span.\n   *\n   * @param span The span to test.\n   * @returns `true` if the spans intersect, otherwise `false`.\n   */\n  public intersects(span: DaySpan): boolean\n  {\n    return !(\n      this.end.time < span.start.time ||\n      this.start.time > span.end.time\n    );\n  }\n\n  /**\n   * Calculates the intersection between this span and the given span. If there\n   * is no intersection between the two spans then `null` is returned.\n   *\n   * @param span The span to calculate the intersection with.\n   * @returns The intersection or `null` if none exists.\n   */\n  public intersection(span: DaySpan): DaySpan\n  {\n    let start: Day = this.start.max( span.start );\n    let end: Day = this.end.min( span.end );\n\n    return start.isAfter( end ) ? null : new DaySpan(start, end);\n  }\n\n  /**\n   * Calculates the union between this span and the given span.\n   *\n   * @param span The span to calculate the union with.\n   * @returns The union of the two spans.\n   */\n  public union(span: DaySpan): DaySpan\n  {\n    let start: Day = this.start.min( span.start );\n    let end: Day = this.end.max( span.end );\n\n    return new DaySpan(start, end);\n  }\n\n  /**\n   * Returns a point [[DaySpan]] with the same start and end timestamp.\n   *\n   * @param day The timestamp which will be the start and end.\n   * @returns The new instance.\n   * @see [[DaySpan.isPoint]]\n   */\n  public static point(day: Day): DaySpan\n  {\n    return new DaySpan( day, day );\n  }\n\n\n  /**\n   * Formatting functions which assist the [[DaySpan.summary]] function.\n   */\n  public static SUMMARY_FORMATS =\n  {\n    [Units.DAY]: (short: boolean, dayOfWeek: boolean, year: boolean) => {\n      return (dayOfWeek ? (short ? 'ddd, ' : 'dddd, ') : '') + (short ? 'MMM ' : 'MMMM ') + 'Do' + (year ? ' YYYY' : '');\n    },\n    [Units.WEEK]: (short: boolean, dayOfWeek: boolean, year: boolean) => {\n      return (dayOfWeek ? (short ? 'ddd, ' : 'dddd, ') : '') + (short ? 'MMM ' : 'MMMM ') + 'Do' + (year ? ' YYYY' : '');\n    },\n    [Units.MONTH]: (short: boolean, dayOfWeek: boolean, year: boolean) => {\n      return (short ? 'MMM' : 'MMMM') + (year ? ' YYYY' : '');\n    },\n    [Units.YEAR]: (short: boolean, dayOfWeek: boolean, year: boolean) => {\n      return (year ? 'YYYY' : '');\n    }\n  };\n\n}\n","\nimport { Functions as fn } from './Functions';\nimport { Day } from './Day';\nimport { DaySpan } from './DaySpan';\n\n\n/**\n * The type for identifiers. Most of the time an identifier can be stored as a\n * number because the 4 digit year is first. However when the year is below\n * 1000 a string will be used with zero padding. Storing identifiers as numbers\n * enable very quick comparisons and using strings or numbers allows the\n * identifier to be used as a key to a map.\n */\nexport type IdentifierInput = number | string;\n\n/**\n * The possible properties which can be pulled from an identifier.\n */\nexport interface IdentifierObject\n{\n  /**\n   * The year pulled from an identifier (0-9999).\n   */\n  year?: number;\n  /**\n   * The quarter of the year pulled from an identifier (1-4)\n   */\n  quarter?: number;\n  /**\n   * The month of the year pulled from an identifier (0-11)\n   */\n  month?: number;\n  /**\n   * The week of the year pulled from an identifier (1-52)\n   */\n  week?: number;\n  /**\n   * The day of the month pulled from an identifier (1-31)\n   */\n  day?: number;\n  /**\n   * The hour of the day pulled from an identifier (0-23)\n   */\n  hour?: number;\n  /**\n   * The minute of the hour pulled from an identifier (0-59)\n   */\n  minute?: number;\n}\n\n\n/**\n * A class for detecting, parsing, and building identifiers to and from days.\n *\n * An identifier is a simple value which represents a span of time. It may\n * represent an entire year, a quarter (3 months) of a year, a week of a year,\n * a month in a year, a specific day of a month of a year, or a specific hour,\n * minute, day, and month of a year.\n *\n * For example:\n * - `2018`: The year 2018\n * - `201801`: January 2018\n * - `2014023`: The 23rd week of 2014\n * - `20170311`: March 11th, 2017\n * - `201406151651`: June 15th 2016 at 4:51 pm\n * - `'0525'`: Year 525 of the first age, Elrond and Elros are born\n */\nexport abstract class Identifier\n{\n\n  /**\n   * Determines whether the given identifier is this type.\n   *\n   * @param id The identifier to test.\n   * @returns `true` if the identifier is this type, otherwise `false`.\n   */\n  public is(id: IdentifierInput): boolean\n  {\n    return (id + '').length === this.getLength();\n  }\n\n  /**\n   * Returns the identifier of this type for the given day,\n   *\n   * @param day The day to get the identifier of.\n   * @returns The identifier for the day of this type.\n   */\n  abstract get(day: Day): IdentifierInput;\n\n  /**\n   * Converts the given identifier which has passed [[Identifier.is]] to an\n   * object with properties pulled from the identifier.\n   *\n   * @param id The identifier to parse.\n   * @returns The object with properties parsed from the identifer.\n   */\n  abstract object(id: IdentifierInput): IdentifierObject;\n\n  /**\n   * Returns the start of the time span the identifier represents.\n   *\n   * @param id The identifier to convert to a start day.\n   * @returns The start of the time span the identifier represents.\n   */\n  abstract start(id: IdentifierInput): Day;\n\n  /**\n   * Returns the span of time the identifier represents.\n   *\n   * @param id The identifier to convert to a span.\n   * @param endInclusive When `true` the end of the span will be the very last\n   *    millisecond that represents the timespan, otherwise `false` the end\n   *    will be the start of the very next span.\n   * @returns\n   */\n  abstract span(id: IdentifierInput, endInclusive: boolean): DaySpan;\n\n  /**\n   * Determines if the day matches the given identifier.\n   *\n   * @param day The day to test.\n   * @param id The identifier to compare to.\n   * @returns `true` if the day exists in the time span represented by the\n   *    identifier, otherwise `false`.\n   */\n  abstract matches(day: Day, id: IdentifierInput): boolean;\n\n  /**\n   * Describes the given identifier as a human friendly string.\n   *\n   * @param id The identifier to describe.\n   * @param short If the description should use shorter language or longer.\n   * @returns The human friendly string that describes the identifier.\n   */\n  abstract describe(id: IdentifierInput, short: boolean): string;\n\n  /**\n   * The scales for all the different values stored in an identifier.\n   */\n  protected abstract getScales(): number[];\n\n  /**\n   * The length of the identifier of this type in digits.\n   */\n  protected abstract getLength(): number;\n\n  /**\n   * Computes the identifier given values taken from a [[Day]].\n   *\n   * @param values The values to compute.\n   * @returns The computed identifier.\n   */\n  protected compute(...values: number[]): IdentifierInput\n  {\n    const scales: number[] = this.getScales();\n    let total: number = 0;\n\n    for (let i = 0; i < values.length; i++)\n    {\n      total += values[ i ] * scales[ i ];\n    }\n\n    return this.is( total ) ? total : fn.padNumber(total, this.getLength());\n  }\n\n  /**\n   * Decomputes the given identifier and returns values which describe a span\n   * of time.\n   *\n   * @param id The identifier to decompute.\n   * @returns The original values which computed the identifier.\n   */\n  protected decompute(id: IdentifierInput): number[]\n  {\n    const scales: number[] = this.getScales();\n    let total: number = fn.isNumber(id) ? <number>id : parseInt(<string>id);\n    let values: number[] = [];\n\n    for (let i = 0; i < scales.length - 1; i++)\n    {\n      let curr: number = scales[ i + 0 ];\n      let next: number = scales[ i + 1 ];\n      let mod: number = next / curr;\n      let value: number = total % mod;\n\n      values.push( value );\n      total = Math.floor( total / mod );\n    }\n\n    values.push( total );\n\n    return values;\n  }\n\n  /**\n   * The identifier type for an hour of time on a specific day.\n   */\n  public static Time: Identifier = null;\n\n  /**\n   * The identifier type for a specific day.\n   */\n  public static Day: Identifier = null;\n\n  /**\n   * The identifier type for a specific week of a year.\n   */\n  public static Week: Identifier = null;\n\n  /**\n   * The identifier type for a specific month of a year.\n   */\n  public static Month: Identifier = null;\n\n  /**\n   * The identifier type for a specific quarter of a year.\n   */\n  public static Quarter: Identifier = null;\n\n  /**\n   * The identifier type for a specific year.\n   */\n  public static Year: Identifier = null;\n\n\n  /**\n   * Finds which identifier type matches the given identifier, if any.\n   *\n   * @param id The identifier to find the type of.\n   * @returns The found identifier type, otherwise `null` if none exists.\n   */\n  public static find(id: IdentifierInput): Identifier\n  {\n    if (this.Time.is(id)) return this.Time;\n    if (this.Day.is(id)) return this.Day;\n    if (this.Week.is(id)) return this.Week;\n    if (this.Month.is(id)) return this.Month;\n    if (this.Year.is(id)) return this.Year;\n\n    return null;\n  }\n\n  /**\n   * Determines whether the given time span `outer` contains the time span\n   * `inner`.\n   *\n   * @param outer The potentially larger time span `inner` must be contained in.\n   * @param inner The time span to test is contained inside `outer`.\n   * @returns `true` if `inner` is equal to or contained in `outer`, otherwise\n   *    `false`.\n   */\n  public static contains(outer: IdentifierInput, inner: IdentifierInput): boolean\n  {\n    let outerString: string = outer + '';\n\n    return (inner + '').substring( 0, outerString.length ) === outerString;\n  }\n\n}\n\n// YYYYMMddHHmm (12)\nclass IdentifierTime extends Identifier\n{\n\n  public static DESCRIBE_FORMAT_LONG: string = 'LLL';\n  public static DESCRIBE_FORMAT_SHORT: string = 'lll';\n\n  private static SCALES: number[] = [\n    1           /* minute */,\n    100         /* hour   */,\n    10000       /* day    */,\n    1000000     /* month  */,\n    100000000   /* year   */];\n  private static LENGTH: number = 12;\n\n  protected getScales(): number[]\n  {\n    return IdentifierTime.SCALES;\n  }\n\n  protected getLength(): number\n  {\n    return IdentifierTime.LENGTH;\n  }\n\n  public get(day: Day): IdentifierInput\n  {\n    return this.compute(day.minute, day.hour, day.dayOfMonth, day.month + 1, day.year);\n  }\n\n  public object(id: IdentifierInput): IdentifierObject\n  {\n    let values: number[] = this.decompute(id);\n\n    return {\n      minute:   values[0],\n      hour:     values[1],\n      day:      values[2],\n      month:    values[3] - 1,\n      year:     values[4]\n    };\n  }\n\n  public start(id: IdentifierInput): Day\n  {\n    let obj: IdentifierObject = this.object(id);\n    let start: Day = Day.build( obj.year, obj.month, obj.day, obj.hour, obj.minute );\n\n    return start;\n  }\n\n  public span(id: IdentifierInput, endInclusive: boolean = false): DaySpan\n  {\n    let start: Day = this.start( id );\n    let end: Day = start.endOfHour( endInclusive );\n\n    return new DaySpan(start, end);\n  }\n\n  public describe(id: IdentifierInput, short: boolean = false): string\n  {\n    let start: Day = this.start( id );\n    let format: string = short ? IdentifierTime.DESCRIBE_FORMAT_SHORT : IdentifierTime.DESCRIBE_FORMAT_LONG;\n\n    return start.format( format );\n  }\n\n  public matches(day: Day, id: IdentifierInput): boolean\n  {\n    return day.timeIdentifier === id;\n    /*\n    let obj: IdentifierObject = this.object(id);\n\n    return (\n      day.year === obj.year &&\n      day.month === obj.month &&\n      day.dayOfMonth === obj.day &&\n      day.hour === obj.hour &&\n      day.minute === obj.minute\n    );\n    */\n  }\n\n}\n\n// YYYYMMdd (8)\nclass IdentifierDay extends Identifier\n{\n\n  public static DESCRIBE_FORMAT_LONG: string = 'LL';\n  public static DESCRIBE_FORMAT_SHORT: string = 'll';\n\n  private static SCALES: number[] = [\n    1           /* day     */,\n    100         /* month   */,\n    10000       /* year    */];\n  private static LENGTH: number = 8;\n\n  protected getScales(): number[]\n  {\n    return IdentifierDay.SCALES;\n  }\n\n  protected getLength(): number\n  {\n    return IdentifierDay.LENGTH;\n  }\n\n  public get(day: Day): IdentifierInput\n  {\n    return this.compute(day.dayOfMonth, day.month + 1, day.year);\n  }\n\n  public object(id: IdentifierInput): IdentifierObject\n  {\n    let values: number[] = this.decompute(id);\n\n    return {\n      day:      values[0],\n      month:    values[1] - 1,\n      year:     values[2]\n    };\n  }\n\n  public start(id: IdentifierInput): Day\n  {\n    let obj: IdentifierObject = this.object(id);\n    let start: Day = Day.build( obj.year, obj.month, obj.day );\n\n    return start;\n  }\n\n  public span(id: IdentifierInput, endInclusive: boolean = false): DaySpan\n  {\n    let start: Day = this.start( id );\n    let end: Day = start.end( endInclusive );\n\n    return new DaySpan(start, end);\n  }\n\n  public describe(id: IdentifierInput, short: boolean = false): string\n  {\n    let start: Day = this.start( id );\n    let format: string = short ? IdentifierDay.DESCRIBE_FORMAT_SHORT : IdentifierDay.DESCRIBE_FORMAT_LONG;\n\n    return start.format( format );\n  }\n\n  public matches(day: Day, id: IdentifierInput): boolean\n  {\n    return day.dayIdentifier === id;\n    /*\n    let obj: IdentifierObject = this.object(id);\n\n    return (\n      day.year === obj.year &&\n      day.month === obj.month &&\n      day.dayOfMonth === obj.day\n    );\n    */\n  }\n\n}\n\n// YYYY0ww (7)\nclass IdentifierWeek extends Identifier\n{\n\n  public static DESCRIBE_FORMAT_LONG: string = 'wo [week of] YYYY';\n  public static DESCRIBE_FORMAT_SHORT: string = 'wo [week of] YYYY';\n\n  private static SCALES: number[] = [\n    1           /* week   */,\n    1000        /* year   */];\n  private static LENGTH: number = 7;\n\n  protected getScales(): number[]\n  {\n    return IdentifierWeek.SCALES;\n  }\n\n  protected getLength(): number\n  {\n    return IdentifierWeek.LENGTH;\n  }\n\n  public get(day: Day): IdentifierInput\n  {\n    return this.compute(day.week, day.year);\n  }\n\n  public object(id: IdentifierInput): IdentifierObject\n  {\n    let values: number[] = this.decompute(id);\n\n    return {\n      week:     values[0],\n      year:     values[1]\n    };\n  }\n\n  public start(id: IdentifierInput): Day\n  {\n    let obj: IdentifierObject = this.object(id);\n    let start: Day = Day.build( obj.year, 0 ).withWeek( obj.week );\n\n    return start;\n  }\n\n  public span(id: IdentifierInput, endInclusive: boolean = false): DaySpan\n  {\n    let start: Day = this.start( id );\n    let end: Day = start.endOfWeek( endInclusive );\n\n    return new DaySpan(start, end);\n  }\n\n  public describe(id: IdentifierInput, short: boolean = false): string\n  {\n    let start: Day = this.start( id );\n    let format: string = short ? IdentifierWeek.DESCRIBE_FORMAT_SHORT : IdentifierWeek.DESCRIBE_FORMAT_LONG;\n\n    return start.format( format );\n  }\n\n  public matches(day: Day, id: IdentifierInput): boolean\n  {\n    return day.weekIdentifier === id;\n    /*\n    let obj: IdentifierObject = this.object(id);\n\n    return (\n      day.year === obj.year &&\n      day.week === obj.week\n    );\n    */\n  }\n\n}\n\n// YYYYMM (6)\nclass IdentifierMonth extends Identifier\n{\n\n  public static DESCRIBE_FORMAT_LONG: string = 'MMMM YYYY';\n  public static DESCRIBE_FORMAT_SHORT: string = 'MMM YYYY';\n\n  private static SCALES: number[] = [\n    1           /* month  */,\n    100         /* year   */];\n  private static LENGTH: number = 6;\n\n  protected getScales(): number[]\n  {\n    return IdentifierMonth.SCALES;\n  }\n\n  protected getLength(): number\n  {\n    return IdentifierMonth.LENGTH;\n  }\n\n  public get(day: Day): IdentifierInput\n  {\n    return this.compute(day.month + 1, day.year);\n  }\n\n  public object(id: IdentifierInput): IdentifierObject\n  {\n    let values: number[] = this.decompute(id);\n\n    return {\n      month:    values[0] - 1,\n      year:     values[1]\n    };\n  }\n\n  public start(id: IdentifierInput): Day\n  {\n    let obj: IdentifierObject = this.object(id);\n    let start: Day = Day.build( obj.year, obj.month );\n\n    return start;\n  }\n\n  public span(id: IdentifierInput, endInclusive: boolean = false): DaySpan\n  {\n    let start: Day = this.start( id );\n    let end: Day = start.endOfMonth( endInclusive );\n\n    return new DaySpan(start, end);\n  }\n\n  public describe(id: IdentifierInput, short: boolean = false): string\n  {\n    let start: Day = this.start( id );\n    let format: string = short ? IdentifierMonth.DESCRIBE_FORMAT_SHORT : IdentifierMonth.DESCRIBE_FORMAT_LONG;\n\n    return start.format( format );\n  }\n\n  public matches(day: Day, id: IdentifierInput): boolean\n  {\n    return day.monthIdentifier === id;\n    /*\n    let obj: IdentifierObject = this.object(id);\n\n    return (\n      day.year === obj.year &&\n      day.month === obj.month\n    );\n    */\n  }\n\n}\n\n// YYYYQ (5)\nclass IdentifierQuarter extends Identifier\n{\n\n  public static DESCRIBE_FORMAT_LONG: string = 'Qo [quarter] YYYY';\n  public static DESCRIBE_FORMAT_SHORT: string = 'Qo [quarter] YYYY';\n\n  private static SCALES: number[] = [\n    1           /* quarter  */,\n    10          /* year   */];\n  private static LENGTH: number = 5;\n\n  protected getScales(): number[]\n  {\n    return IdentifierQuarter.SCALES;\n  }\n\n  protected getLength(): number\n  {\n    return IdentifierQuarter.LENGTH;\n  }\n\n  public get(day: Day): IdentifierInput\n  {\n    return this.compute(day.quarter, day.year);\n  }\n\n  public object(id: IdentifierInput): IdentifierObject\n  {\n    let values: number[] = this.decompute(id);\n\n    return {\n      quarter:  values[0],\n      year:     values[1]\n    };\n  }\n\n  public start(id: IdentifierInput): Day\n  {\n    let obj: IdentifierObject = this.object(id);\n    let start: Day = Day.build( obj.year, (obj.quarter - 1) * 3 );\n\n    return start;\n  }\n\n  public span(id: IdentifierInput, endInclusive: boolean = false): DaySpan\n  {\n    let start: Day = this.start( id );\n    let end: Day = start.relativeMonths( 3 ).endOfMonth( endInclusive );\n\n    return new DaySpan(start, end);\n  }\n\n  public describe(id: IdentifierInput, short: boolean = false): string\n  {\n    let start: Day = this.start( id );\n    let format: string = short ? IdentifierQuarter.DESCRIBE_FORMAT_SHORT : IdentifierQuarter.DESCRIBE_FORMAT_LONG;\n\n    return start.format( format );\n  }\n\n  public matches(day: Day, id: IdentifierInput): boolean\n  {\n    return day.quarterIdentifier === id;\n    /*\n    let obj: IdentifierObject = this.object(id);\n\n    return (\n      day.year === obj.year &&\n      day.quarter === obj.quarter\n    );\n    */\n  }\n\n}\n\n// YYYY (4)\nclass IdentifierYear extends Identifier\n{\n\n  public static DESCRIBE_FORMAT_LONG: string = 'YYYY';\n  public static DESCRIBE_FORMAT_SHORT: string = 'YYYY';\n\n  private static SCALES: number[] = [\n    1           /* year  */];\n  private static LENGTH: number = 4;\n\n  protected getScales(): number[]\n  {\n    return IdentifierYear.SCALES;\n  }\n\n  protected getLength(): number\n  {\n    return IdentifierYear.LENGTH;\n  }\n\n  public get(day: Day): IdentifierInput\n  {\n    return this.compute(day.year);\n  }\n\n  public object(id: IdentifierInput): IdentifierObject\n  {\n    let values: number[] = this.decompute(id);\n\n    return {\n      year:     values[0]\n    };\n  }\n\n  public start(id: IdentifierInput): Day\n  {\n    let obj: IdentifierObject = this.object(id);\n    let start: Day = Day.build( obj.year, 0 );\n\n    return start;\n  }\n\n  public span(id: IdentifierInput, endInclusive: boolean = false): DaySpan\n  {\n    let start: Day = this.start( id );\n    let end: Day = start.endOfYear( endInclusive );\n\n    return new DaySpan(start, end);\n  }\n\n  public describe(id: IdentifierInput, short: boolean = false): string\n  {\n    let start: Day = this.start( id );\n    let format: string = short ? IdentifierYear.DESCRIBE_FORMAT_SHORT : IdentifierYear.DESCRIBE_FORMAT_LONG;\n\n    return start.format( format );\n  }\n\n  public matches(day: Day, id: IdentifierInput): boolean\n  {\n    return day.year === id;\n    /*\n    let obj: IdentifierObject = this.object(id);\n\n    return (\n      day.year === obj.year\n    );\n    */\n  }\n\n}\n\n// Sets the Identifier types\nIdentifier.Time = new IdentifierTime();\nIdentifier.Day = new IdentifierDay();\nIdentifier.Week = new IdentifierWeek();\nIdentifier.Month = new IdentifierMonth();\nIdentifier.Quarter = new IdentifierQuarter();\nIdentifier.Year = new IdentifierYear();\n","\n/**\n * A class which takes a number and determines the suffix for that number.\n *\n * ```typescript\n * Suffix.CACHE[ 2 ];         // 2nd\n * Suffix.determine( 3 );     // rd\n * Suffix.get( 4 );           // th\n * Suffix.get( 4, true );     // 4th\n * ```\n */\nexport class Suffix\n{\n\n  /**\n   * The array of suffixes used.\n   */\n  public static MAP: string[] = [\n    'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'\n  ];\n\n  /**\n   * An internal cache of [[Suffix._CACHE_SIZE]] suffixes.\n   */\n  private static _CACHE: string[];\n\n  /**\n   * The number of values to store in the cache (inclusive).\n   */\n  private static _CACHE_SIZE: number = 366;\n\n\n  /**\n   * The cache of number & suffix pairs.\n   */\n  public static get CACHE(): string[]\n  {\n    if (!this._CACHE)\n    {\n      this._CACHE = [];\n\n      for (let i = 0; i <= this._CACHE_SIZE; i++)\n      {\n        this._CACHE[ i ] = this.get( i, true );\n      }\n    }\n\n    return this._CACHE;\n  }\n\n  /**\n   * Determines the suffix for a given number.\n   *\n   * @param value The number to find the suffix for.\n   * @returns The suffix determined.\n   */\n  public static determine(value: number): string\n  {\n    return value >= 11 && value <= 13 ? 'th' : this.MAP[ value % this.MAP.length ];\n  }\n\n  /**\n   * Gets the suffix for a number and optionally appends it before the suffix.\n   *\n   * @param value The number to get the suffix for.\n   * @param prepend When `true` the value is prepended to the suffix.\n   * @returns The suffix or value & suffix pair determined.\n   */\n  public static get(value: number, prepend: boolean = false): string\n  {\n    let suffix: string = this.determine(value);\n\n    return prepend ? value + suffix : suffix;\n  }\n\n}\n","\nimport { Functions as fn } from './Functions';\n\n\n/**\n * The callback which is invoked for each item in the Iterator. The callback\n * can call [[Iterator.stop]] at anytime to stop iteration.\n *\n * @param item The item found in the iterator.\n * @param iterator The iterator with the item.\n * @returns The result of the callback.\n */\nexport type IteratorCallback<T, R> = (item: T, iterator: Iterator<T>) => R;\n\n/**\n * An [[Iterator]] source which handles iterating over items and calls\n * [[Iterator.act]] for each item, taking the requested action when possible.\n *\n * @param callback The function to invoke for each item.\n * @param iterator The iterator to check for early exists.\n */\nexport type IteratorSource<T> = (iterator: Iterator<T>) => any;\n\n/**\n * A filter to apply duration iteration to only look at certain items when this\n * function returns `true`.\n *\n * @param item The item being iterated.\n * @returns `true` if the item should be iterated, otherwise `false`.\n */\nexport type IteratorFilter<T> = (item: T) => boolean;\n\n/**\n * An action to perform on the source as instructed by the iterator.\n */\nexport enum IteratorAction\n{\n  /**\n   * Continue iteration.\n   */\n  Continue,\n\n  /**\n   * Stop iteration.\n   */\n  Stop,\n\n  /**\n   * Remove the current item if possible, and continue iteration.\n   */\n  Remove,\n\n  /**\n   * Replace the current item with the provided value.\n   */\n  Replace\n}\n\n/**\n * A class that allows an iteratable source to be iterated any number of times\n * by providing the following functionality:\n *\n * - [[Iterator.isEmpty]]: Determines whether the source contains any items.\n * - [[Iterator.first]]: Gets the first item in the source.\n * - [[Iterator.count]]: Counds the number of items in the source.\n * - [[Iterator.list]]: Builds a list of the items in the source.\n * - [[Iterator.object]]: Builds an object of the items in the source.\n * - [[Iterator.reduce]]: Reduces the items in the source down to a single value.\n * - [[Iterator.purge]]: Removes items from the source which meet some criteria.\n * - [[Iterator.filter]]: Returns a subset of items that meet some criteria by\n *    returning a new Iterator.\n * - [[Iterator.map]]: Maps each item in the source to another item by returning\n *    a new Iterator.\n * - [[Iterator.iterate]]: Invokes a function for each item in the source.\n *\n * The following static functions exist to help iterate simple sources:\n *\n * - [[Iterator.forArray]]: Iterates an array, optionally reverse\n * - [[Iterator.forObject]]: Iterates the properties of an object, optionally\n *    just the properties explicitly set on the object.\n *\n * ```typescript\n * let iter = object.iterateThings();\n * iter.isEmpty();              // no items?\n * iter.isEmpty(d => d.flag);   // no items that meet some criteria?\n * iter.count();                // number of items\n * iter.count(d => d.flag);     // number of items that meet some criteria\n * iter.first();                // first item\n * iter.first(d => d.flag);     // first item that meets some criteria\n * iter.list();                 // get all items as array\n * iter.list(myArray);          // add all items to given array\n * iter.list([], d => d.flag);  // get all items as array that meet some criteria\n * iter.object(d => d.id);      // get all items as an object keyed by a value (ex: id)\n * iter.object(d => d.id, {},\n *    d => d.flag);             // get all items as an object keyed by a value where the item meets some criteria (ex: key id if flag is truthy)\n * iter.purge(d => d.flag);     // remove all items from source that meet some criteria\n * iter.filter(d => d.flag);    // returns an iterator which iterates a subset of items which meet some criteria\n * iter.reduce<number>(0,\n *   (d, t) => t + d.size);     // reduces all items to a single value (ex: sums all size)\n * iter.reduce<number>(0,\n *   (d, t) => t + d.size,\n *   d => d.flag);              // reduces all items to a single value (ex: sums all size) where the item meets some criteria\n * iter.map<S>(d => d.subitem); // return an iterator for subitems if they exist\n * iter.iterate(d => log(d));   // do something for each item\n * ```\n *\n * @typeparam T The type of item being iterated.\n */\nexport class Iterator<T>\n{\n\n  /**\n   * A result of the iteration passed to [[Iterator.stop]].\n   */\n  public result: any = null;\n\n  /**\n   * The last action (if any) called on this iterator.\n   */\n  public action: IteratorAction;\n\n  /**\n   * The value to replace with the current item.\n   */\n  public replaceWith: T;\n\n  /**\n   * The current callback passed to the iterator.\n   */\n  public callback: IteratorCallback<T, any>;\n\n  /**\n   * The source of iterable items. This allows the iteration over any type of\n   * structure. The source must call the callback for each item and its\n   * recommended that the source checks the [[Iterator.iterating]] flag after\n   * each callback invokation.\n   */\n  private source: IteratorSource<T>;\n\n  /**\n   * Creates a new Iterator given a source.\n   *\n   * @param source The source of items to iterator.\n   */\n  public constructor(source: IteratorSource<T>)\n  {\n    this.source = source;\n  }\n\n  /**\n   * Returns a clone of this iterator with the same source. This is necessary\n   * if you want to iterate all or a portion of the source while already\n   * iterating it (like a nested loop).\n   */\n  public clone(): Iterator<T>\n  {\n    return new Iterator<T>( this.source );\n  }\n\n  /**\n   * Passes the given item to the iterator callback and returns the action\n   * requested at this point in iteration.\n   *\n   * @param item The current item being iterated.\n   */\n  public act(item: T): IteratorAction\n  {\n    this.action = IteratorAction.Continue;\n    this.replaceWith = null;\n\n    this.callback( item, this );\n\n    return this.action;\n  }\n\n  /**\n   * Stops iteration and optionally sets the result of the iteration.\n   *\n   * @param result The result of the iteration.\n   */\n  public stop(result?: any): this\n  {\n    this.result = result;\n    this.action = IteratorAction.Stop;\n\n    return this;\n  }\n\n  /**\n   * Stops iteration and optionally sets the result of the iteration.\n   *\n   * @param result The result of the iteration.\n   */\n  public replace(replaceWith: T): this\n  {\n    this.replaceWith = replaceWith;\n    this.action = IteratorAction.Replace;\n\n    return this;\n  }\n\n  /**\n   * Signals to the iterator source that the current item wants to be removed.\n   */\n  public remove(): this\n  {\n    this.action = IteratorAction.Remove;\n\n    return this;\n  }\n\n  /**\n   * Determines with this iterator is empty. A filter function can be specified\n   * to only check for items which match certain criteria.\n   *\n   * @param filter A function to the checks items for certain criteria.\n   * @returns `true` if no valid items exist in the source.\n   */\n  public isEmpty(filter: IteratorFilter<T> = null): boolean\n  {\n    let empty: boolean = true;\n\n    this.iterate((item, iterator) =>\n    {\n      if (filter && !filter( item ))\n      {\n        return;\n      }\n\n      empty = false;\n      iterator.stop();\n    });\n\n    return empty;\n  }\n\n  /**\n   * Counts the number of items in the iterator. A filter function can be\n   * specified to only count items which match certain criteria.\n   *\n   * @param filter A function to count items for certain criteria.\n   * @returns The number of items in the source that optionally match the given\n   *    criteria.\n   */\n  public count(filter: IteratorFilter<T> = null): number\n  {\n    let total: number = 0;\n\n    this.iterate((item, iterator) =>\n    {\n      if (filter && !filter( item ))\n      {\n        return;\n      }\n\n      total++;\n    });\n\n    return total;\n  }\n\n  /**\n   * Returns the first item in the iterator. A filter function can be specified\n   * to only return the first item which matches certain criteria.\n   *\n   * @param filter A function to compare items to to match certain criteria.\n   * @returns The first item found that optonally matches the given criteria.\n   */\n  public first(filter: IteratorFilter<T> = null): T\n  {\n    let first: T = null;\n\n    this.iterate((item, iterator) =>\n    {\n      if (filter && !filter( item ))\n      {\n        return;\n      }\n\n      first = item;\n      iterator.stop();\n    });\n\n    return first;\n  }\n\n  /**\n   * Builds a list of items from the source. A filter function can be specified\n   * so the resulting list only contain items that match certain criteria.\n   *\n   * @param out The array to place the items in.\n   * @param filter The function which determines which items are added to the list.\n   * @returns The reference to `out` which has had items added to it which\n   *    optionally match the given criteria.\n   */\n  public list(out: T[] = [], filter: IteratorFilter<T> = null): T[]\n  {\n    this.iterate((item, iterator) =>\n    {\n      if (filter && !filter( item ))\n      {\n        return;\n      }\n\n      out.push( item );\n    });\n\n    return out;\n  }\n\n  /**\n   * Builds an object of items from the source keyed by a result returned by\n   * a `getKey` function.\n   *\n   * @param getKey The function which returns the key of the object.\n   * @param out The object to place the items in.\n   * @param filter The function which determines which items are set on the object.\n   * @returns The reference to `out` which has had items set to it which\n   *    optionally match the given criteria.\n   */\n  public object(getKey: (item: T) => any, out: any = {}, filter: IteratorFilter<T> = null): any\n  {\n    this.iterate((item, iterator) =>\n    {\n      if (filter && !filter( item ))\n      {\n        return;\n      }\n\n      let key = getKey( item );\n\n      out[ key ] = item;\n    });\n\n    return out;\n  }\n\n  /**\n   * Returns a new iterator that only returns a maximum number of items.\n   *\n   * @param amount The maximum number of items to return.\n   * @returns A new iterator which returns a maximum number of items.\n   */\n  public take(amount: number): Iterator<T>\n  {\n    return new Iterator<T>(next =>\n    {\n      this.iterate((item, prev) =>\n      {\n        switch (next.act( item ))\n        {\n          case IteratorAction.Stop:\n            prev.stop();\n            break;\n          case IteratorAction.Remove:\n            prev.remove();\n            break;\n          case IteratorAction.Replace:\n            prev.replace( next.replaceWith );\n            break;\n        }\n\n        if (--amount <= 0)\n        {\n          prev.stop();\n        }\n      });\n    });\n  }\n\n  /**\n   * Returns a new iterator that skips the given number of items from the items\n   * in this iterator.\n   *\n   * @param amount The number of items to skip.\n   * @returns A new iterator which skipped the given number of items.\n   */\n  public skip(amount: number): Iterator<T>\n  {\n    return new Iterator<T>(next =>\n    {\n      let skipped: number = 0;\n\n      this.iterate((item, prev) =>\n      {\n        if (skipped >= amount)\n        {\n          switch (next.act( item ))\n          {\n            case IteratorAction.Stop:\n              prev.stop();\n              break;\n            case IteratorAction.Remove:\n              prev.remove();\n              break;\n            case IteratorAction.Replace:\n              prev.replace( next.replaceWith );\n              break;\n          }\n        }\n\n        skipped++;\n      });\n    });\n  }\n\n  /**\n   * Returns a new iterator thats items are the items in this iterator followed\n   * by the items in the given iterators.\n   *\n   * @param iterators The iterators to append after this one.\n   * @returns A new iterator based on this iterator followed by the given.\n   */\n  public append(...iterators: Iterator<T>[]): Iterator<T>\n  {\n    return Iterator.join<T>( this, ...iterators );\n  }\n\n  /**\n   * Returns a new iterator thats items are the items in the given iterators\n   * followed by the items in this iterator.\n   *\n   * @param iterators The iterators to prepend before this one.\n   * @returns A new iterator based on the given iterators followed by this.\n   */\n  public prepend(...iterators: Iterator<T>[]): Iterator<T>\n  {\n    return Iterator.join<T>( ...iterators, this );\n  }\n\n  /**\n   * Removes items from the source that match certain criteria.\n   *\n   * @param filter The function which determines which items to remove.\n   */\n  public purge(filter: IteratorFilter<T>): this\n  {\n    this.iterate((item, iterator) =>\n    {\n      if (filter(item))\n      {\n        iterator.remove();\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Returns an iterator which takes items from this iterator and presents them\n   * in reverse.\n   *\n   * @returns A new iterator with the items in this iterator in reverse.\n   */\n  public reverse(): Iterator<T>\n  {\n    return new Iterator<T>(iterator =>\n    {\n      let items: T[] = this.list();\n      let modifies: boolean = false;\n      let actions: IteratorAction[] = [];\n      let replaces: T[] = [];\n\n      for (let i = items.length - 1; i >= 0; i--)\n      {\n        let item: T = items[ i ];\n        let action: IteratorAction = iterator.act( item );\n\n        if (action === IteratorAction.Stop)\n        {\n          break;\n        }\n\n        if (action !== IteratorAction.Continue)\n        {\n          modifies = true;\n\n          actions[ i ] = action;\n          replaces[ i ] = iterator.replaceWith;\n        }\n      }\n\n      if (modifies)\n      {\n        let index: number = 0;\n\n        this.iterate((item, iterator) =>\n        {\n          switch (actions[ index ])\n          {\n            case IteratorAction.Remove:\n              iterator.remove();\n              break;\n            case IteratorAction.Replace:\n              iterator.replace( replaces[ index ] );\n              break;\n          }\n\n          index++;\n        });\n      }\n    });\n  }\n\n  /**\n   * Reduces all the items in the source to a single value given the initial\n   * value and a function to convert an item and the current reduced value\n   */\n  public reduce<R>(initial: R, reducer: (item: T, reduced: R) => R, filter: IteratorFilter<T> = null): R\n  {\n    let reduced: R = initial;\n\n    this.iterate((item, iterator) =>\n    {\n      if (filter && !filter( item ))\n      {\n        return;\n      }\n\n      reduced = reducer( item, reduced );\n    });\n\n    return reduced;\n  }\n\n  /**\n   * Returns an iterator where this iterator is the source and the returned\n   * iterator is built on a subset of items which pass a `filter` function.\n   *\n   * @param filter The function which determines if an item should be iterated.\n   * @returns A new iterator for the filtered items from this iterator.\n   */\n  public filter(filter: IteratorFilter<T>): Iterator<T>\n  {\n    return new Iterator<T>(next =>\n    {\n      this.iterate((prevItem, prev) =>\n      {\n        if (filter(prevItem))\n        {\n          switch (next.act( prevItem ))\n          {\n            case IteratorAction.Stop:\n              prev.stop();\n              break;\n            case IteratorAction.Remove:\n              prev.remove();\n              break;\n            case IteratorAction.Replace:\n              prev.replace( next.replaceWith );\n              break;\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Returns an iterator where this iterator is the source and the returned\n   * iterator is built from mapped items pulled from items in the source\n   * of this iterator. If the given callback `outerCallback` does not return\n   * a mapped value then the returned iterator will not see the item. A filter\n   * function can be specified to only look at mapping items which match\n   * certain criteria.\n   *\n   * @param mapper The function which maps an item to another.\n   * @param filter The function which determines if an item should be mapped.\n   * @param unmapper The function which unmaps a value when replace is called.\n   * @returns A new iterator for the mapped items from this iterator.\n   */\n  public map<W>(mapper: IteratorCallback<T, W>,\n    filter: IteratorFilter<T> = null,\n    unmapper: (replaceWith: W, current: W, item: T) => T = null): Iterator<W>\n  {\n    return new Iterator<W>(next =>\n    {\n      this.iterate((prevItem, prev) =>\n      {\n        if (filter && !filter( prevItem ))\n        {\n          return;\n        }\n\n        let nextItem: W = mapper( prevItem, prev );\n\n        if (fn.isDefined( nextItem ))\n        {\n          switch (next.act( nextItem ))\n          {\n            case IteratorAction.Stop:\n              prev.stop();\n              break;\n            case IteratorAction.Remove:\n              prev.remove();\n              break;\n            case IteratorAction.Replace:\n              if (unmapper) {\n                prev.replace( unmapper( next.replaceWith, nextItem, prevItem ) );\n              }\n              break;\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Invokes the callback for each item in the source of this iterator. The\n   * second argument in the callback is the reference to this iterator and\n   * [[Iterator.stop]] can be called at anytime to cease iteration.\n   *\n   * @param callback The function to invoke for each item in this iterator.\n   */\n  public iterate(callback: IteratorCallback<T, any>): this\n  {\n    this.result = undefined;\n    this.callback = callback;\n    this.action = IteratorAction.Continue;\n    this.source( this );\n    this.callback = null;\n\n    return this;\n  }\n\n  /**\n   * Passes the result of the iteration to the given function if a truthy\n   * result was passed to [[Iterator.stop]].\n   *\n   * @param getResult The function to pass the result to if it exists.\n   */\n  public withResult(getResult: (result: any) => any): this\n  {\n    if (this.result)\n    {\n      getResult( this.result );\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns an iterator for the given array optionally iterating it in reverse.\n   *\n   * @param items The array of items to iterate.\n   * @param reverse If the array should be iterated in reverse.\n   * @returns A new iterator for the given array.\n   */\n  public static forArray<T>(items: T[], reverse: boolean = false): Iterator<T>\n  {\n    return new Iterator<T>(iterator =>\n    {\n      if (reverse)\n      {\n        for (let i = items.length - 1; i >= 0; i--)\n        {\n          switch (iterator.act(items[ i ]))\n          {\n            case IteratorAction.Stop:\n              return;\n            case IteratorAction.Remove:\n              items.splice(i, 1);\n              break;\n            case IteratorAction.Replace:\n              items.splice(i, 1, iterator.replaceWith);\n              break;\n          }\n        }\n      }\n      else\n      {\n        for (let i = 0; i < items.length; i++)\n        {\n          switch (iterator.act(items[ i ]))\n          {\n            case IteratorAction.Stop:\n              return;\n            case IteratorAction.Remove:\n              items.splice(i, 1);\n              i--;\n              break;\n            case IteratorAction.Replace:\n              items.splice(i, 1, iterator.replaceWith);\n              break;\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Returns an iterator for the given object optionally checking the\n   * `hasOwnProperty` function on the given object.\n   *\n   * @param items The object to iterate.\n   * @param hasOwnProperty If `hasOwnProperty` should be checked.\n   * @returns A new iterator for the given object.\n   */\n  public static forObject<T>(items: { [key: string]: T }, hasOwnProperty: boolean = true): Iterator<T>\n  {\n    return new Iterator<T>(iterator =>\n    {\n      for (let key in items)\n      {\n        if (hasOwnProperty && !items.hasOwnProperty( key ))\n        {\n          continue;\n        }\n\n        switch (iterator.act(items[ key ]))\n        {\n          case IteratorAction.Stop:\n            return;\n          case IteratorAction.Remove:\n            delete items[ key ];\n            break;\n          case IteratorAction.Replace:\n            items[ key ] = iterator.replaceWith;\n            break;\n        }\n      }\n    });\n  }\n\n  /**\n   * Joins all the given iterators into a single iterator where the items\n   * returned are in the same order as passed to this function. If any items\n   * are removed from the returned iterator they will be removed from the given\n   * iterator if it supports removal.\n   *\n   * @param iterators The array of iterators to join as one.\n   * @returns A new iterator for the given iterators.\n   */\n  public static join<T>(...iterators: Iterator<T>[]): Iterator<T>\n  {\n    return new Iterator<T>(parent =>\n    {\n      for (let child of iterators)\n      {\n        child.iterate((item, childIterator) =>\n        {\n          switch (parent.act( item ))\n          {\n            case IteratorAction.Remove:\n              childIterator.remove();\n              break;\n            case IteratorAction.Stop:\n              childIterator.stop();\n              break;\n            case IteratorAction.Replace:\n              childIterator.replace( parent.replaceWith );\n              break;\n          }\n        });\n\n        if (child.action === IteratorAction.Stop)\n        {\n          return;\n        }\n      }\n    });\n  }\n\n  /**\n   * Returns a new iterator with no items.\n   *\n   * @returns A new iterator with no items.\n   */\n  public static empty<T>(): Iterator<T>\n  {\n    return new Iterator<T>(parent => {});\n  }\n\n}\n","\nimport { Functions as fn } from './Functions';\nimport { Day, DayProperty } from './Day';\nimport { Suffix } from './Suffix';\nimport { Weekday } from './Weekday';\nimport { FrequencyValueEvery, FrequencyValue } from './Frequency';\nimport { Schedule, ScheduleInput } from './Schedule';\n\n\n/**\n * Describes a [[Pattern]] given a [[Day]] to base it on.\n *\n * @param day The day to base the description on.\n * @returns The description of the pattern.\n */\nexport type DescribePattern = (day: Day) => string;\n\n/**\n * A rule helps parse [[ScheduleInput]] and determines whether it matches the\n * given pattern.\n *\n * - When a number is given, the input MUST be an array of the same length and contain any values.\n * - When an array of numbers is given, the input MUST be an array containing the same values.\n * - When a TRUE is given the input MUST contain that property and can be any value.\n * - When a FALSE is given the input MAY contain that property (optional).\n * - When a property is NOT specified, the input MUST NOT contain that property.\n * - When an object with every is given, the input must match the every and offset values (have the same frequency).\n */\nexport type PatternRule =\n  number |                // has array with this number of elements\n  number[] |              // is array with same values\n  boolean |               // is true or false\n  FrequencyValueEvery;    // is object with matching every and offset\n\n/**\n * The set of rules you can specify for determining if a [[ScheduleInput]]\n * matches a pattern.\n */\nexport interface PatternRules\n{\n  dayOfWeek?: PatternRule;\n  dayOfMonth?: PatternRule;\n  lastDayOfMonth?: PatternRule;\n  dayOfYear?: PatternRule;\n  month?: PatternRule;\n  week?: PatternRule;\n  year?: PatternRule;\n  weekOfYear?: PatternRule;\n  weekspanOfYear?: PatternRule;\n  fullWeekOfYear?: PatternRule;\n  lastWeekspanOfYear?: PatternRule;\n  lastFullWeekOfYear?: PatternRule;\n  weekOfMonth?: PatternRule;\n  weekspanOfMonth?: PatternRule;\n  fullWeekOfMonth?: PatternRule;\n  lastWeekspanOfMonth?: PatternRule;\n  lastFullWeekOfMonth?: PatternRule;\n}\n\n\n/**\n * A class which helps describe [[ScheduleInput]] if it matches a pattern.\n */\nexport class Pattern\n{\n\n  /**\n   * The properties in the [[ScheduleInput]] which are compared against the\n   * rules of a pattern.\n   */\n  public static PROPS: DayProperty[] =\n  [\n    'dayOfWeek', 'dayOfMonth', 'lastDayOfMonth', 'dayOfYear',\n    'month', 'week', 'year',\n    'weekOfYear', 'weekspanOfYear', 'fullWeekOfYear', 'lastWeekspanOfYear', 'lastFullWeekOfYear',\n    'weekOfMonth', 'weekspanOfMonth', 'fullWeekOfMonth', 'lastWeekspanOfMonth', 'lastFullWeekOfMonth'\n  ];\n\n  /**\n   * Whether this pattern should be \"listed\" or not. Visual schedulers may\n   * provide a shortcut to describing and changing a [[Schedule]] through\n   * patterns and any pattern where listed is `true` could be an option in a\n   * list. The default patterns are all listed.\n   */\n  public listed: boolean;\n\n  /**\n   * The function which describes this pattern given a [[Day]] to base it on.\n   */\n  public describe: DescribePattern;\n\n  /**\n   * The name of this pattern. This is not typically displayed to a user, just\n   * to uniquely identify a pattern.\n   */\n  public name: string;\n\n  /**\n   * The rules for matching a pattern to a [[Schedule]] or applying a pattern to\n   * a schedule.\n   */\n  public rules: PatternRules;\n\n\n  /**\n   * Creates a new pattern.\n   *\n   * @param name The unique name of the pattern.\n   * @param listed If the pattern is \"listed\" [[Pattern.listed]].\n   * @param describe A function to describe the pattern given a [[Day]].\n   * @param rules The rules which describe how to detect and apply the pattern\n   *    to schedule input.\n   */\n  public constructor(name: string, listed: boolean, describe: DescribePattern, rules: PatternRules)\n  {\n    this.name = name;\n    this.listed = listed;\n    this.describe = describe;\n    this.rules = rules;\n  }\n\n  /**\n   * Applies this pattern to a [[Schedule]] or [[ScheduleInput]] removing and\n   * adding any necessary properties from the input to match this pattern -\n   * based around the day provided.\n   *\n   * @param schedule The schedule to update to match this pattern.\n   * @param day The day to base the schedule on.\n   * @returns The reference to the input passed in.\n   */\n  public apply<M, I extends ScheduleInput<M> | Schedule<M>>(schedule: I, day: Day): I\n  {\n    if (schedule instanceof Schedule)\n    {\n      this.applyGeneric(day,\n        (prop, frequency) => schedule.setFrequency( prop, frequency ),\n        (prop) => schedule.setFrequency( prop )\n      );\n\n      schedule.updateChecks();\n    }\n    else\n    {\n      this.applyGeneric(day,\n        (prop, frequency) => schedule[ prop ] = frequency,\n        (prop) => delete schedule[ prop ]\n      );\n    }\n\n    return schedule;\n  }\n\n  /**\n   * Applies this pattern to any object provided they implement the\n   * `setFrequency` and `removeFrequency` functions.\n   *\n   * @param day The day to base the schedule on.\n   * @param setFrequency The function which sets the frequency on the object.\n   * @param removeFrequency The function to remove a frequency from the object.\n   */\n  public applyGeneric(day: Day,\n    setFrequency: (property: DayProperty, frequency: any) => any,\n    removeFrequency: (property: DayProperty) => any): void\n  {\n    for (let prop of Pattern.PROPS)\n    {\n      let rule = this.rules[ prop ];\n\n      // Should have one value\n      if (rule === 1)\n      {\n        setFrequency( prop, [day[ prop ]] );\n      }\n\n      // Can be any of the values in the array\n      if (fn.isArray(rule))\n      {\n        setFrequency( prop, rule );\n      }\n\n      // Must not be present\n      if (!fn.isDefined(rule))\n      {\n        removeFrequency( prop );\n      }\n    }\n  }\n\n  /**\n   * Determines whether the given [[Schedule]] or [[ScheduleInput]] matches this\n   * pattern. Optionally a day can be provided to make sure the day matches the\n   * schedule and pattern together.\n   *\n   * @param schedule The schedule input to test.\n   * @param exactlyWith A day to further validate against for matching.\n   * @returns `true` if the schedule was a match to this pattern with the\n   *    day if one was provided, otherwise `false`.\n   */\n  public isMatch<M, I extends ScheduleInput<M> | Schedule<M>>(schedule: I, exactlyWith?: Day): boolean\n  {\n    if (schedule instanceof Schedule)\n    {\n      return this.isMatchGeneric((prop) => schedule[ prop ].input, exactlyWith);\n    }\n    else\n    {\n      return this.isMatchGeneric((prop) => schedule[ prop ], exactlyWith);\n    }\n  }\n\n  /**\n   * Determines whether the given input matches this pattern. Optionally a day\n   * can be provided to make sure the day matches the schedule and pattern\n   * together.\n   *\n   * @param input The schedule input to test.\n   * @param exactlyWith A day to further validate against for matching.\n   * @returns `true` if the schedule input was a match to this pattern with the\n   *    day if one was provided, otherwise `false`.\n   */\n  public isMatchGeneric(getFrequency: (property: DayProperty) => FrequencyValue, exactlyWith?: Day): boolean\n  {\n    let exactly: boolean = fn.isDefined( exactlyWith );\n\n    for (let prop of Pattern.PROPS)\n    {\n      let rule = this.rules[ prop ];\n      let curr = getFrequency( prop );\n\n      // Optional, skip it\n      if (rule === false)\n      {\n        continue;\n      }\n\n      // Requires any value\n      if (rule === true && !curr)\n      {\n        return false;\n      }\n\n      // Must not be present\n      if (!fn.isDefined(rule) && curr)\n      {\n        return false;\n      }\n\n      // Must be an array of the same size\n      if (fn.isNumber(rule))\n      {\n        if (fn.isArray(curr) && (<number[]>curr).length === rule)\n        {\n          if (exactly && (<number[]>curr).indexOf( <number>exactlyWith[ prop ] ) === -1)\n          {\n            return false;\n          }\n        }\n        else\n        {\n          return false;\n        }\n      }\n\n      // Must be an array of the same values\n      if (fn.isArray(rule))\n      {\n        if (!fn.isArray(curr))\n        {\n          return false;\n        }\n\n        if (rule.length !== (<number[]>curr).length)\n        {\n          return false;\n        }\n\n        for (var i = 0; i < rule.length; i++)\n        {\n          if (rule[ i ] !== curr[ i ])\n          {\n            return false;\n          }\n        }\n\n        if (exactly && rule.indexOf( exactlyWith[ prop ] ) === -1)\n        {\n          return false;\n        }\n      }\n\n      // Must be an object with same over & offset.\n      if (fn.isObject(rule))\n      {\n        if (!fn.isObject(curr))\n        {\n          return false;\n        }\n\n        var ruleOffset = rule.offset || 0;\n        var currOffset = (<FrequencyValueEvery>curr).offset || 0;\n\n        if (currOffset !== ruleOffset || curr.every !== rule.every)\n        {\n          return false;\n        }\n\n        if (exactly && (<number>exactlyWith[ prop ] % rule.every) !== ruleOffset)\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the pattern with the given name if one exists. If you add your own\n   * patterns make sure to add them to [[PatternMap]].\n   *\n   * @param name The name of the pattern to return.\n   * @return The instance to the pattern with the same name.\n   */\n  public static withName(name: string): Pattern\n  {\n    return PatternMap[ name ];\n  }\n\n  /**\n   * Finds a matching pattern to the given input searching through [[Patterns]]\n   * for matches. Optionally it will only look at patterns where listed = `true`.\n   *\n   * @param input The schedule input to use.\n   * @param listedOnly When `true` only patterns with [[Pattern.listed]] set to\n   *    `true` will be looked at, otherwise all patterns are looked at.\n   * @param exactlyWith  A day to further validate against for matching.\n   * @see [[Pattern.isMatch]]\n   */\n  public static findMatch<M, I extends ScheduleInput<M> | Schedule<M>>(input: I, listedOnly: boolean = true, exactlyWith?: Day): Pattern\n  {\n    for (let pattern of Patterns)\n    {\n      if ((pattern.listed || !listedOnly) && pattern.isMatch<M, I>( input, exactlyWith ))\n      {\n        return pattern;\n      }\n    }\n\n    return null;\n  }\n\n}\n\n\n/**\n * The list of patterns that can be searched through for matches to schedule\n * input.\n *\n * @see [[Pattern.findMatch]]\n */\nexport let Patterns: Pattern[] = [\n  new Pattern(\n    'none', true,\n    (day: Day) => 'Does not repeat',\n    {\n      year: 1,\n      month: 1,\n      dayOfMonth: 1\n    }\n  ),\n  new Pattern(\n    'daily', true,\n    (day: Day) => 'Daily',\n    {\n\n    }\n  ),\n  new Pattern(\n    'weekly', true,\n    (day: Day) =>  'Weekly on ' + day.format('dddd'),\n    {\n      dayOfWeek: 1\n    }\n  ),\n  new Pattern(\n    'monthlyWeek', true,\n    (day: Day) => 'Monthly on the ' + Suffix.CACHE[day.weekspanOfMonth + 1] + ' ' + day.format('dddd'),\n    {\n      dayOfWeek: 1,\n      weekspanOfMonth: 1\n    }\n  ),\n  new Pattern(\n    'annually', true,\n    (day: Day) => 'Annually on ' + day.format('MMMM Do'),\n    {\n      month: 1,\n      dayOfMonth: 1\n    }\n  ),\n  new Pattern(\n    'annuallyMonthWeek', true,\n    (day: Day) => 'Annually on the ' + Suffix.CACHE[day.weekspanOfMonth + 1] + ' ' + day.format('dddd') + ' of ' + day.format('MMMM'),\n    {\n      month: 1,\n      dayOfWeek: 1,\n      weekspanOfMonth: 1\n    }\n  ),\n  new Pattern(\n    'weekday', true,\n    (day: Day) => 'Every weekday (Monday to Friday)',\n    {\n      dayOfWeek: [Weekday.MONDAY, Weekday.TUESDAY, Weekday.WEDNESDAY, Weekday.THURSDAY, Weekday.FRIDAY]\n    }\n  ),\n  new Pattern(\n    'monthly', true,\n    (day: Day) => 'Monthly on the ' + day.format('Do') + ' day',\n    {\n      dayOfMonth: 1\n    }\n  ),\n  new Pattern(\n    'custom', true,\n    (day: Day) => 'Custom...',\n    {\n      dayOfWeek: false,\n      dayOfMonth: false,\n      lastDayOfMonth: false,\n      dayOfYear: false,\n      year: false,\n      month: false,\n      week: false,\n      weekOfYear: false,\n      weekspanOfYear: false,\n      fullWeekOfYear: false,\n      lastWeekspanOfYear: false,\n      lastFullWeekOfYear: false,\n      weekOfMonth: false,\n      weekspanOfMonth: false,\n      fullWeekOfMonth: false,\n      lastWeekspanOfMonth: false,\n      lastFullWeekOfMonth: false\n    }\n  )\n];\n\n/**\n * The map of patterns keyed by their name.\n *\n * @see [[Pattern.withName]]\n */\nexport let PatternMap: { [name: string]: Pattern } = {};\n\nfor (let pattern of Patterns)\n{\n  PatternMap[ pattern.name ] = pattern;\n}\n","\nimport { Functions as fn } from './Functions';\nimport { Identifier, IdentifierInput } from './Identifier';\nimport { Day } from './Day';\nimport { Time } from './Time';\nimport { DaySpan } from './DaySpan';\nimport { Iterator, IteratorAction } from './Iterator';\n\n\n/**\n * A map of values in the [[ScheduleModifier]] keyed by the descriptions of the\n * identifiers.\n */\nexport interface ScheduleModifierDescription<T>\n{\n  [description: string]: T\n}\n\n/**\n * An object which carries the span taken from an identifier and the value\n * mapped to it in a [[ScheduleModifier]].\n */\nexport interface ScheduleModifierSpan<T>\n{\n  span: DaySpan,\n  value: T\n}\n\n/**\n * A class that can modify the events of a schedule by storing [[Identifier]]s\n * and an associated value.\n *\n * @typeparam T The type of data that modifies the schedule.\n */\nexport class ScheduleModifier<T>\n{\n\n  /**\n   * The map of values mapped by their [[Identifier]]s.\n   */\n  public map: { [id: string]: T };\n\n\n  /**\n   * Creates a new schedule modifier.\n   */\n  public constructor()\n  {\n    this.map = {};\n  }\n\n  /**\n   * Clears the modifier of all modifications.\n   */\n  public clear(): this\n  {\n    this.map = {};\n\n    return this;\n  }\n\n  /**\n   * Returns `true` if this modifier lacks any modifications, otherwise `false`.\n   */\n  public isEmpty(): boolean\n  {\n    // @ts-ignore\n    for (let id in this.map)\n    {\n      return !id;\n    }\n\n    return true;\n  }\n\n  /**\n   * Gets the most specific value in this modifier for the given day, if none\n   * exists `otherwise` is returned. A modifier can have multiple values for a\n   * given day because [[Identifier]]s represent a span of time.\n   *\n   * @param day The day to get a value for.\n   * @param otherwise What to return if no value exists for the given day.\n   * @param lookAtTime If the specific time of the given day should be looked at.\n   * @returns The most specific value for the given day, or `otherwise`.\n   */\n  public get(day: Day, otherwise: T, lookAtTime: boolean = true): T\n  {\n    let map = this.map;\n\n    return (lookAtTime && map[ day.timeIdentifier ]) ||\n      map[ day.dayIdentifier ] ||\n      map[ day.monthIdentifier ] ||\n      map[ day.weekIdentifier ] ||\n      map[ day.quarterIdentifier ] ||\n      otherwise;\n  }\n\n  /**\n   * Gets the most specific identifier type for the span over the given day.\n   * If the day does not have a modification, `null` is returned.\n   *\n   * @param day The day to get the type for.\n   * @param lookAtTime If the specific time of the given day should be looked at.\n   * @returns The most specific identifier for the given day, otherwise `null`.\n   */\n  public getIdentifier(day: Day, lookAtTime: boolean = true): Identifier\n  {\n    let map = this.map;\n\n    if (lookAtTime && fn.isDefined( map[ day.timeIdentifier ] )) return Identifier.Time;\n    if (fn.isDefined( map[ day.dayIdentifier ] )) return Identifier.Day;\n    if (fn.isDefined( map[ day.monthIdentifier ] )) return Identifier.Month;\n    if (fn.isDefined( map[ day.weekIdentifier ] )) return Identifier.Week;\n    if (fn.isDefined( map[ day.quarterIdentifier ] )) return Identifier.Quarter;\n    if (fn.isDefined( map[ day.year ] )) return Identifier.Year;\n\n    return null;\n  }\n\n  /**\n   * Gets all values in this modifier for the given day. If none exist, an empty\n   * array is returned. The values returned in the array are returned in most\n   * specific to least specific.\n   *\n   * @param day The day to get the values for.\n   * @returns An array of values (modifications) for the given day.\n   */\n  public getAll(day: Day): T[]\n  {\n    let map = this.map;\n    let all: T[] = [];\n\n    if (map[ day.timeIdentifier ]) all.push( map[ day.timeIdentifier ] );\n    if (map[ day.dayIdentifier ]) all.push( map[ day.dayIdentifier ] );\n    if (map[ day.monthIdentifier ]) all.push( map[ day.monthIdentifier ] );\n    if (map[ day.weekIdentifier ]) all.push( map[ day.weekIdentifier ] );\n    if (map[ day.quarterIdentifier ]) all.push( map[ day.quarterIdentifier ] );\n\n    return all;\n  }\n\n  /**\n   * Moves the value/modification from one identifier to another.\n   *\n   * @param from The day to take the identifier from.\n   * @param fromType The identifier type.\n   * @param to The day to move the value to.\n   * @param toType The identifier type to move the value to.\n   */\n  public move(from: Day, fromType: Identifier, to: Day, toType: Identifier): this\n  {\n    let fromIdentifier = fromType.get( from );\n    let toIdentifier = toType.get( to );\n\n    this.map[ toIdentifier ] = this.map[ fromIdentifier ];\n\n    delete this.map[ fromIdentifier ];\n\n    return this;\n  }\n\n  /**\n   * Moves any identifiers with the matching time `fromTime` to `toTime` and\n   * returns the number of moves.\n   *\n   * @param fromTime The time to move from.\n   * @param toTime The time to move to.\n   * @returns The number of modifiers moved.\n   */\n  public moveTime(fromTime: Time, toTime: Time): number\n  {\n    let type: Identifier = Identifier.Time;\n    let moveIds: IdentifierInput[] = [];\n\n    this.iterate().iterate(([id, value]) =>\n    {\n      if (type.is( id ))\n      {\n        let start: Day = type.start( id );\n\n        if (start.sameTime( fromTime ))\n        {\n          moveIds.push( id );\n        }\n      }\n    });\n\n    let moved: number = 0;\n\n    for (let id of moveIds)\n    {\n      let value: T = this.map[ id ];\n      let start: Day = type.start( id );\n      let newStart: Day = start.withTime( toTime );\n      let newId: IdentifierInput = type.get( newStart );\n\n      if (!this.map[ newId ])\n      {\n        this.map[ newId ] = value;\n        delete this.map[ id ];\n        moved++;\n      }\n    }\n\n    return moved;\n  }\n\n  /**\n   * Removes any identifiers and modifications that are at the given time.\n   *\n   * @param time The time to remove.\n   * @returns The number of modifiers removed.\n   */\n  public removeTime(time: Time): number\n  {\n    let type: Identifier = Identifier.Time;\n    let removed: number = 0;\n\n    this.iterate().iterate(([id,], iterator) =>\n    {\n      if (type.is( id ))\n      {\n        let start: Day = type.start( id );\n\n        if (start.sameTime( time ))\n        {\n          iterator.remove();\n          removed++;\n        }\n      }\n    });\n\n    return removed;\n  }\n\n  /**\n   * Sets the value/modification in this map given a day, the value, and the\n   * identifier type.\n   *\n   * @param day The day to take an identifier from.\n   * @param value The value/modification to set.\n   * @param type The identifier type.\n   */\n  public set(day: Day, value: T, type: Identifier): this\n  {\n    this.map[ type.get( day ) ] = value;\n\n    return this;\n  }\n\n  /**\n   * Removes the value/modification from this modifier based on the identifier\n   * pulled from the day.\n   *\n   * @param day The day to take an identifier from.\n   * @param type The identifier type.\n   */\n  public unset(day: Day, type: Identifier): this\n  {\n    delete this.map[ type.get( day ) ];\n\n    return this;\n  }\n\n  /**\n   * Iterates through the modifiers passing the identifier and the related value.\n   *\n   * @returns A new instance of an [[Iterator]].\n   */\n  public iterate(): Iterator<[IdentifierInput, T]>\n  {\n    return new Iterator<[IdentifierInput, T]>(iterator =>\n    {\n      let map = this.map;\n\n      for (let rawId in map)\n      {\n        let asNumber: number = parseInt( rawId );\n        let validAsNumber: boolean = asNumber + '' === rawId;\n        let id: IdentifierInput = validAsNumber ? asNumber : rawId;\n\n        switch (iterator.act([id, map[ rawId ]]))\n        {\n          case IteratorAction.Stop:\n            return;\n          case IteratorAction.Remove:\n            delete map[ rawId ];\n            break;\n        }\n      }\n    });\n  }\n\n  /**\n   * Queries the modifier for all values/modifications which fall in the time\n   * span that the given identifier represents. All identifiers and their value\n   * are passed to the given callback.\n   *\n   * @param prefix The identifier\n   * @returns A new instance of an [[Iterator]].\n   */\n  public query(query: IdentifierInput): Iterator<[IdentifierInput, T]>\n  {\n    return this.iterate()\n      .filter(([id, value]) => Identifier.contains( query, id ));\n    ;\n  }\n\n  /**\n   * Returns all identifiers stored in this modifier.\n   */\n  public identifiers(filter?: (value: T, id: IdentifierInput) => boolean): Iterator<IdentifierInput>\n  {\n    return this.iterate()\n      .filter(([id, value]) => !filter || filter( value, id ))\n      .map<IdentifierInput>(([id, ]) => id)\n    ;\n  }\n\n  /**\n   * Builds a list of spans and the associated values. The spans are calculated\n   * from the identiier key via [[Identifier.span]].\n   *\n   * @param endInclusive If the end date in the spans should be the last\n   *    millisecond of the timespan or the first millisecond of the next.\n   * @returns An array of spans calculated from the identifiers with the\n   *    associated values/modifications.\n   */\n  public spans(endInclusive: boolean = false): Iterator<ScheduleModifierSpan<T>>\n  {\n    return this.iterate()\n      .map(([id, value]) =>\n      {\n        let type: Identifier = Identifier.find(id);\n\n        if (type)\n        {\n          let span = type.span( id, endInclusive );\n\n          return { span, value };\n        }\n      })\n    ;\n  }\n\n  /**\n   * Builds a list of the descriptions of the identifiers in this modifier.\n   *\n   * @param short If the description should use shorter language or longer.\n   * @returns The built list of descriptions.\n   */\n  public describe(short: boolean = false): Iterator<string>\n  {\n    return this.iterate()\n      .map<string>( ([id, ]) =>\n      {\n        let type: Identifier = Identifier.find( id );\n\n        if (type)\n        {\n          return type.describe( id, short );\n        }\n      })\n    ;\n  }\n\n  /**\n   * Builds a map of the values/modifications keyed by the descripton of the\n   * identifier computed via [[Identifier.describe]].\n   *\n   * @param short If the description should use shorter language or longer.\n   * @returns The built map of description to values/modifications.\n   */\n  public describeMap(short: boolean = false): ScheduleModifierDescription<T>\n  {\n    let map = this.map;\n    let out: ScheduleModifierDescription<T> = {};\n\n    for (let id in map)\n    {\n      let type: Identifier = Identifier.find(id);\n\n      if (type)\n      {\n        out[ type.describe( id, short ) ] = map[ id ];\n      }\n    }\n\n    return out;\n  }\n\n}\n","\nimport { Functions as fn } from './Functions';\nimport { FrequencyValue, FrequencyCheck, FrequencyValueEvery, FrequencyValueOneOf } from './Frequency';\nimport { Day, DayInput, DurationInput, DayProperty } from './Day';\nimport { Identifier, IdentifierInput } from './Identifier';\nimport { DaySpan } from './DaySpan';\nimport { Constants } from './Constants';\nimport { Parse } from './Parse';\nimport { Time, TimeInput } from './Time';\nimport { Suffix } from './Suffix';\nimport { ScheduleModifier, ScheduleModifierSpan } from './ScheduleModifier';\nimport { Units } from './Units';\nimport { Iterator, IteratorAction } from './Iterator';\n\n// @ts-ignore\nimport * as moment from 'moment';\n\n\n/**\n * A tuple which identifies an event on the schedule. The tuple contains the\n * total span of the event occurrence, the day of the event (could be the start\n * day, end day, or any days in between for multi-day events) as well as the\n * identifier for the event.\n */\nexport type ScheduleEventTuple = [DaySpan, Day, IdentifierInput];\n\n/**\n * Input given by a user which describes an event schedule.\n *\n * @typeparam M The type of metadata stored in the schedule.\n */\nexport interface ScheduleInput<M>\n{\n\n  /**\n   * @see [[Schedule.start]]\n   */\n  start?: DayInput;\n\n  /**\n   * @see [[Schedule.end]]\n   */\n  end?: DayInput;\n\n  /**\n   * A shortcut to setting the [[Schedule.start]], [[Schedule.end]],\n   * [[Schedule.year]], [[Schedule.month]], and [[Schedule.dayOfMonth]].\n   */\n  on?: DayInput;\n\n  /**\n   * @see [[Schedule.times]]\n   */\n  times?: TimeInput[];\n\n  /**\n   * @see [[Schedule.duration]]\n   */\n  duration?: number;\n\n  /**\n   * @see [[Schedule.durationUnit]]\n   */\n  durationUnit?: DurationInput;\n\n  /**\n   * An array of days or identifiers which should be excluded from the schedule.\n   *\n   * @see [[Schedule.exclude]]\n   */\n  exclude?: (Day | IdentifierInput)[];\n\n  /**\n   * An array of days or identifiers which should be included in the schedule.\n   *\n   * @see [[Schedule.include]]\n   */\n  include?: (Day | IdentifierInput)[];\n\n  /**\n   * An array of days or identifiers which should be canceled in the schedule.\n   *\n   * @see [[Schedule.cancel]]\n   */\n  cancel?: (Day | IdentifierInput)[];\n\n  /**\n   * @see [[Schedule.meta]]\n   */\n  meta?: { [identifier: string]: M };\n\n  /**\n   * @see [[Schedule.month]]\n   */\n  month?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.year]]\n   */\n  year?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.week]]\n   */\n  week?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.dayOfWeek]]\n   */\n  dayOfWeek?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.dayOfMonth]]\n   */\n  dayOfMonth?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.lastDayOfMonth]]\n   */\n  lastDayOfMonth?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.dayOfYear]]\n   */\n  dayOfYear?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.weekOfYear]]\n   */\n  weekOfYear?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.weekspanOfYear]]\n   */\n  weekspanOfYear?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.fullWeekOfYear]]\n   */\n  fullWeekOfYear?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.lastWeekspanOfYear]]\n   */\n  lastWeekspanOfYear?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.lastFullWeekOfYear]]\n   */\n  lastFullWeekOfYear?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.weekOfMonth]]\n   */\n  weekOfMonth?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.weekspanOfMonth]]\n   */\n  weekspanOfMonth?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.fullWeekOfMonth]]\n   */\n  fullWeekOfMonth?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.lastWeekspanOfMonth]]\n   */\n  lastWeekspanOfMonth?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.lastFullWeekOfMonth]]\n   */\n  lastFullWeekOfMonth?: FrequencyValue;\n\n  /**\n   * The function to parse metadata with.\n   */\n  parseMeta?: (input: any) => M;\n}\n\n\n/**\n * A class which describes when an event occurs over what time and if it repeats.\n *\n * @typeparam M The type of metadata stored in the schedule.\n */\nexport class Schedule<M>\n{\n\n  /**\n   * The earliest an event can occur in the schedule, or `null` if there are no\n   * restrictions when the earliest event can occur. This day is inclusive.\n   */\n  public start: Day;\n\n  /**\n   * The latest an event can occur in the schedule, or `null` if there are no\n   * restrictions when the latest event can occur. This day is inclusive.\n   */\n  public end: Day;\n\n  /**\n   * The length of events in this schedule.\n   */\n  public duration: number;\n\n  /**\n   * The unit which describes the duration of the event.\n   */\n  public durationUnit: DurationInput;\n\n  /**\n   * The times at which the events occur on the days they should. If there are\n   * no times specified its assumed to be an all day event - potentially over\n   * multiple days or weeks based on [[Schedule.duration]] and\n   * [[Schedule.durationUnit]].\n   */\n  public times: Time[];\n\n  /**\n   * The number of days an event in this schedule lasts PAST the starting day.\n   * If this is a full day event with a duration greater than zero this value\n   * will be greater than one. If this event occurs at a specific time with a\n   * given duration that is taken into account and if it passes over into the\n   * next day this value will be greater than one. This value is used to look\n   * back in time when trying to figure out what events start or overlap on a\n   * given day.\n   */\n  public durationInDays: number;\n\n  /**\n   * A set of identifiers which mark what days or times are excluded on the\n   * schedule. This typically represents the set of event occurrences removed.\n   */\n  public exclude: ScheduleModifier<boolean>;\n\n  /**\n   * A set of identifiers which mark what days or times are included outside\n   * the normal series of days on the schedule. This typically represents\n   * an event occurrence which is moved so its added to the exclude and include\n   * sets.\n   */\n  public include: ScheduleModifier<boolean>;\n\n  /**\n   * A set of identifiers which mark what days, times, weeks, months, etc that\n   * should have all event occurrences cancelled.\n   */\n  public cancel: ScheduleModifier<boolean>;\n\n  /**\n   * A map of metadata keyed by an identifier. The metadata is placed in\n   * [[CalendarEvent]].\n   */\n  public meta: ScheduleModifier<M>;\n\n  /**\n   * How frequent the event occurs based on [[Day.dayOfWeek]].\n   */\n  public dayOfWeek: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.dayOfMonth]].\n   */\n  public dayOfMonth: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.lastDayOfMonth]].\n   */\n  public lastDayOfMonth: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.dayOfYear]].\n   */\n  public dayOfYear: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.month]].\n   */\n  public month: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.week]].\n   */\n  public week: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.weekOfYear]].\n   */\n  public weekOfYear: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.weekspanOfYear]].\n   */\n  public weekspanOfYear: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.fullWeekOfYear]].\n   */\n  public fullWeekOfYear: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.lastWeekspanOfYear]].\n   */\n  public lastWeekspanOfYear: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.lastFullWeekOfYear]].\n   */\n  public lastFullWeekOfYear: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.weekOfMonth]].\n   */\n  public weekOfMonth: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.weekspanOfMonth]].\n   */\n  public weekspanOfMonth: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.fullWeekOfMonth]].\n   */\n  public fullWeekOfMonth: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.lastWeekspanOfMonth]].\n   */\n  public lastWeekspanOfMonth: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.lastFullWeekOfMonth]].\n   */\n  public lastFullWeekOfMonth: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.year]].\n   */\n  public year: FrequencyCheck;\n\n  /**\n   * The array of frequency functions which had valid frequencies.\n   *\n   * @see [[FrequencyCheck.given]]\n   */\n  public checks: FrequencyCheck[];\n\n\n  /**\n   * Creates a schedule based on the given input.\n   *\n   * @param input The input which describes the schedule of events.\n   */\n  public constructor(input?: ScheduleInput<M>)\n  {\n    this.exclude = new ScheduleModifier<boolean>();\n    this.include = new ScheduleModifier<boolean>();\n    this.cancel = new ScheduleModifier<boolean>();\n    this.meta = new ScheduleModifier<M>();\n\n    if (fn.isDefined(input))\n    {\n      this.set(input);\n    }\n  }\n\n  /**\n   * Sets the schedule with the given input.\n   *\n   * @param input The input or schedule which describes the schedule of events.\n   * @param parseMeta A function to use when parsing meta input into the desired type.\n   * @see [[Parse.schedule]]\n   */\n  public set(input: ScheduleInput<M> | Schedule<M>,\n    parseMeta: (input: any) => M = (x => <M>x)): this\n  {\n    if (input instanceof Schedule)\n    {\n      Parse.schedule<M>( input.toInput(), undefined, this);\n    }\n    else\n    {\n      Parse.schedule<M>(input, fn.coalesce( input.parseMeta, parseMeta ), this);\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns the last event time specified or `undefined` if this schedule is\n   * for an all day event.\n   */\n  public get lastTime(): Time\n  {\n    return this.times[ this.times.length - 1 ];\n  }\n\n  /**\n   * The [[Identifier]] for this schedule. Either [[Identifier.Day]] or\n   * [[Identifier.Time]].\n   */\n  public get identifierType(): Identifier\n  {\n    return this.isFullDay() ? Identifier.Day : Identifier.Time;\n  }\n\n  /**\n   * Updates the [[Schedule.durationInDays]] variable based on the\n   * [[Schedule.lastTime]] (if any), the [[Schedule.duration]] and it's\n   * [[Schedule.durationUnit]].\n   */\n  public updateDurationInDays(): this\n  {\n    let start: number = this.lastTime ? this.lastTime.toMilliseconds() : 0;\n    let duration: number = this.duration * (Constants.DURATION_TO_MILLIS[ this.durationUnit ] || 0);\n    let exclude: number = Constants.MILLIS_IN_DAY;\n    let day: number = Constants.MILLIS_IN_DAY;\n\n    this.durationInDays = Math.max(0, Math.ceil((start + duration - exclude) / day));\n\n    return this;\n  }\n\n  /**\n   * Updates [[Schedule.checks]] based on the frequencies that were specified\n   * in the schedule input.\n   */\n  public updateChecks(): this\n  {\n    this.checks = Parse.givenFrequency([\n      this.year,\n      this.month,\n      this.week,\n      this.weekOfYear,\n      this.fullWeekOfYear,\n      this.weekspanOfYear,\n      this.lastFullWeekOfYear,\n      this.lastWeekspanOfYear,\n      this.weekOfMonth,\n      this.weekspanOfMonth,\n      this.fullWeekOfMonth,\n      this.lastWeekspanOfMonth,\n      this.lastFullWeekOfMonth,\n      this.dayOfWeek,\n      this.dayOfMonth,\n      this.lastDayOfMonth,\n      this.dayOfYear\n    ]);\n\n    return this;\n  }\n\n  /**\n   * Determines whether the given day lies between the earliest and latest\n   * valid day in the schedule.\n   *\n   * @param day The day to test.\n   * @returns `true` if the day lies in the schedule, otherwise `false`.\n   * @see [[Schedule.start]]\n   * @see [[Schedule.end]]\n   */\n  public matchesSpan(day: Day): boolean\n  {\n    return (this.start === null || day.isSameOrAfter(this.start)) &&\n      (this.end === null || day.isBefore(this.end));\n  }\n\n  /**\n   * Determines whether the given range overlaps with the earliest and latest\n   * valid days in this schedule (if any).\n   *\n   * @param start The first day in the range.\n   * @param end The last day in the range.\n   * @returns `true` if the range intersects with the schedule, otherwise `false`.\n   * @see [[Schedule.start]]\n   * @see [[Schedule.end]]\n   */\n  public matchesRange(start: Day, end: Day): boolean\n  {\n    if (this.start && end.isBefore(this.start))\n    {\n      return false;\n    }\n\n    if (this.end && start.isAfter(this.end))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Determines whether the given day is explicitly excluded in the schedule.\n   *\n   * @param day The day to test.\n   * @param lookAtTime lookAtTime If the specific time of the given day should\n   *    be looked at.\n   * @returns `true` if the day was excluded, otherwise `false`.\n   */\n  public isExcluded(day: Day, lookAtTime: boolean = true): boolean\n  {\n    return this.exclude.get( day, false, lookAtTime );\n  }\n\n  /**\n   * Determines whether the given day is explicitly included in the schedule.\n   *\n   * @param day The day to test.\n   * @param lookAtTime lookAtTime If the specific time of the given day should\n   *    be looked at.\n   * @returns `true` if the day is NOT explicitly included, otherwise `false`.\n   */\n  public isIncluded(day: Day, lookAtTime: boolean = true): boolean\n  {\n    return this.include.get( day, false, lookAtTime );\n  }\n\n  /**\n   * Determines whether the given day is cancelled in the schedule.\n   *\n   * @param day The day to test.\n   * @param lookAtTime lookAtTime If the specific time of the given day should\n   *    be looked at.\n   * @returns `true` if the day was cancelled, otherwise `false`.\n   */\n  public isCancelled(day: Day, lookAtTime: boolean = true): boolean\n  {\n    return this.cancel.get( day, false, lookAtTime );\n  }\n\n  /**\n   * Returns the metadata for the given day or `null` if there is none.\n   *\n   * @param day The day to return the metadata for.\n   * @param otherwise The data to return if none exists for the given day.\n   * @param lookAtTime lookAtTime If the specific time of the given day should\n   *    be looked at.\n   * @returns The metadata or `null`.\n   */\n  public getMeta(day: Day, otherwise: M = null, lookAtTime: boolean = true): M\n  {\n    return this.meta.get( day, otherwise, lookAtTime );\n  }\n\n  /**\n   * Returns all metadata for the given day or an empty array if there is none.\n   *\n   * @param day The day to return the metadata for.\n   * @returns The array of metadata ordered by priority or an empty array.\n   */\n  public getMetas(day: Day): M[]\n  {\n    return this.meta.getAll( day );\n  }\n\n  /**\n   * Returns whether the events in the schedule are all day long or start at\n   * specific times. Full day events start at the start of the day and end at\n   * the start of the next day (if the duration = `1` and durationUnit = 'days').\n   * Full day events have no times specified and should have a durationUnit of\n   * either `days` or `weeks`.\n   */\n  public isFullDay(): boolean\n  {\n    return this.times.length === 0;\n  }\n\n  /**\n   * Sets whether this schedule is a full day event if it is not already. If\n   * this schedule is a full day event and `false` is passed to this function\n   * a single timed event will be added based on `defaultTime`. If this schedule\n   * has timed events and `true` is passed to make the schedule full day, the\n   * timed events are removed from this schedule. If the durationUnit is not the\n   * expected unit based on the new full day flag - the duration is reset to 1\n   * and the duration unit is set to the expected unit.\n   *\n   * @param fullDay Whether this schedule should represent a full day event or\n   *    timed events.\n   * @param defaultTime If `fullDay` is `false` and this schedule is currently\n   *    a full day event - this time will be used as the time of the first event.\n   */\n  public setFullDay(fullDay: boolean = true, defaultTime: TimeInput = '08:00'): this\n  {\n    if (fullDay !== this.isFullDay())\n    {\n      if (fullDay)\n      {\n        this.times = [];\n\n        if (this.durationUnit !== 'days' && this.durationUnit !== 'day')\n        {\n          this.duration = 1;\n          this.durationUnit = 'days';\n        }\n      }\n      else\n      {\n        this.times = [Parse.time( defaultTime )];\n\n        if (this.durationUnit !== 'hours' && this.durationUnit !== 'hour')\n        {\n          this.duration = 1;\n          this.durationUnit = 'hours';\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Adjusts the [[Schedule.start]] and [[Schedule.end]] dates specified on this\n   * schedule if this schedule represents a single event and the `start` and\n   * `end` are already set or `addSpan` is `true`.\n   *\n   * @param addSpan If `true`, the `start` and `end` dates will always be\n   *    adjusted if this schedule is a single event.\n   */\n  public adjustDefinedSpan(addSpan: boolean = false): this\n  {\n    let single: DaySpan = this.getSingleEventSpan();\n\n    if (single && (addSpan || (this.start && this.end)))\n    {\n      this.start = single.start.start();\n      this.end = single.end.end();\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns a span of time for a schedule with full day events starting on the\n   * start of the given day with the desired duration in days or weeks.\n   *\n   * @param day The day the span starts on.\n   * @returns The span of time starting on the given day.\n   */\n  public getFullSpan(day: Day): DaySpan\n  {\n    let start: Day = day.start();\n    let end: Day = start.add( this.duration, this.durationUnit );\n\n    return new DaySpan( start, end );\n  }\n\n  /**\n   * Returns a span of time starting on the given day at the given day with the\n   * duration specified on this schedule.\n   *\n   * @param day The day the span starts on.\n   * @param time The time of day the span starts.\n   * @returns The span of time calculated.\n   */\n  public getTimeSpan(day: Day, time: Time): DaySpan\n  {\n    let start: Day = day.withTime( time );\n    let end: Day = start.add( this.duration, this.durationUnit );\n\n    return new DaySpan( start, end );\n  }\n\n  /**\n   * Determines whether the given day is a day on the schedule for the start\n   * of an event. If an event is more than one day and the day given is not the\n   * start this may return `false`. This does not test for event instances\n   * that exist through [[Schedule.include]].\n   *\n   * @param day The day to test.\n   * @returns `true` if the day marks the start of an event on the schedule.\n   * @see [[Schedule.isIncluded]]\n   * @see [[Schedule.isFullyExcluded]]\n   * @see [[Schedule.matchesSpan]]\n   */\n  public matchesDay(day: Day): boolean\n  {\n    if (this.isIncluded( day, false ))\n    {\n      return true;\n    }\n\n    if (!this.matchesSpan( day ) || this.isFullyExcluded( day ))\n    {\n      return false;\n    }\n\n    for (let check of this.checks)\n    {\n      if (!check( <number>day[ check.property ] ))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Determines whether the given day has events added through\n   * [[Schedule.include]].\n   *\n   * @param day The day to look for included times on.\n   * @returns `true` if there are included event instances on the given day,\n   *    otherwise `false`.\n   */\n  public hasIncludedTime(day: Day): boolean\n  {\n    return !this.iterateIncludeTimes( day ).isEmpty();\n  }\n\n  /**\n   * Determines whether the given day is fully excluded from the schedule. A\n   * fully excluded day is one that has a day-wide exclusion, or the schedule\n   * is not an all-day event and all times in the schedule are specifically\n   * excluded.\n   *\n   * @param day The day to test.*\n   * @returns `true` if he day is fully excluded, otherwise `false`.\n   */\n  public isFullyExcluded(day: Day): boolean\n  {\n    if (this.isExcluded(day, false))\n    {\n      return true;\n    }\n\n    if (this.isFullDay())\n    {\n      return false;\n    }\n\n    for (let time of this.times)\n    {\n      if (!this.isExcluded( day.withTime( time ) ))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Finds the next day an event occurs on the schedule given a day to start,\n   * optionally including it, and a maximum number of days to look ahead.\n   *\n   * @param day The day to start to search from.\n   * @param includeDay If the given day should be included in the search.\n   * @param lookAhead The maximum number of days to look ahead from the given\n   *     day for event occurrences.\n   * @returns The next day on the schedule or `null` if none exists.\n   */\n  public nextDay(day: Day, includeDay: boolean = false, lookAhead: number = 366): Day\n  {\n    return this.iterateDaycast(day, 1, true, includeDay, lookAhead).first();\n  }\n\n  /**\n   * Finds the next specified number of days that events occur on the schedule\n   * given a day to start, optionally including it, and a maximum number of days\n   * to look ahead.\n   *\n   * @param day The day to start to search from.\n   * @param max The maximum number of days to return in the result.\n   * @param includeDay If the given day should be included in the search.\n   * @param lookAhead The maximum number of days to look ahead from the given\n   *     day for event occurrences.\n   * @returns An array containing the next days on the schedule that events\n   *    start or an empty array if there are none.\n   */\n  public nextDays(day: Day, max: number, includeDay: boolean = false, lookAhead: number = 366): Iterator<Day>\n  {\n    return this.iterateDaycast(day, max, true, includeDay, lookAhead);\n  }\n\n  /**\n   * Finds the previous day an event occurs on the schedule given a day to start,\n   * optionally including it, and a maximum number of days to look behind.\n   *\n   * @param day The day to start to search from.\n   * @param includeDay If the given day should be included in the search.\n   * @param lookBack The maximum number of days to look behind from the given\n   *     day for event occurrences.\n   * @returns The previous day on the schedule or `null` if none exists.\n   */\n  public prevDay(day: Day, includeDay: boolean = false, lookBack: number = 366): Day\n  {\n    return this.iterateDaycast(day, 1, false, includeDay, lookBack).first();\n  }\n\n  /**\n   * Finds the previous specified number of days that events occur on the\n   * schedule given a day to start, optionally including it, and a maximum\n   * number of days to look behind.\n   *\n   * @param day The day to start to search from.\n   * @param max The maximum number of days to return in the result.\n   * @param includeDay If the given day should be included in the search.\n   * @param lookAhead The maximum number of days to look behind from the given\n   *     day for event occurrences.\n   * @returns An array containing the previous days on the schedule that events\n   *    start or an empty array if there are none.\n   */\n  public prevDays(day: Day, max: number, includeDay: boolean = false, lookBack: number = 366): Iterator<Day>\n  {\n    return this.iterateDaycast(day, max, false, includeDay, lookBack);\n  }\n\n  /**\n   * Iterates over days that events start in the schedule given a day to start,\n   * a maximum number of days to find, and a direction to look.\n   *\n   * @param day The day to start to search from.\n   * @param max The maximum number of days to iterate.\n   * @param next If `true` this searches forward, otherwise `false` is backwards.\n   * @param includeDay If the given day should be included in the search.\n   * @param lookup The maximum number of days to look through from the given\n   *     day for event occurrences.\n   * @returns A new Iterator for the days found in the cast.\n   * @see [[Schedule.iterateSpans]]\n   */\n  public iterateDaycast(day: Day, max: number, next: boolean, includeDay: boolean = false, lookup: number = 366): Iterator<Day>\n  {\n    return new Iterator<Day>(iterator =>\n    {\n      let iterated: number = 0;\n\n      for (let days = 0; days < lookup; days++)\n      {\n        if (!includeDay || days > 0)\n        {\n          day = next ? day.next() : day.prev();\n        }\n\n        if (!this.iterateSpans( day, false ).isEmpty())\n        {\n          let action: IteratorAction = iterator.act( day );\n\n          if (action === IteratorAction.Stop || ++iterated >= max)\n          {\n            return;\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Iterates through the spans (event instances) that start on or covers the\n   * given day.\n   *\n   * @param day The day to look for spans on.\n   * @param covers If `true` spans which span multiple days will be looked at\n   *    to see if they intersect with the given day, otherwise `false` will\n   *    only look at the given day for the start of events.\n   * @returns A new Iterator for all the spans found.\n   */\n  public iterateSpans(day: Day, covers: boolean = false): Iterator<DaySpan>\n  {\n    return new Iterator<DaySpan>(iterator =>\n    {\n      let current: Day = day;\n      let lookBehind: number = covers ? this.durationInDays : 0;\n\n      // If the events start at the end of the day and may last multiple days....\n      if (this.isFullDay())\n      {\n        // If the schedule has events which span multiple days we need to look\n        // backwards for events that overlap with the given day.\n        while (lookBehind >= 0)\n        {\n          // If the current day matches the schedule rules...\n          if (this.matchesDay( current ))\n          {\n            // Build a DaySpan with the given start day and the schedules duration.\n            let span: DaySpan = this.getFullSpan( current );\n\n            // If that dayspan intersects with the given day, it's a winner!\n            if (span.matchesDay( day ))\n            {\n              switch (iterator.act( span ))\n              {\n                case IteratorAction.Stop:\n                  return;\n              }\n            }\n          }\n\n          current = current.prev();\n          lookBehind--;\n        }\n      }\n      // This schedule has events which start at certain times\n      else\n      {\n        // If the schedule has events which span multiple days we need to look\n        // backwards for events that overlap with the given day.\n        while (lookBehind >= 0)\n        {\n          // If the current day matches the schedule rules...\n          if (this.matchesDay( current ))\n          {\n            // Iterate through each daily occurrence in the schedule...\n            for (let time of this.times)\n            {\n              let span: DaySpan = this.getTimeSpan( current, time );\n\n              // If the event intersects with the given day and the occurrence\n              // has not specifically been excluded...\n              if (span.matchesDay( day ) && !this.isExcluded( span.start, true ))\n              {\n                switch (iterator.act( span ))\n                {\n                  case IteratorAction.Stop:\n                    return;\n                }\n              }\n            }\n          }\n          else\n          {\n            // The current day does not match the schedule, however the schedule\n            // might have moved/random event occurrents on the current day.\n            // We only want the ones that overlap with the given day.\n            this.iterateIncludeTimes(current, day).iterate((span, timeIterator) =>\n            {\n              switch (iterator.act( span ))\n              {\n                case IteratorAction.Stop:\n                  timeIterator.stop();\n                  break;\n              }\n            })\n\n            if (iterator.action === IteratorAction.Stop)\n            {\n              return;\n            }\n          }\n\n          current = current.prev();\n          lookBehind--;\n        }\n      }\n    });\n  }\n\n  /**\n   * Determines if the given day is on the schedule and the time specified on\n   * the day matches one of the times on the schedule.\n   *\n   * @param day The day to test.\n   * @returns `true` if the day and time match the schedule, otherwise false.\n   */\n  public matchesTime(day: Day): boolean\n  {\n    return !!this.iterateSpans( day, true ).first( span => span.start.sameMinute( day ) );\n  }\n\n  /**\n   * Determines if the given day is covered by this schedule. A schedule can\n   * specify events that span multiple days - so even though the day does not\n   * match the starting day of a span - it can be a day that is within the\n   * schedule.\n   *\n   * @param day The day to test.\n   * @returns `true` if the day is covered by an event on this schedule,\n   *    otherwise `false`.\n   */\n  public coversDay(day: Day): boolean\n  {\n    return !this.iterateSpans( day, true ).isEmpty();\n  }\n\n  /**\n   * Determines if the given timestamp lies in an event occurrence on this\n   * schedule.\n   *\n   * @param day The timestamp to test against the schedule.\n   * @return `true` if the timestamp lies in an event occurrent start and end\n   *    timestamps, otherwise `false`.\n   */\n  public coversTime(day: Day): boolean\n  {\n    return !!this.iterateSpans( day, true ).first( span => span.contains( day ) );\n  }\n\n  /**\n   * Sets the frequency for the given property. This does not update the\n   * [[Schedule.checks]] array, the [[Schedule.updateChecks]] function needs\n   * to be called.\n   *\n   * @param property The frequency to update.\n   * @param frequency The new frequency.\n   */\n  public setFrequency(property: DayProperty, frequency?: FrequencyValue): this\n  {\n    this[ property ] = Parse.frequency( frequency, property );\n\n    return this;\n  }\n\n  /**\n   * Changes the exclusion status of the event at the given time. By default\n   * this excludes this event - but `false`  may be passed to undo an exclusion.\n   *\n   * @param time The start time of the event occurrence to exclude or include.\n   * @param excluded Whether the event should be excluded.\n   */\n  public setExcluded(time: Day, excluded: boolean = true): this\n  {\n    let type: Identifier = this.identifierType;\n\n    this.exclude.set( time, excluded, type );\n    this.include.set( time, !excluded, type );\n\n    return this;\n  }\n\n  /**\n   * Changes the cancellation status of the event at the given start time. By\n   * default this cancels the event occurrence - but `false` may be passed to\n   * undo a cancellation.\n   *\n   * @param time The start time of the event occurrence to cancel or uncancel.\n   * @param cancelled Whether the event should be cancelled.\n   */\n  public setCancelled(time: Day, cancelled: boolean = true): this\n  {\n    this.cancel.set( time, cancelled, this.identifierType );\n\n    return this;\n  }\n\n  /**\n   * Removes the time from this schedule and all related included, excluded,\n   * cancelled instances as well as metadata.\n   *\n   * @param time The time to remove from the schedule.\n   * @param removeInclude If any included instances should be removed as well.\n   * @returns `true` if the time was removed, otherwise `false`.\n   */\n  public removeTime(time: Time, removeInclude: boolean = true): boolean\n  {\n    let found: boolean = false;\n\n    for (let i = 0; i < this.times.length && !found; i++)\n    {\n      if (found = time.matches( this.times[ i ] ))\n      {\n        this.times.splice( i, 1 );\n      }\n    }\n\n    if (found)\n    {\n      if (removeInclude)\n      {\n        this.include.removeTime( time );\n      }\n\n      this.exclude.removeTime( time );\n      this.cancel.removeTime( time );\n      this.meta.removeTime( time );\n    }\n\n    return found;\n  }\n\n  /**\n   * Moves the event instance starting at `fromTime` to `toTime` optionally\n   * placing `meta` in the schedules metadata for the new time `toTime`.\n   * If this schedule has a single event ([[Schedule.isSingleEvent]]) then the\n   * only value needed is `toTime` and not `fromTime`.\n   *\n   * @param toTime The timestamp of the new event.\n   * @param fromTime The timestamp of the event on the schedule to move if this\n   *    schedule generates multiple events.\n   * @returns `true` if the schedule had the event moved, otherwise `false`.\n   */\n  public move(toTime: Day, fromTime?: Day, meta?: M): boolean\n  {\n    if (!this.moveSingleEvent( toTime ) && fromTime)\n    {\n      return this.moveInstance( fromTime, toTime );\n    }\n\n    return false;\n  }\n\n  /**\n   * Moves a time specified in this schedule to the given time, adjusting\n   * any cancelled event instances, metadata, and any excluded and included\n   * event instances.\n   *\n   * @param fromTime The time to move.\n   * @param toTime The new time in the schedule.\n   * @returns `true` if time was moved, otherwise `false`.\n   */\n  public moveTime(fromTime: Time, toTime: Time): boolean\n  {\n    let found: boolean = false;\n\n    for (let i = 0; i < this.times.length && !found; i++)\n    {\n      if (found = fromTime.matches( this.times[ i ] ))\n      {\n        this.times.splice( i, 1, toTime );\n      }\n    }\n\n    if (found)\n    {\n      this.include.moveTime( fromTime, toTime );\n      this.exclude.moveTime( fromTime, toTime );\n      this.cancel.moveTime( fromTime, toTime );\n      this.meta.moveTime( fromTime, toTime );\n\n      this.adjustDefinedSpan( false );\n    }\n\n    return found;\n  }\n\n  /**\n   * Moves the event instance starting at `fromTime` to `toTime` optionally\n   * placing `meta` in the schedules metadata for the new time `toTime`. A move\n   * is accomplished by excluding the current event and adding an inclusion of\n   * the new day & time.\n   *\n   * @param fromTime The timestamp of the event on the schedule to move.\n   * @param toTime The timestamp of the new event.\n   * @returns `true`.\n   * @see [[Schedule.move]]\n   */\n  public moveInstance(fromTime: Day, toTime: Day): boolean\n  {\n    let type: Identifier = this.identifierType;\n\n    this.exclude.set( fromTime, true, type );\n    this.exclude.set( toTime, false, type );\n\n    this.include.set( toTime, true, type );\n    this.include.set( fromTime, false, type );\n\n    if (this.cancel.get( fromTime, false ) && !this.cancel.get( toTime, false ))\n    {\n      this.cancel.set( toTime, true, type );\n\n      if (this.cancel.getIdentifier( fromTime ) === type)\n      {\n        this.cancel.unset( fromTime, type );\n      }\n    }\n\n    let meta: M = this.meta.get( fromTime, null );\n\n    if (meta && meta !== this.meta.get( toTime, null ))\n    {\n      this.meta.set( toTime, meta, type );\n\n      if (this.meta.getIdentifier( fromTime ) === type)\n      {\n        this.meta.unset( fromTime, type );\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Moves the single event in this schedule to the given day/time if applicable.\n   * If this schedule is not a single event schedule then `false` is returned.\n   * If this schedule is a timed event the time will take the time of the given\n   * `toTime` of `takeTime` is `true`.\n   *\n   * @param toTime The time to move the single event to.\n   * @param takeTime If this schedule has a single timed event, should the time\n   *    of the event be changed to the time of the given `toTime`?\n   * @returns `true` if the schedule was adjusted, otherwise `false`.\n   * @see [[Schedule.move]]\n   */\n  public moveSingleEvent(toTime: Day, takeTime: boolean = true): boolean\n  {\n    if (!this.isSingleEvent())\n    {\n      return false;\n    }\n\n    for (let check of this.checks)\n    {\n      let prop: DayProperty  = check.property;\n      let value = toTime[ prop ];\n      let frequency: FrequencyCheck = Parse.frequency( [value], prop );\n\n      this[ prop ] = frequency;\n    }\n\n    if (this.times.length === 1 && takeTime)\n    {\n      this.times = [toTime.asTime()];\n    }\n\n    this.updateChecks();\n\n    let span: DaySpan = this.getSingleEventSpan();\n\n    if (this.start)\n    {\n      this.start = span.start.start();\n    }\n\n    if (this.end)\n    {\n      this.end = span.end.end();\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the span of the single event in this schedule if it's that type of\n   * schedule, otherwise `null` is returned.\n   *\n   * @returns A span of the single event, otherwise `null`.\n   * @see [[Schedule.isSingleEvent]]\n   */\n  public getSingleEventSpan(): DaySpan\n  {\n    if (!this.isSingleEvent())\n    {\n      return null;\n    }\n\n    let startOfYear: Day = Day.build( this.year.input[0], 0, 1 );\n    let start: Day = this.iterateDaycast( startOfYear, 1, true, true, 366 ).first();\n\n    if (!start)\n    {\n      return null;\n    }\n\n    return this.isFullDay() ?\n      this.getFullSpan( start ) :\n      this.getTimeSpan( start, this.times[ 0 ] );\n  }\n\n  /**\n   * Determines whether this schedule produces a single event, and no more.\n   * If this schedule has any includes, it's assumed to be a multiple event\n   * schedule. A single event can be detected in the following scenarios where\n   * each frequency has a single occurrence (see [[Schedule.isSingleFrequency]]).\n   *\n   * - year, day of year\n   * - year, month, day of month\n   * - year, month, week of month, day of week\n   * - year, week of year, day of week\n   *\n   * @returns `true` if this schedule produces a single event, otherwise `false`.\n   */\n  public isSingleEvent(): boolean\n  {\n    // 0 = full day, 1 = once a day, 1+ = multiple events a day\n    if (this.times.length > 1)\n    {\n      return false;\n    }\n\n    // Let's assume if there are includes, this is not a single event.\n    if (!this.include.isEmpty())\n    {\n      return false;\n    }\n\n    // If this can occur on multiple years, not a single event.\n    if (!this.isSingleYear())\n    {\n      return false;\n    }\n\n    // If this is a specific year and day of the year: single!\n    if (this.isSingleDayOfYear())\n    {\n      return true;\n    }\n\n    // If this is a specific year, month, and day of month: single!\n    if (this.isSingleMonth() && this.isSingleDayOfMonth())\n    {\n      return true;\n    }\n\n    // If this is a specific year, month, week of the month, day of the week: single!\n    if (this.isSingleMonth() && this.isSingleWeekOfMonth() && this.isSingleDayOfWeek())\n    {\n      return true;\n    }\n\n    // If this is a specific year, week of the year, day of the week: single!\n    if (this.isSingleWeekOfYear() && this.isSingleDayOfWeek())\n    {\n      return true;\n    }\n\n    // Doesn't look like a single event.\n    return false;\n  }\n\n  /**\n   * @returns `true` if this schedule produces events only in a specific year.\n   * @see [[Schedule.year]]\n   */\n  public isSingleYear(): boolean\n  {\n    return this.isSingleFrequency( this.year );\n  }\n\n  /**\n   * @returns `true` if this schedule produces events only in a specific month.\n   * @see [[Schedule.month]]\n   */\n  public isSingleMonth(): boolean\n  {\n    return this.isSingleFrequency( this.month );\n  }\n\n  /**\n   * @returns `true` if this schedule produces events only in a specific day of\n   *    the month.\n   * @see [[Schedule.dayOfMonth]]\n   * @see [[Schedule.lastDayOfMonth]]\n   */\n  public isSingleDayOfMonth(): boolean\n  {\n    return this.isSingleFrequency( this.dayOfMonth ) ||\n      this.isSingleFrequency( this.lastDayOfMonth );\n  }\n\n  /**\n   * @returns `true` if this schedule produces events only in a specific day of\n   *    the week.\n   * @see [[Schedule.dayOfWeek]]\n   */\n  public isSingleDayOfWeek(): boolean\n  {\n    return this.isSingleFrequency( this.dayOfWeek );\n  }\n\n  /**\n   * @returns `true` if this schedule produces events only in a specific day of\n   *    the year.\n   * @see [[Schedule.dayOfYear]]\n   */\n  public isSingleDayOfYear(): boolean\n  {\n    return this.isSingleFrequency( this.dayOfYear );\n  }\n\n  /**\n   * @returns `true` if this schedule produces events only in a specific week of\n   *    the month.\n   * @see [[Schedule.weekspanOfMonth]]\n   * @see [[Schedule.fullWeekOfMonth]]\n   * @see [[Schedule.weekOfMonth]]\n   * @see [[Schedule.lastFullWeekOfMonth]]\n   * @see [[Schedule.lastWeekspanOfMonth]]\n   */\n  public isSingleWeekOfMonth(): boolean\n  {\n    return this.isSingleFrequency( this.weekspanOfMonth ) ||\n      this.isSingleFrequency( this.fullWeekOfMonth ) ||\n      this.isSingleFrequency( this.weekOfMonth ) ||\n      this.isSingleFrequency( this.lastFullWeekOfMonth ) ||\n      this.isSingleFrequency( this.lastWeekspanOfMonth );\n  }\n\n  /**\n   * @returns `true` if this schedule produces events only in a specific week of\n   *    the year.\n   * @see [[Schedule.weekspanOfYear]]\n   * @see [[Schedule.fullWeekOfYear]]\n   * @see [[Schedule.week]]\n   * @see [[Schedule.weekOfYear]]\n   * @see [[Schedule.lastFullWeekOfYear]]\n   * @see [[Schedule.lastWeekspanOfYear]]\n   */\n  public isSingleWeekOfYear(): boolean\n  {\n    return this.isSingleFrequency( this.weekspanOfYear ) ||\n      this.isSingleFrequency( this.fullWeekOfYear ) ||\n      this.isSingleFrequency( this.week ) ||\n      this.isSingleFrequency( this.weekOfYear ) ||\n      this.isSingleFrequency( this.lastFullWeekOfYear ) ||\n      this.isSingleFrequency( this.lastWeekspanOfYear );\n  }\n\n  /**\n   * Determines if the given [[FrequencyCheck]] results in a single occurrence.\n   *\n   * @returns `true` if the frequency results in a single event, otherwise `false`.\n   */\n  public isSingleFrequency(frequency: FrequencyCheck): boolean\n  {\n    return fn.isArray( frequency.input ) && (<number[]>frequency.input).length === 1;\n  }\n\n  /**\n   * Creates a forecast for this schedule which returns a number of event\n   * occurrences around a given day. A single item could be returned per day, or\n   * you could get an item for each timed event occurrence.\n   *\n   * @param around The day to find a forecast around.\n   * @param covers If `true` spans which span multiple days will be looked at\n   *    to see if they intersect with the given day, otherwise `false` will\n   *    only look at the given day for the start of events.\n   * @param daysAfter The number of events to return before the given day.\n   * @param daysBefore The number of events to return after the given day.\n   * @param times If timed events should be returned, or only one for each day.\n   * @param lookAround How many days to look before and after the given day for\n   *    event occurrences.\n   * @returns A new iterator which provides the event occurence span, the day it\n   *    starts (or is covered if `covers` is `true`), and the identifier for the\n   *    event.\n   */\n  public forecast(around: Day,\n    covers: boolean = true,\n    daysAfter: number,\n    daysBefore: number = daysAfter,\n    times: boolean = false,\n    lookAround: number = 366): Iterator<ScheduleEventTuple>\n  {\n    let type: Identifier = this.identifierType;\n\n    let tuplesForDay = (day: Day, tuples: Iterator<ScheduleEventTuple>): boolean =>\n    {\n      let spans: DaySpan[] = this.iterateSpans( day, covers ).list();\n      let last: number = times ? spans.length : Math.min( 1, spans.length );\n      let offset: number = times ? 0 : spans.length - 1;\n\n      for (let i = 0; i < last; i++)\n      {\n        let span: DaySpan = spans[ i + offset ];\n        let id: IdentifierInput = type.get( span.start );\n\n        if (tuples.act( [ span, day, id ] ) === IteratorAction.Stop)\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    let prev = new Iterator<ScheduleEventTuple>(iterator =>\n    {\n      let curr: Day = around;\n\n      for (let i = 0; i < lookAround; i++)\n      {\n        if (!tuplesForDay( curr, iterator ))\n        {\n          break;\n        }\n\n        curr = curr.prev();\n      }\n    });\n\n    let next = new Iterator<ScheduleEventTuple>(iterator =>\n    {\n      let curr: Day = around;\n\n      for (let i = 0; i < lookAround; i++)\n      {\n        curr = curr.next();\n\n        if (!tuplesForDay( curr, iterator ))\n        {\n          break;\n        }\n      }\n    });\n\n    return prev.take( daysBefore + 1 ).reverse().append( next.take( daysAfter ) );\n  }\n\n  /**\n   * Iterates timed events that were explicitly specified on the given day.\n   * Those events could span multiple days so may be tested against another day.\n   *\n   * @param day The day to look for included timed events.\n   * @param matchAgainst The day to test against the timed event.\n   * @returns A new Iterator for all the included spans found.\n   */\n  public iterateIncludeTimes(day: Day, matchAgainst: Day = day): Iterator<DaySpan>\n  {\n    let isIncludedTime = (result: [IdentifierInput, boolean]) =>\n    {\n      let [id, included] = result;\n\n      return included && Identifier.Time.is( id );\n    };\n\n    let getSpan = (result: [IdentifierInput, boolean]) =>\n    {\n      let [id] = result;\n      let time: Day = Identifier.Time.start( id );\n      let span: DaySpan = this.getTimeSpan( time, time.asTime() );\n\n      if (span.matchesDay( matchAgainst ))\n      {\n        return span;\n      }\n    };\n\n    return this.include.query( day.dayIdentifier ).map<DaySpan>( getSpan, isIncludedTime );\n  }\n\n  /**\n   * Clones this schedule.\n   *\n   * @returns A new schedule which matches this schedule.\n   */\n  public clone(): Schedule<M>\n  {\n    return new Schedule<M>( this.toInput() );\n  }\n\n  /**\n   * Converts the schedule instance back into input.\n   *\n   * @param returnDays When `true` the start, end, and array of exclusions will\n   *    have [[Day]] instances, otherwise the UTC timestamp and dayIdentifiers\n   *    will be used when `false`.\n   * @param returnTimes When `true` the times returned in the input will be\n   *    instances of [[Time]] otherwise the `timeFormat` is used to convert the\n   *    times to strings.\n   * @param timeFormat The time format to use when returning the times as strings.\n   * @param alwaysDuration If the duration values (`duration` and\n   *    `durationUnit`) should always be returned in the input.\n   * @returns The input that describes this schedule.\n   * @see [[Time.format]]\n   */\n  public toInput(returnDays: boolean = false, returnTimes: boolean = false, timeFormat: string = '', alwaysDuration: boolean = false): ScheduleInput<M>\n  {\n    let defaultUnit: string = Constants.DURATION_DEFAULT_UNIT( this.isFullDay() );\n    let exclusions: IdentifierInput[] = this.exclude.identifiers(v => v).list();\n    let inclusions: IdentifierInput[] = this.include.identifiers(v => v).list();\n    let cancels: IdentifierInput[] = this.cancel.identifiers(v => v).list();\n    let hasMeta: boolean = !this.meta.isEmpty();\n    let out: ScheduleInput<M> = {};\n    let times: TimeInput[]  = [];\n\n    for (let time of this.times)\n    {\n      times.push( returnTimes ? time : (timeFormat ? time.format( timeFormat ) : time.toString()) );\n    }\n\n    if (this.start) out.start = returnDays ? this.start : this.start.time;\n    if (this.end) out.end = returnDays ? this.end : this.end.time;\n    if (times.length) out.times = times;\n    if (alwaysDuration || this.duration !== Constants.DURATION_DEFAULT) out.duration = this.duration;\n    if (alwaysDuration || this.durationUnit !== defaultUnit) out.durationUnit = this.durationUnit;\n    if (exclusions.length) out.exclude = exclusions;\n    if (inclusions.length) out.include = inclusions;\n    if (cancels.length) out.cancel = cancels;\n    if (hasMeta) out.meta = fn.extend( {}, this.meta.map );\n    if (this.dayOfWeek.input) out.dayOfWeek = this.dayOfWeek.input;\n    if (this.dayOfMonth.input) out.dayOfMonth = this.dayOfMonth.input;\n    if (this.lastDayOfMonth.input) out.lastDayOfMonth = this.lastDayOfMonth.input;\n    if (this.dayOfYear.input) out.dayOfYear = this.dayOfYear.input;\n    if (this.year.input) out.year = this.year.input;\n    if (this.month.input) out.month = this.month.input;\n    if (this.week.input) out.week = this.week.input;\n    if (this.weekOfYear.input) out.weekOfYear = this.weekOfYear.input;\n    if (this.weekspanOfYear.input) out.weekspanOfYear = this.weekspanOfYear.input;\n    if (this.fullWeekOfYear.input) out.fullWeekOfYear = this.fullWeekOfYear.input;\n    if (this.lastWeekspanOfYear.input) out.lastWeekspanOfYear = this.lastWeekspanOfYear.input;\n    if (this.lastFullWeekOfYear.input) out.lastFullWeekOfYear = this.lastFullWeekOfYear.input;\n    if (this.weekOfMonth.input) out.weekOfMonth = this.weekOfMonth.input;\n    if (this.weekspanOfMonth.input) out.weekspanOfMonth = this.weekspanOfMonth.input;\n    if (this.fullWeekOfMonth.input) out.fullWeekOfMonth = this.fullWeekOfMonth.input;\n    if (this.lastWeekspanOfMonth.input) out.lastWeekspanOfMonth = this.lastWeekspanOfMonth.input;\n    if (this.lastFullWeekOfMonth.input) out.lastFullWeekOfMonth = this.lastFullWeekOfMonth.input;\n\n    return out;\n  }\n\n  /**\n   * Describes the schedule in a human friendly string taking into account all\n   * possible values specified in this schedule.\n   *\n   * @param thing A brief description of the things (events) on the schedule.\n   * @param includeRange When `true` the [[Schedule.start]] and [[Schedule.end]]\n   *    are possibly included in the description if they have values.\n   * @param includeTimes When `true` the [[Schedule.times]] are possibly included\n   *    in the description.\n   * @param includeDuration When `true` the [[Schedule.duration]] and\n   *    [[Schedule.durationUnit]] are added to the description if\n   *    [[Schedule.duration]] is not equal to `1`.\n   * @param includeExcludes When `true` the [[Schedule.exclude]] are added\n   *    to the description if there are any.\n   * @param includeIncludes When `true` the [[Schedule.include]] are added\n   *    to the description if there are any.\n   * @param includeCancels When `true` the [[Schedule.cancel]] are added\n   *    to the description if there are any.\n   * @returns The descroption of the schedule.\n   */\n  public describe(thing: string = 'event',\n    includeRange: boolean = true,\n    includeTimes: boolean = true,\n    includeDuration: boolean = false,\n    includeExcludes: boolean = false,\n    includeIncludes: boolean = false,\n    includeCancels: boolean = false): string\n  {\n    let out: string = '';\n\n    if (includeRange)\n    {\n      if (this.start)\n      {\n        out += 'Starting on ' + this.start.format('dddd Do, YYYY');\n\n        if (this.end)\n        {\n          out += ' and ending on ' + this.end.format('dddd Do, YYYY');\n        }\n      }\n      else if (this.end)\n      {\n        out += 'Up until ' + this.end.format('dddd Do, YYYY');\n      }\n    }\n\n    if (out)\n    {\n      out += ' the ' + thing + ' will occur';\n    }\n    else\n    {\n      out += 'The ' + thing + ' will occur';\n    }\n\n    out += this.describeRule( this.dayOfWeek.input, 'day of the week', x => moment.weekdays()[x], 1, false);\n    out += this.describeRule( this.lastDayOfMonth.input, 'last day of the month', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.dayOfMonth.input, 'day of the month', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.dayOfYear.input, 'day of the year', x => Suffix.CACHE[x], 1 );\n    out += this.describeRule( this.year.input, 'year', x => x, 0, false, ' in ' );\n    out += this.describeRule( this.month.input, 'month', x => moment.months()[x], 0, false, ' in ' );\n    out += this.describeRule( this.weekOfYear.input, 'week of the year', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.weekspanOfYear.input, 'weekspan of the year', x => Suffix.CACHE[x + 1], 1 );\n    out += this.describeRule( this.fullWeekOfYear.input, 'full week of the year', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.lastWeekspanOfYear.input, 'last weekspan of the year', x => Suffix.CACHE[x + 1], 1 );\n    out += this.describeRule( this.lastFullWeekOfYear.input, 'last full week of the year', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.weekOfMonth.input, 'week of the month', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.fullWeekOfMonth.input, 'full week of the month', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.weekspanOfMonth.input, 'weekspan of the month', x => Suffix.CACHE[x + 1], 1 );\n    out += this.describeRule( this.lastFullWeekOfMonth.input, 'last full week of the month', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.lastWeekspanOfMonth.input, 'last weekspan of the month', x => Suffix.CACHE[x + 1], 1 );\n\n    if (includeTimes && this.times.length)\n    {\n      out += ' at ';\n      out += this.describeArray( this.times, x => x.format('hh:mm a') );\n    }\n\n    if (includeDuration && this.duration !== Constants.DURATION_DEFAULT)\n    {\n      out += ' lasting ' + this.duration + ' ';\n\n      if (this.durationUnit)\n      {\n        out += this.durationUnit + ' ';\n      }\n    }\n\n    if (includeExcludes)\n    {\n      let excludes: ScheduleModifierSpan<boolean>[] = this.exclude.spans().list();\n\n      if (excludes.length)\n      {\n        out += ' excluding ';\n        out += this.describeArray( excludes, x => x.span.summary(Units.DAY) );\n      }\n    }\n\n    if (includeIncludes)\n    {\n      let includes: ScheduleModifierSpan<boolean>[] = this.include.spans().list();\n\n      if (includes.length)\n      {\n        out += ' including ';\n        out += this.describeArray( includes, x => x.span.summary(Units.DAY) );\n      }\n    }\n\n    if (includeCancels)\n    {\n      let cancels: ScheduleModifierSpan<boolean>[] = this.cancel.spans().list();\n\n      if (cancels.length)\n      {\n        out += ' with cancellations on ';\n        out += this.describeArray( cancels, x => x.span.summary(Units.DAY) );\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Describes the given frequency.\n   *\n   * @param value The frequency to describe.\n   * @param unit The unit of the frequency.\n   * @param map How the values in the frequency should be described.\n   * @param everyOffset A value to add to a [[FrequencyValueEvery]] offset to\n   *    account for zero-based values that should be shifted for human\n   *    friendliness.\n   * @param the If the word 'the' should be used to describe the unit.\n   * @param on The word which preceeds values of the given unit.\n   * @param required If the description should always return a non-empty string\n   *    even if the frequency was not specified in the original input.\n   * @returns A string description of the frequency.\n   */\n  private describeRule(value: FrequencyValue, unit: string, map: (x: number) => any, everyOffset: number = 0, the: boolean = true, on: string = ' on ', required: boolean = false): string\n  {\n    let out: string = '';\n    let suffix: string = the ? ' ' + unit : '';\n\n    if (fn.isFrequencyValueEvery(value))\n    {\n      let valueEvery: FrequencyValueEvery = <FrequencyValueEvery>value;\n\n      out += ' every ' + Suffix.CACHE[ valueEvery.every ] + ' ' + unit;\n\n      if (valueEvery.offset)\n      {\n        out += ' starting at ' + map( valueEvery.offset + everyOffset ) + suffix;\n      }\n    }\n    else if (fn.isFrequencyValueOneOf(value))\n    {\n      let valueOne: FrequencyValueOneOf = <FrequencyValueOneOf>value;\n\n      if (valueOne.length)\n      {\n        out += on + (the ? 'the ' : '');\n        out += this.describeArray( valueOne, map );\n        out += suffix;\n      }\n    }\n    else if (required)\n    {\n      out +=  on + 'any ' + unit;\n    }\n\n    return out;\n  }\n\n  /**\n   * Describes the array by adding commas where appropriate and 'and' before the\n   * last value of the array (if its more than `1`).\n   *\n   * @param array The array of items to describe.\n   * @param map The function which converts an item to a string.\n   * @returns The final description of the array items.\n   */\n  private describeArray<T>(array: T[], map: (item: T) => string): string\n  {\n    let out: string = '';\n    let last: number = array.length - 1;\n\n    out += map( array[ 0 ] );\n\n    for (let i = 1; i < last; i++)\n    {\n      out += ', ' + map( array[ i ] );\n    }\n\n    if (last > 0)\n    {\n      out += ' and ' + map( array[ last ] );\n    }\n\n    return out;\n  }\n\n  /**\n   * Generates a schedule for an event which occurs once all day for a given day\n   * optionally spanning multiple days starting on the given day.\n   *\n   * @param input The day the event starts.\n   * @param days The number of days the event lasts.\n   * @returns A new schedule that starts on the given day.\n   */\n  public static forDay<M>(input: DayInput, days: number = 1): Schedule<M>\n  {\n    let day: Day = Day.parse( input );\n\n    if (!day)\n    {\n      return null;\n    }\n\n    return new Schedule<M>({\n      year: [ day.year ],\n      month: [ day.month ],\n      dayOfMonth: [ day.dayOfMonth ],\n      duration: days,\n      durationUnit: 'days'\n    });\n  }\n\n  /**\n   * Generates a schedule for an event which occurs once at a given time on a\n   * given day optionally spanning any amount of time (default is 1 hour).\n   *\n   * @param input The day the event starts.\n   * @param time The time the event starts.\n   * @param duration The duration of the event.\n   * @param durationUnit The unit for the duration of the event.\n   * @returns A new schedule that starts on the given day and time.\n   */\n  public static forTime<M>(input: DayInput, time: TimeInput, duration: number = 1, durationUnit: DurationInput = 'hours'): Schedule<M>\n  {\n    let day: Day = Day.parse( input );\n\n    if (!day)\n    {\n      return null;\n    }\n\n    return new Schedule<M>({\n      year: [ day.year ],\n      month: [ day.month ],\n      dayOfMonth: [ day.dayOfMonth ],\n      times: [ time ],\n      duration: duration,\n      durationUnit: durationUnit\n    });\n  }\n\n  /**\n   * Generates a schedule for an event which occurs once over a given span.\n   *\n   * @param span The span of the event.\n   * @returns A new schedule that starts and ends at the given timestamps.\n   */\n  public static forSpan<M>(span: DaySpan): Schedule<M>\n  {\n    let start = span.start;\n    let minutes = span.minutes();\n    let isDay = minutes % Constants.MINUTES_IN_DAY === 0;\n    let isHour = minutes % Constants.MINUTES_IN_HOUR === 0;\n    let duration = isDay ? minutes / Constants.MINUTES_IN_DAY : (isHour ? minutes / Constants.MINUTES_IN_HOUR : minutes);\n    let durationUnit: DurationInput = isDay ? 'days' : (isHour ? 'hours' : 'minutes');\n\n    return this.forTime<M>( start, start.asTime(), duration, durationUnit );\n  }\n\n}\n","\nimport { Schedule, ScheduleInput } from './Schedule';\n\n/**\n * The input which can be passed to the calendar when adding a schedule and event.\n *\n * @typeparam T The type of data stored in the [[Event]] class.\n * @typeparam M The type of metadata stored in the schedule.\n */\nexport interface EventInput<T, M>\n{\n  id?: any;\n  data?: T;\n  schedule: ScheduleInput<M> | Schedule<M>;\n}\n\n/**\n * A pairing of a user specified event object and the schedule which defines\n * when it occurs on a calendar.\n *\n * @typeparam T The type of data stored in the [[Event]] class.\n * @typeparam M The type of metadata stored in the schedule.\n */\nexport class Event<T, M>\n{\n\n  /**\n   * User specified ID which can be used to find or remove this event from a\n   * Calendar.\n   */\n  public id: any;\n\n  /**\n   * User specified object which describes this event.\n   */\n  public data: T;\n\n  /**\n   * The schedule which defines when this event occurs.\n   */\n  public schedule: Schedule<M>;\n\n  /**\n   * If the event is visible on the calendar.\n   */\n  public visible: boolean;\n\n  /**\n   * Creates a new event.\n   *\n   * @param schedule The schedule which defines when the event occurs.\n   * @param data User specified object which describes this event.\n   * @param id User specified ID which identifies this event.\n   */\n  public constructor(schedule: Schedule<M>, data?: T, id?: any, visible: boolean = true)\n  {\n    this.schedule = schedule;\n    this.data = data;\n    this.id = id;\n    this.visible = visible;\n  }\n\n}\n","\nimport { Functions as fn } from './Functions';\nimport { Constants } from './Constants';\nimport { Parse } from './Parse';\n\n\n/**\n * A value that can possibly be parsed into a Time instance.\n *\n * @see [[Time.parse]]\n */\nexport type TimeInput = Time | number | string | {hour: number, minute?: number, second?: number, millisecond?: number};\n\n/**\n * A class which holds a specific time during in any day.\n */\nexport class Time\n{\n\n  /**\n   * The regular expression used to parse a time from a string.\n   *\n   * - ## = hour\n   * - ##:## = hour & minute\n   * - ##:##:## = hour, minute, & second\n   * - ##:##:##.### = hour, minute, second, and milliseconds\n   */\n  public static REGEX = /^(\\d\\d?):?(\\d\\d)?:?(\\d\\d)?\\.?(\\d\\d\\d)?$/;\n\n  /**\n   * The hour between 0 and 23\n   */\n  public hour: number;\n\n  /**\n   * The minute between 0 and 59\n   */\n  public minute: number;\n\n  /**\n   * The second between 0 and 59\n   */\n  public second: number;\n\n  /**\n   * The millisecond between 0 and 999\n   */\n  public millisecond: number;\n\n\n  /**\n   * Creates a new Time instance given an hour and optionally a minute, second,\n   * and millisecond. If they have not been specified they default to 0.\n   *\n   * @param hour The hour.\n   * @param minute The minute.\n   * @param second The second.\n   * @param millisecond The millisecond.\n   */\n  public constructor(hour: number, minute: number = Constants.MINUTE_MIN, second: number = Constants.SECOND_MIN, millisecond: number = Constants.MILLIS_MIN)\n  {\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond;\n  }\n\n  /**\n   * Formats this time into a string. The following list describes the available\n   * formatting patterns:\n   *\n   * ### Hour\n   * - H: 0-23\n   * - HH: 00-23\n   * - h: 12,1-12,1-11\n   * - hh: 12,01-12,01-11\n   * - k: 1-24\n   * - kk: 01-24\n   * - a: am,pm\n   * - A: AM,PM\n   * ### Minute\n   * - m: 0-59\n   * - mm: 00-59\n   * ### Second\n   * - s: 0-59\n   * - ss: 00-59\n   * ### Millisecond\n   * - S: 0-9\n   * - SS: 00-99\n   * - SSS: 000-999\n   *\n   * @param format The format to output.\n   * @returns The formatted time.\n   */\n  public format(format: string): string\n  {\n    let formatterEntries = Time.FORMATTERS;\n    let out: string = '';\n\n    for (let i = 0; i < format.length; i++)\n    {\n      let handled: boolean = false;\n\n      for (let k = 0; k < formatterEntries.length && !handled; k++)\n      {\n        let entry = formatterEntries[ k ];\n        let part: string = format.substring( i, i + entry.size );\n\n        if (part.length === entry.size)\n        {\n          let formatter = entry.formats[ part ];\n\n          if (formatter)\n          {\n            out += formatter(this);\n            i += entry.size - 1;\n            handled = true;\n          }\n        }\n      }\n\n      if (!handled)\n      {\n        out += format.charAt(i);\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Determines whether this time is an exact match for the given time.\n   *\n   * @param time The given time to test against.\n   * @returns `true` if the time matches this time, otherwise `false`.\n   */\n  public matches(time: Time): boolean\n  {\n    return this.hour === time.hour &&\n      this.minute === time.minute &&\n      this.second === time.second &&\n      this.millisecond === time.millisecond;\n  }\n\n  /**\n   * Determines whether this time has the same hour as the given time.\n   *\n   * @param time The given time to test against.\n   * @returns `true` if the given hour matches this hour, otherwise `false`.\n   */\n  public matchesHour(time: Time): boolean\n  {\n    return this.hour === time.hour;\n  }\n\n  /**\n   * Determines whether this time has the same hour and minute as the given time.\n   *\n   * @param time The given time to test against.\n   * @returns `true` if the given hour and minute matches, otherwise `false`.\n   */\n  public matchesMinute(time: Time): boolean\n  {\n    return this.hour === time.hour &&\n      this.minute === time.minute;\n  }\n\n  /**\n   * Determines whether this time has the same hour, minute, and second as the\n   * given time.\n   *\n   * @param time The given time to test against.\n   * @returns `true` if the given hour, minute, and second matches, otherwise\n   *    `false`.\n   */\n  public matchesSecond(time: Time): boolean\n  {\n    return this.hour === time.hour &&\n      this.minute === time.minute &&\n      this.second === time.second;\n  }\n\n  /**\n   * Sets the time of this instance to the same time of the given input.\n   *\n   * @param input The time to set this to.\n   * @returns `true` if this time was set, otherwise `false` (invalid input).\n   */\n  public set(input: TimeInput): boolean\n  {\n    let parsed: Time = Time.parse( input );\n    let valid: boolean = !!parsed;\n\n    if (valid)\n    {\n      this.hour = parsed.hour;\n      this.minute = parsed.minute;\n      this.second = parsed.second;\n      this.millisecond = parsed.millisecond;\n    }\n\n    return valid;\n  }\n\n  /**\n   * @returns The number of milliseconds from the start of the day until this\n   *  time.\n   */\n  public toMilliseconds(): number\n  {\n    return this.hour * Constants.MILLIS_IN_HOUR +\n      this.minute * Constants.MILLIS_IN_MINUTE +\n      this.second * Constants.MILLIS_IN_SECOND +\n      this.millisecond;\n  }\n\n  /**\n   * @returns The time formatted using the smallest format that completely\n   *  represents this time.\n   */\n  public toString(): string\n  {\n    if (this.millisecond) return this.format('HH:mm:ss.SSS');\n    if (this.second) return this.format('HH:mm:ss');\n    if (this.minute) return this.format('HH:mm');\n\n    return this.format('HH');\n  }\n\n  /**\n   * @returns A unique identifier for this time. The number returned is in the\n   *  following format: SSSssmmHH\n   */\n  public toIdentifier(): number\n  {\n    return this.hour +\n      this.minute * 100 +\n      this.second * 10000 +\n      this.millisecond * 10000000;\n  }\n\n  /**\n   * @returns An object with hour, minute, second, a millisecond properties if\n   *  they are non-zero on this time.\n   */\n  public toObject(): TimeInput\n  {\n    let out: TimeInput = {\n      hour: this.hour\n    };\n\n    if (this.minute) out.minute = this.minute;\n    if (this.second) out.second = this.second;\n    if (this.millisecond) out.millisecond = this.millisecond;\n\n    return out;\n  }\n\n  /**\n   * Parses a value and tries to convert it to a Time instance.\n   *\n   * @param input The input to parse.\n   * @returns The instance parsed or `null` if it was invalid.\n   * @see [[Parse.time]]\n   */\n  public static parse(input: any): Time\n  {\n    return Parse.time(input);\n  }\n\n  /**\n   * Parses a string and converts it to a Time instance. If the string is not\n   * in a valid format `null` is returned.\n   *\n   * @param time The string to parse.\n   * @returns The instance parsed or `null` if it was invalid.\n   * @see [[Time.REGEX]]\n   */\n  public static fromString(time: string): Time\n  {\n    let matches: string[] = this.REGEX.exec( time );\n\n    if (!matches)\n    {\n      return null;\n    }\n\n    let h: number = parseInt(matches[1]) || 0;\n    let m: number = parseInt(matches[2]) || 0;\n    let s: number = parseInt(matches[3]) || 0;\n    let l: number = parseInt(matches[4]) || 0;\n\n    return this.build(h, m, s, l);\n  }\n\n  /**\n   * Parses a number and converts it to a Time instance. The number is assumed\n   * to be in the [[Time.toIdentifier]] format.\n   *\n   * @param time The number to parse.\n   * @returns The instance parsed.\n   */\n  public static fromIdentifier(time: number): Time\n  {\n    let h: number = time % 100;\n    let m: number = Math.floor(time / 100) % 100;\n    let s: number = Math.floor(time / 10000) % 100;\n    let l: number = Math.floor(time / 10000000) % 1000;\n\n    return this.build(h, m, s, l);\n  }\n\n  /**\n   * Returns a new instance given an hour and optionally a minute, second,\n   * and millisecond. If they have not been specified they default to 0.\n   *\n   * @param hour The hour.\n   * @param minute The minute.\n   * @param second The second.\n   * @param millisecond The millisecond.\n   * @returns A new instance.\n   */\n  public static build(hour: number, minute: number = Constants.MINUTE_MIN, second: number = Constants.SECOND_MIN, millisecond: number = Constants.MILLIS_MIN): Time\n  {\n    return new Time(hour, minute, second, millisecond)\n  }\n\n  /**\n   * A set of formatting functions keyed by their format string.\n   */\n  public static FORMATTERS = [\n    {\n      size: 3,\n      formats: {\n        SSS: (t: Time) => fn.padNumber(t.millisecond, 3)\n      }\n    },\n    {\n      size: 2,\n      formats: {\n        HH: (t: Time) => fn.padNumber(t.hour, 2),\n        hh: (t: Time) => fn.padNumber((t.hour % 12) || 12, 2),\n        kk: (t: Time) => fn.padNumber(t.hour + 1, 2),\n        mm: (t: Time) => fn.padNumber(t.minute, 2),\n        ss: (t: Time) => fn.padNumber(t.second, 2),\n        SS: (t: Time) => fn.padNumber(t.millisecond, 3, 2)\n      }\n    },\n    {\n      size: 1,\n      formats: {\n        A: (t: Time) => t.hour < 12 ? 'AM' : 'PM',\n        a: (t: Time) => t.hour < 12 ? 'am' : 'pm',\n        H: (t: Time) => t.hour + '',\n        h: (t: Time) => ((t.hour % 12) || 12) + '',\n        k: (t: Time) => (t.hour + 1) + '',\n        m: (t: Time) => t.minute + '',\n        s: (t: Time) => t.second + '',\n        S: (t: Time) => fn.padNumber(t.millisecond, 3, 1)\n      }\n    }\n  ];\n\n}\n","\nimport { Functions as fn } from './Functions';\nimport { FrequencyCheck } from './Frequency';\nimport { Schedule, ScheduleInput } from './Schedule';\nimport { ScheduleModifier } from './ScheduleModifier';\nimport { Constants } from './Constants';\nimport { Day, DayProperty, DayInput, DurationInput } from './Day';\nimport { Event } from './Event';\nimport { Time } from './Time';\n\n\n/**\n * The class which takes user input and parses it to specific structures.\n */\nexport class Parse\n{\n\n  /**\n   * Parses a value and converts it to a [[FrequencyCheck]].\n   *\n   * @param input The input to parse into a function.\n   * @param property The [[Day]] property the frequency is for.\n   * @returns A function which determines whether a value matches a frequency.\n   * @see [[Schedule]]\n   */\n  public static frequency(input: any, property: DayProperty): FrequencyCheck\n  {\n    let check: FrequencyCheck = (value: number) => {\n      return true;\n    };\n\n    check.given = false;\n\n    if (fn.isFrequencyValueEvery(input))\n    {\n      let every: number = input.every;\n      let offset: number = (input.offset || 0) % every;\n\n      check = (value: number) => {\n        return value % every === offset;\n      };\n      check.given = true;\n    }\n\n    if (fn.isFrequencyValueOneOf(input))\n    {\n      let map: object = {};\n\n      for (let i = 0; i < input.length; i++) {\n        map[ input[ i ] ] = true;\n      }\n\n      check = (value: number) => {\n        return !!map[ value ];\n      };\n      check.given = true;\n    }\n\n    check.input = fn.coalesce( input, null );\n    check.property = property;\n\n    return check;\n  }\n\n  /**\n   * Parses [[DayInput]] into a [[Day]] instance.\n   *\n   * ```typescript\n   * Parse.day( 65342300 );               // UTC timestamp\n   * Parse.day( '01/02/2014' );           // strings in many formats\n   * Parse.day( day );                    // return a passed instance\n   * Parse.day( [2018, 0, 2] );           // array: 01/02/2018\n   * Parse.day( {year: 2018, month: 2} ); // object: 03/01/2018\n   * Parse.day( true );                   // today\n   * ```\n   *\n   * @param input The input to parse.\n   * @returns The Day parsed or `null` if the value is not valid.\n   */\n  public static day(input: DayInput): Day\n  {\n    if (fn.isNumber(input))\n    {\n      return Day.unix( <number>input );\n    }\n    else if (fn.isString(input))\n    {\n      return Day.fromString( <string>input );\n    }\n    else if (input instanceof Day)\n    {\n      return input;\n    }\n    else if (fn.isArray( input ))\n    {\n      return Day.fromArray( <number[]>input );\n    }\n    else if (fn.isObject( input ))\n    {\n      return Day.fromObject( <object>input );\n    }\n    else if (input === true)\n    {\n      return Day.today();\n    }\n\n    return null;\n  }\n\n  /**\n   * Parses a value and tries to convert it to a Time instance.\n   *\n   * ```typescript\n   * Parse.time( time );      // return a passed instance\n   * Parse.time( 9 );         // 09:00:00.000\n   * Parse.time( 3009 );      // 09:30:00.000\n   * Parse.time( 593009 );    // 09:30:59.000\n   * Parsetime( '09' );       // 09:00:00.000\n   * Parse.time( '9:30' );    // 09:30:00.000\n   * Parse.time( '9:30:59' ); // 09:30:59.000\n   * Parse.time( {hour: 2} ); // 02:00:00.000\n   * ```\n   *\n   * @param input The input to parse.\n   * @returns The instance parsed or `null` if it was invalid.\n   * @see [[Time.fromIdentifier]]\n   * @see [[Time.fromString]]\n   */\n  public static time(input: any): Time\n  {\n    if (input instanceof Time)\n    {\n      return input;\n    }\n    if (fn.isNumber(input))\n    {\n      return Time.fromIdentifier( <number>input );\n    }\n    if (fn.isString(input))\n    {\n      return Time.fromString( <string>input );\n    }\n    if (fn.isObject(input) && fn.isNumber(input.hour))\n    {\n      return new Time(input.hour, input.minute, input.second, input.millisecond);\n    }\n\n    return null;\n  }\n\n  /**\n   * Parses a value and tries to convert it to an array of Time instances.\n   * If any of the given values are not a valid time value then the resulting\n   * array will not contain a time instance.\n   *\n   * @param input The input to parse.\n   * @returns A non-null array of time instances.\n   * @see [[Parse.time]]\n   */\n  public static times(input: any): Time[]\n  {\n    let times: Time[] = [];\n\n    if (fn.isArray(input))\n    {\n      for (let timeInput of input)\n      {\n        let time = this.time( timeInput );\n\n        if (time)\n        {\n          times.push( time );\n        }\n      }\n\n      // Sort times from earliest to latest.\n      times.sort((a, b) =>\n      {\n        return a.toMilliseconds() - b.toMilliseconds();\n      });\n    }\n\n    return times;\n  }\n\n  /**\n   * Parses an array of excluded days into a map of excluded days where the\n   * array value and returned object key are [[Day.dayIdentifier]].\n   *\n   * ```typescript\n   * Parse.modifier( [ 20180101, 20140506 ] );            // {'20180101': true, '20140506': true}\n   * Parse.modifier( [ 20180101, Day.build(2014,4,6) ] ); // {'20180101': true, '20140506': true}\n   * ```\n   *\n   * @param input The input to parse.\n   * @param value The default value if the input given is an array of identifiers.\n   * @param parseMeta A function to use to parse a modifier.\n   * @param out The modifier to set the identifiers and values of and return.\n   * @returns The object with identifier keys and `true` values.\n   * @see [[Day.dayIdentifier]]\n   */\n  public static modifier<T>(input: any, value: T,\n    parseMeta: (input: any) => T = (x => <T>x),\n    out: ScheduleModifier<T> = new ScheduleModifier<T>()): ScheduleModifier<T>\n  {\n    let map = {};\n\n    if (fn.isArray(input))\n    {\n      for (let identifier of input)\n      {\n        if (identifier instanceof Day)\n        {\n          map[ identifier.dayIdentifier ] = value;\n        }\n        else if (fn.isNumber(identifier))\n        {\n          map[ <number>identifier ] = value;\n        }\n        else if (fn.isString(identifier))\n        {\n          map[ <string>identifier ] = value;\n        }\n      }\n    }\n\n    if (fn.isObject(input))\n    {\n      for (let identifier in input)\n      {\n        map[ identifier ] = parseMeta( input[ identifier ] );\n      }\n    }\n\n    out.map = map;\n\n    return out;\n  }\n\n  /**\n   * Parses an object which specifies a schedule where events may or may not\n   * repeat and they may be all day events or at specific times.\n   *\n   * @param input The input to parse into a schedule.\n   * @param parseMeta A function to use when parsing meta input into the desired type.\n   * @param out The schedule to set the values of and return.\n   * @returns An instance of the parsed [[Schedule]].\n   */\n  public static schedule<M>(input: ScheduleInput<M> | Schedule<M>,\n    parseMeta: (input: any) => M = (x => <M>x),\n    out: Schedule<M> = new Schedule<M>()): Schedule<M>\n  {\n    if (input instanceof Schedule)\n    {\n      return input;\n    }\n\n    let on: Day = this.day( input.on );\n    let times: Time[] = this.times( input.times );\n    let fullDay: boolean = times.length === 0;\n\n    if (on)\n    {\n      input.start = on.start();\n      input.end = on.end();\n      input.year = [on.year];\n      input.month = [on.month];\n      input.dayOfMonth = [on.dayOfMonth];\n    }\n\n    out.times = times;\n    out.duration = fn.coalesce( input.duration, Constants.DURATION_DEFAULT );\n    out.durationUnit = <DurationInput>fn.coalesce( input.durationUnit, Constants.DURATION_DEFAULT_UNIT( fullDay ) );\n    out.start = this.day( input.start );\n    out.end = this.day( input.end );\n    out.exclude = this.modifier( input.exclude, true, undefined, out.exclude );\n    out.include = this.modifier( input.include, true, undefined, out.include );\n    out.cancel = this.modifier( input.cancel, true, undefined, out.cancel );\n    out.meta = this.modifier( input.meta, null, parseMeta, out.meta );\n    out.year = this.frequency( input.year, 'year' );\n    out.month = this.frequency( input.month, 'month' );\n    out.week = this.frequency( input.week, 'week' );\n    out.weekOfYear = this.frequency( input.weekOfYear, 'weekOfYear' );\n    out.weekspanOfYear = this.frequency( input.weekspanOfYear, 'weekspanOfYear' );\n    out.fullWeekOfYear = this.frequency( input.fullWeekOfYear, 'fullWeekOfYear' );\n    out.lastWeekspanOfYear = this.frequency( input.lastWeekspanOfYear, 'lastWeekspanOfYear' );\n    out.lastFullWeekOfYear = this.frequency( input.lastFullWeekOfYear, 'lastFullWeekOfYear' );\n    out.weekOfMonth = this.frequency( input.weekOfMonth, 'weekOfMonth' );\n    out.weekspanOfMonth = this.frequency( input.weekspanOfMonth, 'weekspanOfMonth' );\n    out.fullWeekOfMonth = this.frequency( input.fullWeekOfMonth, 'fullWeekOfMonth' );\n    out.lastWeekspanOfMonth = this.frequency( input.lastWeekspanOfMonth, 'lastWeekspanOfMonth' );\n    out.lastFullWeekOfMonth = this.frequency( input.lastFullWeekOfMonth, 'lastFullWeekOfMonth' );\n    out.dayOfWeek = this.frequency( input.dayOfWeek, 'dayOfWeek' );\n    out.dayOfMonth = this.frequency( input.dayOfMonth, 'dayOfMonth' );\n    out.lastDayOfMonth = this.frequency( input.lastDayOfMonth, 'lastDayOfMonth' );\n    out.dayOfYear = this.frequency( input.dayOfYear, 'dayOfYear' );\n    out.updateDurationInDays();\n    out.updateChecks();\n\n    return out;\n  }\n\n  /**\n   * Parses an array of [[FrequencyCheck]] functions and returns an array of\n   * functions for only the checks that were specified by the user.\n   *\n   * @param checks The array of check functions to filter through.\n   * @returns The array of user specified checks.\n   */\n  public static givenFrequency(checks: FrequencyCheck[]): FrequencyCheck[]\n  {\n    let out: FrequencyCheck[] = [];\n\n    for (let check of checks)\n    {\n      if (check.given)\n      {\n        out.push( check );\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parses [[EventInput]] and returns an [[Event]].\n   *\n   * @param input The input to parse.\n   * @param parseData A function to use when parsing data input into the desired type.\n   * @param parseMeta A function to use when parsing meta input into the desired type.\n   * @returns The parsed value.\n   */\n  public static event<T, M>(input: any,\n    parseData: (input: any) => T = (x => <T>x),\n    parseMeta: (input: any) => M = (x => <M>x)): Event<T, M>\n  {\n    if (input instanceof Event)\n    {\n      return input;\n    }\n\n    if (!input.schedule)\n    {\n      return null;\n    }\n\n    let schedule: Schedule<M> = this.schedule<M>( input.schedule, parseMeta );\n\n    return new Event( schedule, parseData( input.data ), input.id, input.visible );\n  }\n\n  /**\n   * Parses a schedule from a CRON pattern. TODO\n   */\n  public static cron<M>(pattern: string, out: Schedule<M> = new Schedule<M>()): Schedule<M>\n  {\n    return out;\n  }\n\n}\n","\nimport { Identifier, IdentifierInput } from './Identifier';\nimport { Constants } from './Constants';\nimport { Op, operate } from './Operation';\nimport { Parse } from './Parse';\nimport { Time } from './Time';\n\n// @ts-ignore\nimport * as moment from 'moment';\n\n\n/**\n * Valid durations that can be specified.\n */\nexport type DurationInput = moment.unitOfTime.DurationConstructor;\n\n/**\n * All valid types which may be converted to a [[Day]] instance.\n *\n * - `number`: A UNIX timestamp.\n * - `string`: A string representation of a date.\n * - `Day`: An existing [[Day]] instance.\n * - `number[]`: An array of numbers specifying any of: [year, month, dayOfMonth, hour, minute, second, millisecond].\n * - `object`: An object with any of the following properties: year, month, dayOfMonth, hour, minute, second, millisecond.\n * - `true`: This will be interpreted as [[Day.today]]\n */\nexport type DayInput = number | string | Day | number[] | object | true;\n\n/**\n * One of the properties on the [[Day]] object.\n */\nexport type DayProperty = keyof Day;\n\n/**\n * A class which represents a point in time as\n */\nexport class Day\n{\n\n  /**\n   *\n   */\n  public readonly date: moment.Moment;\n\n  /**\n   *\n   */\n  public readonly time: number;\n\n  /**\n   *\n   */\n  public readonly millis: number;\n\n  /**\n   *\n   */\n  public readonly seconds: number;\n\n  /**\n   *\n   */\n  public readonly minute: number;\n\n  /**\n   *\n   */\n  public readonly hour: number;\n\n  /**\n   *\n   */\n  public readonly month: number;\n\n  /**\n   *\n   */\n  public readonly year: number;\n\n  /**\n   *\n   */\n  public readonly quarter: number;\n\n\n  /**\n   *\n   */\n  public readonly dayOfWeek: number;\n\n  /**\n   *\n   */\n  public readonly dayOfMonth: number;\n\n  /**\n   *\n   */\n  public readonly lastDayOfMonth: number;\n\n  /**\n   *\n   */\n  public readonly dayOfYear: number;\n\n\n  /**\n   *\n   */\n  public readonly week: number;\n\n  /**\n   *\n   */\n  public readonly weekOfYear: number;\n\n  /**\n   *\n   */\n  public readonly weekspanOfYear: number;\n\n  /**\n   *\n   */\n  public readonly fullWeekOfYear: number;\n\n  /**\n   *\n   */\n  public readonly lastWeekspanOfYear: number;\n\n  /**\n   *\n   */\n  public readonly lastFullWeekOfYear: number;\n\n\n  /**\n   *\n   */\n  public readonly weekOfMonth: number;\n\n  /**\n   *\n   */\n  public readonly weekspanOfMonth: number;\n\n  /**\n   *\n   */\n  public readonly fullWeekOfMonth: number;\n\n  /**\n   *\n   */\n  public readonly lastWeekspanOfMonth: number;\n\n  /**\n   *\n   */\n  public readonly lastFullWeekOfMonth: number;\n\n\n  /**\n   *\n   */\n  public readonly timeIdentifier: IdentifierInput;\n\n  /**\n   *\n   */\n  public readonly dayIdentifier: IdentifierInput;\n\n  /**\n   *\n   */\n  public readonly weekIdentifier: IdentifierInput;\n\n  /**\n   *\n   */\n  public readonly monthIdentifier: IdentifierInput;\n\n  /**\n   *\n   */\n  public readonly quarterIdentifier: IdentifierInput;\n\n\n\n  /**\n   *\n   */\n  public constructor(date: moment.Moment)\n  {\n    this.date                 = date;\n    this.time                 = date.valueOf();\n    this.millis               = date.millisecond();\n    this.seconds              = date.second();\n    this.minute               = date.minute();\n    this.hour                 = date.hour();\n    this.month                = date.month();\n    this.year                 = date.year();\n    this.quarter              = date.quarter();\n    this.dayOfWeek            = date.day();\n    this.dayOfMonth           = date.date();\n    this.dayOfYear            = date.dayOfYear();\n    this.week                 = date.week();\n\n    this.lastDayOfMonth       = Day.getLastDayOfMonth( date );\n    this.weekOfYear           = Day.getWeekOfYear( date );\n    this.weekspanOfYear       = Day.getWeekspanOfYear( date );\n    this.fullWeekOfYear       = Day.getFullWeekOfYear( date );\n    this.lastWeekspanOfYear   = Day.getLastWeekspanOfYear( date );\n    this.lastFullWeekOfYear   = Day.getLastFullWeekOfYear( date );\n\n    this.weekOfMonth          = Day.getWeekOfMonth( date );\n    this.weekspanOfMonth      = Day.getWeekspanOfMonth( date );\n    this.fullWeekOfMonth      = Day.getFullWeekOfMonth( date );\n    this.lastWeekspanOfMonth  = Day.getLastWeekspanOfMonth( date );\n    this.lastFullWeekOfMonth  = Day.getLastFullWeekOfMonth( date );\n\n    this.timeIdentifier       = Identifier.Time.get( this );\n    this.dayIdentifier        = Identifier.Day.get( this);\n    this.weekIdentifier       = Identifier.Week.get( this);\n    this.monthIdentifier      = Identifier.Month.get( this);\n    this.quarterIdentifier    = Identifier.Quarter.get( this );\n  }\n\n  // Same\n\n  /**\n   *\n   */\n  public sameDay(day: Day): boolean\n  {\n    return this.dayIdentifier === day.dayIdentifier;\n  }\n\n  /**\n   *\n   */\n  public sameMonth(day: Day): boolean\n  {\n    return this.monthIdentifier === day.monthIdentifier;\n  }\n\n  /**\n   *\n   */\n  public sameWeek(day: Day): boolean\n  {\n    return this.weekIdentifier === day.weekIdentifier;\n  }\n\n  /**\n   *\n   */\n  public sameYear(day: Day): boolean\n  {\n    return this.year === day.year;\n  }\n\n  /**\n   *\n   */\n  public sameQuarter(day: Day): boolean\n  {\n    return this.quarterIdentifier === day.quarterIdentifier;\n  }\n\n  /**\n   *\n   */\n  public sameHour(day: Day): boolean {\n    return this.dayIdentifier === day.dayIdentifier && this.hour === day.hour;\n  }\n\n  /**\n   *\n   */\n  public sameMinute(day: Day): boolean {\n    return this.timeIdentifier === day.timeIdentifier;\n  }\n\n  /**\n   *\n   */\n  public sameTime(time: Time): boolean {\n    return this.hour === time.hour && this.minute === time.minute && this.seconds === time.second && this.millis === time.millisecond;\n  }\n\n  // Comparison\n\n  /**\n   *\n   */\n  public isBefore(day: Day, precision?: moment.unitOfTime.StartOf): boolean {\n    return this.date.isBefore( day.date, precision );\n  }\n\n  /**\n   *\n   */\n  public isSameOrBefore(day: Day, precision?: moment.unitOfTime.StartOf): boolean {\n    return this.date.isSameOrBefore( day.date, precision );\n  }\n\n  /**\n   *\n   */\n  public isAfter(day: Day, precision?: moment.unitOfTime.StartOf): boolean {\n    return this.date.isAfter( day.date, precision );\n  }\n\n  /**\n   *\n   */\n  public isSameOrAfter(day: Day, precision?: moment.unitOfTime.StartOf): boolean {\n    return this.date.isSameOrAfter( day.date, precision );\n  }\n\n  /**\n   *\n   */\n  public max(day: Day): Day {\n    return this.date.isAfter( day.date ) ? this : day;\n  }\n\n  /**\n   *\n   */\n  public min(day: Day): Day {\n    return this.date.isBefore( day.date ) ? this : day;\n  }\n\n  // Between\n\n  public millisBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'milliseconds', true ), op, absolute );\n  }\n\n  public secondsBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'seconds', true ), op, absolute );\n  }\n\n  public minutesBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'minutes', true ), op, absolute );\n  }\n\n  public hoursBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'hours', true ), op, absolute );\n  }\n\n  public daysBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'days', true ), op, absolute );\n  }\n\n  public weeksBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'weeks', true ), op, absolute );\n  }\n\n  public monthsBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'months', true ), op, absolute );\n  }\n\n  public yearsBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'years', true ), op, absolute );\n  }\n\n  public isBetween(start: Day, end: Day, inclusive: boolean = true): boolean {\n    return this.date.isBetween(start.date, end.date, null, inclusive ? '[]' : '[)');\n  }\n\n  public mutate(mutator: (date: moment.Moment) => void): Day {\n    var d = this.toMoment();\n    mutator( d );\n    return new Day( d );\n  }\n\n  public add(amount: number, unit: string): Day {\n    return this.mutate(d => d.add(amount, <DurationInput>unit));\n  }\n\n  public relative(millis: number): Day {\n    return this.mutate(d => d.add(millis, 'milliseconds'));\n  }\n\n  // Days\n\n  public relativeDays(days: number): Day {\n    return this.mutate(d => d.add(days, 'days'));\n  }\n\n  public prev(days: number = 1): Day {\n    return this.relativeDays( -days );\n  }\n\n  public next(days: number = 1): Day {\n    return this.relativeDays( days );\n  }\n\n  public withDayOfMonth(day: number): Day {\n    return this.mutate(d => d.date(day));\n  }\n\n  public withDayOfWeek(dayOfWeek: number): Day {\n    return this.mutate(d => d.day(dayOfWeek));\n  }\n\n  public withDayOfYear(dayOfYear: number): Day {\n    return this.mutate(d => d.dayOfYear(dayOfYear));\n  }\n\n  // Month\n\n  public withMonth(month: number): Day {\n    return this.mutate(d => d.month(month));\n  }\n\n  public relativeMonths(months: number): Day {\n    return this.mutate(d => d.add(months, 'months'));\n  }\n\n  public prevMonth(months: number = 1): Day {\n    return this.relativeMonths( -months );\n  }\n\n  public nextMonth(months: number = 1): Day {\n    return this.relativeMonths( months );\n  }\n\n  // Week Of Year\n\n  public withWeek(week: number, relativeWeek: number = this.week): Day {\n    return this.mutate(d => d.add((week - relativeWeek) * Constants.DAYS_IN_WEEK, 'days'));\n  }\n\n  public withWeekOfYear(week: number): Day {\n    return this.withWeek(week, this.weekOfYear);\n  }\n\n  public withFullWeekOfYear(week: number): Day {\n    return this.withWeek(week, this.fullWeekOfYear);\n  }\n\n  public withWeekspanOfYear(week: number): Day {\n    return this.withWeek(week, this.weekspanOfYear);\n  }\n\n  public withWeekOfMonth(week: number): Day {\n    return this.withWeek(week, this.weekOfMonth);\n  }\n\n  public withWeekspanOfMonth(week: number): Day {\n    return this.withWeek(week, this.weekspanOfMonth);\n  }\n\n  public withFullWeekOfMonth(week: number): Day {\n    return this.withWeek(week, this.fullWeekOfMonth);\n  }\n\n  public relativeWeeks(weeks: number): Day {\n    return this.mutate(d => d.add(weeks, 'weeks'));\n  }\n\n  public prevWeek(weeks: number = 1): Day {\n    return this.relativeWeeks( -weeks );\n  }\n\n  public nextWeek(weeks: number = 1): Day {\n    return this.relativeWeeks( weeks );\n  }\n\n  // Year\n\n  public withYear(year: number): Day {\n    return this.mutate(d => d.year(year));\n  }\n\n  public relativeYears(years: number): Day {\n    return this.mutate(d => d.add(years, 'year'));\n  }\n\n  public prevYear(years: number = 1): Day {\n    return this.relativeYears( -years );\n  }\n\n  public nextYear(years: number = 1): Day {\n    return this.relativeYears( years );\n  }\n\n  // Hour\n\n  public withHour(hour: number): Day {\n    return this.mutate(d => d.hour(hour));\n  }\n\n  public relativeHours(hours: number): Day {\n    return this.mutate(d => d.add(hours, 'hours'));\n  }\n\n  public prevHour(hours: number = 1): Day {\n    return this.relativeHours( -hours );\n  }\n\n  public nextHour(hours: number = 1): Day {\n    return this.relativeHours( hours );\n  }\n\n  // Time\n\n  public withTimes(\n      hour: number = Constants.HOUR_MIN,\n      minute: number = Constants.MINUTE_MIN,\n      second: number = Constants.SECOND_MIN,\n      millisecond: number = Constants.MILLIS_MIN): Day {\n    return this.mutate(d => d.set({hour, minute, second, millisecond}));\n  }\n\n  public withTime(time: Time): Day {\n    return this.withTimes(time.hour, time.minute, time.second, time.millisecond);\n  }\n\n  public asTime(): Time {\n    return new Time(this.hour, this.minute, this.seconds, this.millis);\n  }\n\n  // Start & End\n\n  // Time\n\n  public start(): Day {\n    return this.mutate(d => d.startOf('day'));\n  }\n\n  public isStart(): boolean {\n    return this.hour === Constants.HOUR_MIN &&\n      this.minute === Constants.MINUTE_MIN &&\n      this.seconds === Constants.SECOND_MIN &&\n      this.millis === Constants.MILLIS_MIN;\n  }\n\n  public end(inclusive: boolean = true): Day {\n    return inclusive ?\n      this.mutate(d => d.endOf('day')) :\n      this.mutate(d => d.startOf('day').add(1, 'day'));\n  }\n\n  public isEnd(): boolean {\n    return this.hour === Constants.HOUR_MAX &&\n      this.minute === Constants.MINUTE_MAX &&\n      this.seconds === Constants.SECOND_MAX &&\n      this.millis === Constants.MILLIS_MAX;\n  }\n\n  // Hour\n\n  public startOfHour(): Day {\n    return this.mutate(d => d.startOf('hour'));\n  }\n\n  public isStartOfHour(): boolean {\n    return this.minute === Constants.MINUTE_MIN &&\n      this.seconds === Constants.SECOND_MIN &&\n      this.millis === Constants.MILLIS_MIN;\n  }\n\n  public endOfHour(inclusive: boolean = true): Day {\n    return inclusive ?\n      this.mutate(d => d.endOf('hour')) :\n      this.mutate(d => d.startOf('hour').add(1, 'hour'));\n  }\n\n  public isEndOfHour(): boolean {\n    return this.minute === Constants.MINUTE_MAX &&\n      this.seconds === Constants.SECOND_MAX &&\n      this.millis === Constants.MILLIS_MAX;\n  }\n\n  // Week\n\n  public startOfWeek(): Day {\n    return this.mutate(d => d.startOf('week'));\n  }\n\n  public isStartOfWeek(): boolean {\n    return this.dayOfWeek === Constants.WEEKDAY_MIN;\n  }\n\n  public endOfWeek(inclusive: boolean = true): Day {\n    return inclusive ?\n      this.mutate(d => d.endOf('week')) :\n      this.mutate(d => d.startOf('week').add(1, 'week'));\n  }\n\n  public isEndOfWeek(): boolean {\n    return this.dayOfWeek === Constants.WEEKDAY_MAX;\n  }\n\n  // Month\n\n  public startOfMonth(): Day {\n    return this.mutate(d => d.startOf('month'));\n  }\n\n  public isStartOfMonth(): boolean {\n    return this.dayOfMonth === Constants.DAY_MIN;\n  }\n\n  public endOfMonth(inclusive: boolean = true): Day {\n    return inclusive ?\n      this.mutate(d => d.endOf('month')) :\n      this.mutate(d => d.startOf('month').add(1, 'month'));\n  }\n\n  public isEndOfMonth(): boolean {\n    return this.dayOfMonth === this.daysInMonth();\n  }\n\n  // Year\n\n  public startOfYear(): Day {\n    return this.mutate(d => d.startOf('year'));\n  }\n\n  public isStartOfYear(): boolean {\n    return this.month === Constants.MONTH_MIN && this.dayOfMonth === Constants.DAY_MIN;\n  }\n\n  public endOfYear(inclusive: boolean = true): Day {\n    return inclusive ?\n      this.mutate(d => d.endOf('year')) :\n      this.mutate(d => d.startOf('year').add(1, 'year'));\n  }\n\n  public isEndOfYear(): boolean {\n    return this.month === Constants.MONTH_MAX && this.dayOfMonth === Constants.DAY_MAX;\n  }\n\n  // Days In X\n\n  public daysInMonth(): number {\n    return this.date.daysInMonth();\n  }\n\n  public daysInYear(): number {\n    return this.endOfYear().dayOfYear;\n  }\n\n  public weeksInYear(): number {\n    return this.date.weeksInYear();\n  }\n\n  // Display\n\n  public format(format: string): string {\n    return this.date.format( format );\n  }\n\n  public utc(keepLocalTime?: boolean): Day {\n    return this.mutate(d => d.utc(keepLocalTime));\n  }\n\n  public toMoment(): moment.Moment {\n    return this.date.clone();\n  }\n\n  public toDate(): Date {\n    return this.date.toDate();\n  }\n\n  public toArray(): number[] {\n    return this.date.toArray();\n  }\n\n  public toJSON(): string {\n    return this.date.toJSON();\n  }\n\n  public toISOString(keepOffset: boolean = false): string {\n    return this.date.toISOString( keepOffset );\n  }\n\n  public toObject(): object {\n    return this.date.toObject();\n  }\n\n  public toString(): string {\n    return this.date.toString();\n  }\n\n  // State\n\n  public isDST(): boolean {\n    return this.date.isDST();\n  }\n\n  public isLeapYear(): boolean {\n    return this.date.isLeapYear();\n  }\n\n  // Instances\n\n  public static now(): Day {\n    return new Day(moment());\n  }\n\n  public static today(): Day {\n    return this.now().start();\n  }\n\n  public static tomorrow(): Day {\n    return this.today().next();\n  }\n\n  public static fromMoment(moment: moment.Moment): Day {\n    return moment && moment.isValid() ? new Day( moment ) : null;\n  }\n\n  public static unix(millis: number): Day {\n    return this.fromMoment(moment(millis));\n  }\n\n  public static unixSeconds(millis: number): Day {\n    return this.fromMoment(moment.unix(millis));\n  }\n\n  public static parse(input: DayInput): Day {\n    return Parse.day(input);\n  }\n\n  public static fromString(input: string): Day {\n    return this.fromMoment(moment(input));\n  }\n\n  public static fromFormat(input: string, formats: string | string[]): Day {\n    return this.fromMoment(moment(input, formats));\n  }\n\n  public static fromObject(input: object): Day {\n    return this.fromMoment(moment(input));\n  }\n\n  public static fromDate(input: Date): Day {\n    return this.fromMoment(moment(input));\n  }\n\n  public static fromArray(input: number[]): Day {\n    return this.fromMoment(moment(input));\n  }\n\n  public static fromDayIdentifier(id: number): Day {\n    let date: number = id % 100;\n    let month: number = (Math.floor(id / 100) % 100) - 1;\n    let year: number = Math.floor(id / 10000);\n\n    return this.build(year, month, date);\n  }\n\n  public static build(year: number, month: number,\n    date: number = Constants.DAY_MIN,\n    hour: number = Constants.HOUR_MIN,\n    minute: number = Constants.MINUTE_MIN,\n    second: number = Constants.SECOND_MIN,\n    millisecond: number = Constants.MILLIS_MIN): Day\n  {\n    return new Day( moment({year, month, date, hour, minute, second, millisecond}) );\n  }\n\n\n\n\n\n\n\n\n  public static getWeekspanOfYear(date: moment.Moment): number\n  {\n    return Math.floor( (date.dayOfYear() - 1) / Constants.DAYS_IN_WEEK );\n  }\n\n  public static getLastWeekspanOfYear(date: moment.Moment): number\n  {\n    let lastOfYear = date.clone().endOf('year');\n    let daysInYear: number = lastOfYear.dayOfYear();\n\n    return Math.floor( (daysInYear - date.dayOfYear()) / Constants.DAYS_IN_WEEK );\n  }\n\n  public static getWeekOfYear(date: moment.Moment): number\n  {\n    let firstOfYear = date.clone().startOf('year');\n    let weeks: number = date.week();\n\n    return firstOfYear.day() > Constants.WEEK_OF_MONTH_MINIMUM_WEEKDAY ? weeks - 1 : weeks;\n  }\n\n  public static getFullWeekOfYear(date: moment.Moment): number\n  {\n    let firstOfYear = date.clone().startOf('year');\n    let weeks: number = date.week();\n\n    return firstOfYear.day() === Constants.WEEKDAY_MIN ? weeks : weeks - 1;\n  }\n\n  public static getLastFullWeekOfYear(date: moment.Moment): number\n  {\n    let firstOfYear = date.clone().startOf('year');\n    let weeks: number = date.week();\n    let weeksMax: number = date.weeksInYear();\n    let lastWeek: number = weeksMax - weeks;\n\n    return firstOfYear.day() === Constants.WEEKDAY_MIN ? lastWeek + 1 : lastWeek;\n  }\n\n  public static getWeekspanOfMonth(date: moment.Moment): number\n  {\n    return Math.floor((date.date() - 1) / Constants.DAYS_IN_WEEK);\n  }\n\n  public static getLastWeekspanOfMonth(date: moment.Moment): number\n  {\n    return Math.floor((date.daysInMonth() - date.date()) / Constants.DAYS_IN_WEEK);\n  }\n\n  public static getFullWeekOfMonth(date: moment.Moment): number\n  {\n    return Math.floor((date.date() - 1 - date.day() + Constants.DAYS_IN_WEEK) / Constants.DAYS_IN_WEEK);\n  }\n\n  public static getLastFullWeekOfMonth(date: moment.Moment): number\n  {\n    return Math.floor((date.daysInMonth() - date.date() - (Constants.WEEKDAY_MAX - date.day()) + Constants.DAYS_IN_WEEK) / Constants.DAYS_IN_WEEK);\n  }\n\n  public static getWeekOfMonth(date: moment.Moment): number\n  {\n    let dom = date.date();\n    let dow = date.day();\n    let sundayDate = dom - dow;\n\n    return Math.floor( ( sundayDate + Constants.WEEK_OF_MONTH_MINIMUM_WEEKDAY + 5 ) / Constants.DAYS_IN_WEEK );\n  }\n\n  public static getLastDayOfMonth(date: moment.Moment): number\n  {\n    return date.daysInMonth() - date.date() + 1;\n  }\n\n}\n","\nimport { Op } from './Operation';\nimport { Day } from './Day';\nimport { DaySpan } from './DaySpan';\nimport { CalendarEvent } from './CalendarEvent';\nimport { Iterator } from './Iterator';\n\n\n/**\n * A day in a [[Calendar]] with extra information relative to any selection on\n * the calendar, the current date, or events on the day.\n *\n * @typeparam T The type of data stored in the [[Event]] class.\n * @typeparam M The type of metadata stored in the schedule.\n */\nexport class CalendarDay<T, M> extends Day\n{\n\n  /**\n   * Whether this day is the current day (ex: today).\n   */\n  public currentDay: boolean = false;\n\n  /**\n   * Whether this day is on the same week as the current day (ex: today).\n   */\n  public currentWeek: boolean = false;\n\n  /**\n   * Whether this day is on the same month as the current day (ex: today).\n   */\n  public currentMonth: boolean = false;\n\n  /**\n   * Whether this day is on the same year as the current day (ex: today).\n   */\n  public currentYear: boolean = false;\n\n  /**\n   * How many days away this day is from the current day (ex: today). If this\n   * day is the current day the offset is 0. If this day is before the current\n   * day it will be the negative number of days away. Otherwise this will be\n   * positive meaning this day is after the current day by the given days.\n   */\n  public currentOffset: number = 0;\n\n  /**\n   * Whether this day is part of a selection on the calendar.\n   */\n  public selectedDay: boolean = false;\n\n  /**\n   * Whether this day is on the same week that the calendar selection is.\n   */\n  public selectedWeek: boolean = false;\n\n  /**\n   * Whether this day is on the same month that the calendar selection is.\n   */\n  public selectedMonth: boolean = false;\n\n  /**\n   * Whether this day is on the same year that the calendar selection is.\n   */\n  public selectedYear: boolean = false;\n\n  /**\n   * Whether this day is in the current calendar or not. Some days are outside\n   * the calendar span and used to fill in weeks. Month calendars will fill in\n   * days so the list of days in the calendar start on Sunday and end on Saturday.\n   */\n  public inCalendar: boolean = false;\n\n  /**\n   * The list of events on this day based on the settings and schedules in the\n   * calendar.\n   */\n  public events: CalendarEvent<T, M>[] = [];\n\n\n  /**\n   * Creates an iterator for the events on this day.\n   *\n   * @returns The new iterator for the events on this day.\n   */\n  public iterateEvents(): Iterator<CalendarEvent<T, M>>\n  {\n    return Iterator.forArray( this.events );\n  }\n\n\n  /**\n   * Updates the current flags on this day given the current day (ex: today).\n   *\n   * @param current The current day of the calendar.\n   */\n  public updateCurrent(current: Day): this\n  {\n    this.currentDay = this.sameDay(current);\n    this.currentWeek = this.sameWeek(current);\n    this.currentMonth = this.sameMonth(current);\n    this.currentYear = this.sameYear(current);\n    this.currentOffset = this.daysBetween(current, Op.DOWN, false);\n\n    return this;\n  }\n\n  /**\n   * Updates the selection flags on this day given the selection range on the\n   * calendar.\n   *\n   * @param selected The span of days selected on the calendar.\n   */\n  public updateSelected(selected: DaySpan): this\n  {\n    this.selectedDay = selected.matchesDay(this);\n    this.selectedWeek = selected.matchesWeek(this);\n    this.selectedMonth = selected.matchesMonth(this);\n    this.selectedYear = selected.matchesYear(this);\n\n    return this;\n  }\n\n  /**\n   * Clears the selection flags on this day. This is done when the selection on\n   * the calendar is cleared.\n   */\n  public clearSelected(): this\n  {\n    this.selectedDay = this.selectedWeek = this.selectedMonth = this.selectedYear = false;\n\n    return this;\n  }\n\n}\n","\nimport { Constants } from './Constants';\nimport { Day } from './Day';\nimport { DaySpan, DaySpanBounds } from './DaySpan';\nimport { Event } from './Event';\nimport { Identifier, IdentifierInput } from './Identifier';\nimport { Schedule } from './Schedule';\n\n\n/**\n * An instance of an [[Event]] on a given day of a [[Calendar]] generated by\n * the event's [[Schedule]].\n *\n * @typeparam T The type of data stored in the [[Event]] class.\n * @typeparam M The type of metadata stored in the schedule and in this class.\n */\nexport class CalendarEvent<T, M>\n{\n\n  /**\n   * The relatively unique identifier of this event. It is generated based on\n   * the index of the schedule in the calendar and the time of day listed in the\n   * schedule. This number will no longer be unique if the schedule has more\n   * than [[Constants.MAX_EVENTS_PER_DAY]] occurrences in a single day\n   * (based on number of times in [[Schedule.times]]).\n   */\n  public id: number;\n\n  /**\n   * The event with the schedule.\n   */\n  public event: Event<T, M>;\n\n  /**\n   * Any metadata specified for this event instance in the schedule.\n   */\n  public meta: M;\n\n  /**\n   * The day this event occurs on.\n   */\n  public day: Day;\n\n  /**\n   * The span of time this event occurs. If this is an all day event this span\n   * will start at the beginning of the day and end at the beginning of the\n   * next day.\n   *\n   * @see [[Schedule.isFullDay]]\n   */\n  public time: DaySpan;\n\n  /**\n   * Whether this event is an all day event.\n   *\n   * @see [[Schedule.isFullDay]]\n   */\n  public fullDay: boolean;\n\n  /**\n   * Whether this event is the first day of an occurrence. A calendar can\n   * generate multiple [[CalendarEvent]] instances over each day it covers if\n   * [[Calendar.repeatCovers]] is true. These instances have matching\n   * [[CalendarEvent.id]] values.\n   */\n  public starting: boolean;\n\n  /**\n   * Whether this event is the last day of an occurrence. A calendar can\n   * generate multiple [[CalendarEvent]] instances over each day it covers if\n   * [[Calendar.repeatCovers]] is true. These instances have matching\n   * [[CalendarEvent.id]] values.\n   */\n  public ending: boolean;\n\n  /**\n   * Whether this event instance was marked as cancelled in the schedule.\n   */\n  public cancelled: boolean;\n\n  /**\n   * The row this event is on in a visual calendar. An event can span multiple\n   * days and it is desirable to have the occurrence on each day to line up.\n   * This is only set when [[Calendar.updateRows]] is true or manually set.\n   * This value makes sense for visual calendars for all day events or when the\n   * visual calendar is not positioning events based on their time span.\n   */\n  public row: number = 0;\n\n  /**\n   * The column this event is on in a visual calendar. An event can have its\n   * time overlap with another event displaying one of the events in another\n   * column. This is only set when [[Calendar.updateColumns]] is true or\n   * manually set. This value makes sense for visual calendars that are\n   * displaying event occurrences at specific times positioned accordingly.\n   */\n  public col: number = 0;\n\n\n  /**\n   * Creates a new event instance given the id, the event paired with the\n   * schedule, the schedule, the time span of the event, and the day on the\n   * calendar the event belongs to.\n   *\n   * @param id The relatively unique identifier of this event.\n   * @param event The event which created this instance.\n   * @param time The time span of this event.\n   * @param actualDay The day on the calendar this event is for.\n   */\n  public constructor(id: number, event: Event<T, M>, time: DaySpan, actualDay: Day)\n  {\n    this.id = id;\n    this.event = event;\n    this.time = time;\n    this.day = actualDay;\n    this.fullDay = event.schedule.isFullDay();\n    this.meta = event.schedule.getMeta( time.start );\n    this.cancelled = event.schedule.isCancelled( time.start );\n    this.starting = time.isPoint || time.start.sameDay( actualDay );\n    this.ending = time.isPoint || time.end.relative(-1).sameDay( actualDay );\n  }\n\n  /**\n   * The id of the schedule uniqe within the calendar which generated this event.\n   */\n  public get scheduleId(): number\n  {\n    return Math.floor( this.id / Constants.MAX_EVENTS_PER_DAY );\n  }\n\n  /**\n   * The start timestamp of the event.\n   */\n  public get start(): Day\n  {\n    return this.time.start;\n  }\n\n  /**\n   * The end timestamp of the event.\n   */\n  public get end(): Day\n  {\n    return this.time.end;\n  }\n\n  /**\n   * The schedule which generated this event.\n   */\n  public get schedule(): Schedule<M>\n  {\n    return this.event.schedule;\n  }\n\n  /**\n   * The related event data.\n   */\n  public get data(): T\n  {\n    return this.event.data;\n  }\n\n  /**\n   * An [[IdentifierInput]] for the start of this event.\n   */\n  public get identifier(): IdentifierInput\n  {\n    return this.identifierType.get( this.start );\n  }\n\n  /**\n   * The [[Identifier]] for this event. Either [[Identifier.Day]] or\n   * [[Identifier.Time]].\n   */\n  public get identifierType(): Identifier\n  {\n    return this.schedule.identifierType;\n  }\n\n  /**\n   * Returns a delta value between 0 and 1 which represents where the\n   * [[CalendarEvent.start]] is relative to [[CalendarEvent.day]]. The delta\n   * value would be less than 0 if the start of the event is before\n   * [[CalendarEvent.day]].\n   */\n  public get startDelta(): number\n  {\n    return this.time.startDelta( this.day );\n  }\n\n  /**\n   * Returns a delta value between 0 and 1 which represents where the\n   * [[CalendarEvent.end]] is relative to [[CalendarEvent.day]]. The delta value\n   * would be greater than 1 if the end of the event is after\n   * [[CalendarEvent.day]].\n   */\n  public get endDelta(): number\n  {\n    return this.time.endDelta( this.day );\n  }\n\n  /**\n   * Calculates the bounds for this event if it were placed in a rectangle which\n   * represents a day (24 hour period). By default the returned values are\n   * between 0 and 1 and can be scaled by the proper rectangle dimensions or the\n   * rectangle dimensions can be passed to this function.\n   *\n   * @param dayHeight The height of the rectangle of the day.\n   * @param dayWidth The width of the rectangle of the day.\n   * @param columnOffset The offset in the rectangle of the day to adjust this\n   *    event by if it intersects or is contained in a previous event. This also\n   *    reduces the width of the returned bounds to keep the bounds in the\n   *    rectangle of the day.\n   * @param clip `true` if the bounds should stay in the day rectangle, `false`\n   *    and the bounds may go outside the rectangle of the day for multi-day\n   *    events.\n   * @param offsetX How much to translate the left & right properties by.\n   * @param offsetY How much to translate the top & bottom properties by.\n   * @returns The calculated bounds for this event.\n   */\n  public getTimeBounds(dayHeight: number = 1, dayWidth: number = 1, columnOffset: number = 0.1, clip: boolean = true, offsetX: number = 0, offsetY: number = 0): DaySpanBounds\n  {\n    return this.time.getBounds( this.day, dayHeight, dayWidth, this.col * columnOffset, clip, offsetX, offsetY );\n  }\n\n  /**\n   * Changes the cancellation status of this event. By default this cancels\n   * this event - but `false` may be passed to undo a cancellation.\n   *\n   * @param cancelled Whether the event should be cancelled.\n   */\n  public cancel(cancelled: boolean = true): this\n  {\n    this.schedule.setCancelled( this.start, cancelled );\n    this.cancelled = cancelled;\n\n    return this;\n  }\n\n  /**\n   * Changes the exclusion status of this event. By default this excludes this\n   * event - but `false`  may be passed to undo an exclusion.\n   *\n   * @param excluded Whether the event should be excluded.\n   */\n  public exclude(excluded: boolean = true): this\n  {\n    this.schedule.setExcluded( this.start, excluded );\n\n    return this;\n  }\n\n  /**\n   * Moves this event to potentially another day and time. A move is\n   * accomplished by excluding the current event and adding an inclusion of the\n   * new day & time. Any [[CalendarEvent.meta]] on this event will be moved to\n   * the new event. If the schedule represents a single event\n   * ([[Schedule.isSingleEvent]]) then the schedule frequencies are updated\n   * to match the timestamp provided.\n   *\n   * @param toTime The timestamp to move this event to.\n   * @returns Whether the event was moved to the given time.\n   */\n  public move(toTime: Day): boolean\n  {\n    return this.schedule.move( toTime, this.start );\n  }\n\n}\n","\nimport { Functions as fn } from './Functions';\nimport { Day, DayInput } from './Day';\nimport { DaySpan } from './DaySpan';\nimport { Schedule } from './Schedule';\nimport { EventInput, Event } from './Event';\nimport { Op } from './Operation';\nimport { Units } from './Units';\nimport { Parse } from './Parse';\nimport { SortEvent } from './Sort';\nimport { Constants } from './Constants';\nimport { CalendarDay } from './CalendarDay';\nimport { CalendarEvent } from './CalendarEvent';\nimport { Iterator, IteratorAction } from './Iterator';\n\n\n/**\n * A function which moves a given day by some amount and some unit. This is\n * used to shift a calendar's frame via [[Calendar.next]] and [[Calendar.prev]].\n *\n * @param day The day to move.\n * @param amount The amount to move the day by.\n * @returns A new day instance moved by the given amount.\n */\nexport type CalendarMover = (day: Day, amount: number) => Day;\n\n/**\n * A definition for a given [[Units]] which informs a calendar how to setup the\n * [[Calendar.span]] and how to move with [[Calendar.move]].\n */\nexport interface CalendarTypeDefinition\n{\n  getStart(around: Day, size: number, focus: number): Day;\n  getEnd(start: Day, size: number, focus: number): Day;\n  moveStart(day: Day, amount: number): Day;\n  moveEnd(day: Day, amount: number): Day;\n  defaultInput: any\n}\n\n/**\n * A map of [[CalendarTypeDefinition]] keyed by the [[Units]].\n */\nexport type CalendarTypeDefinitionMap = { [unit: number]: CalendarTypeDefinition };\n\n/**\n * Input used to initialize or mass change the properties of a [[Calendar]].\n *\n * @typeparam T The type of data stored in the [[Event]] class.\n * @typeparam M The type of metadata stored in the schedule.\n */\nexport interface CalendarInput<T, M>\n{\n\n  /**\n   * @see [[Calendar.fill]]\n   */\n  fill?: boolean;\n  /**\n   * @see [[Calendar.minimumSize]]\n   */\n  minimumSize?: number;\n  /**\n   * @see [[Calendar.repeatCovers]]\n   */\n  repeatCovers?: boolean;\n  /**\n   * @see [[Calendar.listTimes]]\n   */\n  listTimes?: boolean;\n  /**\n   * @see [[Calendar.eventsOutside]]\n   */\n  eventsOutside?: boolean;\n  /**\n   * @see [[Calendar.updateRows]]\n   */\n  updateRows?: boolean;\n  /**\n   * @see [[Calendar.updateColumns]]\n   */\n  updateColumns?: boolean;\n  /**\n   * @see [[Calendar.eventSorter]]\n   */\n  eventSorter?: SortEvent<T, M>;\n  /**\n   * @see [[Calendar.events]]\n   */\n  events?: EventInput<T, M>[];\n  /**\n   * @see [[Calendar.type]]\n   */\n  type?: Units;\n  /**\n   * @see [[Calendar.size]]\n   */\n  size?: number; // 1\n  /**\n   * @see [[Calendar.parseMeta]]\n   */\n  parseMeta?: (input: any) => M;\n  /**\n   * @see [[Calendar.parseData]]\n   */\n  parseData?: (input: any) => T;\n  /**\n   * When morphing a calendar to a fewer number of days, do we want to keep\n   * today in the calendar if it is already in the calendar?\n   */\n  preferToday?: boolean; // true\n  /**\n   * What day should the calendar be based around (contain)?\n   */\n  around?: DayInput; // null\n  /**\n   * When morphing a calendar and `preferToday` is false OR today is not in the\n   * calendar AND `around` is not specified, we will pick a day at this number\n   * in the current calendar (a value between 0 and 1 signifying the start and\n   * and of the current calendar).\n   */\n  otherwiseFocus?: number; // 0.499999\n  /**\n   * When morphing or creating passing a value of `true` will avoid calling\n   * [[Calendar.refresh]] as is typically done right after each of those\n   * functions.\n   */\n  delayRefresh?: boolean; // false\n}\n\n/**\n * A collection of [[CalendarDay]]s, the events on the calendar, and all\n * [[CalendarEvent]]s generated based on the events.\n *\n * @typeparam T The type of data stored in the [[Event]] class.\n * @typeparam M The type of metadata stored in the schedule.\n */\nexport class Calendar<T, M>\n{\n\n  /**\n   * The span of days in the calendar.\n   */\n  public span: DaySpan;\n\n  /**\n   * The full span of days represented on the calendar. This may be different\n   * than the [[Calendar.span]] when [[Calendar.fill]] is `true` and the\n   * calendar is representing months or years and the days need to start on\n   * Sunday and end on Saturday.\n   */\n  public filled: DaySpan;\n\n  /**\n   * The number of days in the calendar specified by [[Calendar.span]].\n   */\n  public length: number;\n\n  /**\n   * The type of calendar.\n   */\n  public type: Units;\n\n  /**\n   * The size of the calendar. When the calendar type is...\n   *\n   * - [[Units.DAY]]: The number of days in the calendar.\n   * - [[Units.WEEK]]: The number of weeks in the calendar.\n   * - [[Units.MONTH]]: The number of months in the calendar.\n   * - [[Units.YEAR]]: The number of years in the calendar.\n   */\n  public size: number;\n\n  /**\n   * The function used to move the start day of the calendar when functions like\n   * [[Calendar.next]] or [[Calendar.prev]] are called.\n   */\n  public moveStart: CalendarMover;\n\n  /**\n   * The function used to move the end day of the calendar when functions like\n   * [[Calendar.next]] or [[Calendar.prev]] are called.\n   */\n  public moveEnd: CalendarMover;\n\n\n  /**\n   * If the calendar should be filled in so the first day of the calendar is\n   * Sunday and the last day is Saturday.\n   */\n  public fill: boolean = false;\n\n  /**\n   * The minimum number of days in the calendar no matter what the type or size\n   * is. This can be used to display a month with a constant number of weeks -\n   * because not all months contain the same number of weeks.\n   */\n  public minimumSize: number = 0;\n\n  /**\n   * When `true` a [[CalendarEvent]] instance exists on each [[CalendarDay]]\n   * the event covers even if the event didn't start on that day.\n   */\n  public repeatCovers: boolean = true;\n\n  /**\n   * When `true` an event instance will be created for each time specified on\n   * the schedule. If the schedule specifies an all day event then only one\n   * event is added to a day. This is typically done when displaying days or\n   * weeks and events can be displayed on a timeline.\n   */\n  public listTimes: boolean = false;\n\n  /**\n   * When `true` events will be added to days \"outside\" the calendar. Days\n   * outside the calendar are days filled in when [[Calendar.fill]] is `true`.\n   * More specifically days that are in [[Calendar.filled]] and not in\n   * [[Calendar.span]].\n   */\n  public eventsOutside: boolean = false;\n\n  /**\n   * When `true` [[CalendarEvent.row]] will be set so when visually displaying\n   * the event with others multi-day events will align and not overlap.\n   */\n  public updateRows: boolean = false;\n\n  /**\n   * When `true` [[CalendarEvent.col]] will be set so when visually displaying\n   * the event based on start and end time any events that overlap with each\n   * other will be \"indented\" to see the event below it.\n   */\n  public updateColumns: boolean = false;\n\n  /**\n   * The function (if any) which sorts the events on a calendar day.\n   */\n  public eventSorter: SortEvent<T, M> = null;\n\n  /**\n   * A function to use when parsing meta input into the desired type.\n   *\n   * @param input The input to parse.\n   * @returns The meta parsed from the given input, if any.\n   */\n  public parseMeta: (input: any) => M = (x => <M>x);\n\n  /**\n   * A function to use when parsing meta input into the desired type.\n   *\n   * @param input The input to parse.\n   * @returns The meta parsed from the given input, if any.\n   */\n  public parseData: (input: any) => T = (x => <T>x);\n\n  /**\n   * A selection of days on the calendar. If no days are selected this is `null`.\n   * This is merely used to keep the selection flags in [[CalendarDay]] updated\n   * via [[Calendar.refreshSelection]].\n   */\n  public selection: DaySpan = null;\n\n  /**\n   * The array of days in this calendar and their events.\n   */\n  public days: CalendarDay<T, M>[] = [];\n\n  /**\n   * The array of scheduled events added to the calendar.\n   */\n  public events: Event<T, M>[] = [];\n\n  /**\n   * The array of visible events on the calendar. This is built based on the\n   * span of the schedule in the given event and also the [[Event.visible]] flag.\n   */\n  public visible: Event<T, M>[] = [];\n\n\n  /**\n   * Creates a new calendar given a span, type, size, moving functions, and\n   * optionally some default properties for the calendar.\n   *\n   * @param start The first day on the calendar.\n   * @param end The last day on the calendar.\n   * @param type The calendar type used for describing the calendar and splitting it.\n   * @param size The number of calendar types in this calendar.\n   * @param moveStart The function to move the start day.\n   * @param moveEnd The function to move the end by.\n   * @param input The default properties for this calendar.\n   * @see [[Calendar.start]]\n   * @see [[Calendar.end]]\n   * @see [[Calendar.type]]\n   * @see [[Calendar.size]]\n   * @see [[Calendar.moveStart]]\n   * @see [[Calendar.moveEnd]]\n   */\n  public constructor(start: Day, end: Day, type: Units, size: number, moveStart: CalendarMover, moveEnd: CalendarMover, input?: CalendarInput<T, M>)\n  {\n    this.span = new DaySpan(start, end);\n    this.filled = new DaySpan(start, end);\n    this.type = type;\n    this.size = size;\n    this.moveStart = moveStart;\n    this.moveEnd = moveEnd;\n\n    if (fn.isDefined(input))\n    {\n      this.set( input );\n    }\n    else\n    {\n      this.refresh();\n    }\n  }\n\n  /**\n   * Changes the calendar possibly morphing it to a different type or size if\n   * specified in the given input. If the type and size are not morphed then\n   * the following properties may be updated:\n   *\n   * - [[Calendar.fill]]\n   * - [[Calendar.minimumSize]]\n   * - [[Calendar.repeatCovers]]\n   * - [[Calendar.listTimes]]\n   * - [[Calendar.eventsOutside]]\n   * - [[Calendar.updateRows]]\n   * - [[Calendar.updateColumns]]\n   * - [[Calendar.eventSorter]]\n   * - [[Calendar.events]]\n   * - [[Calendar.parseData]]\n   * - [[Calendar.parseMeta]]\n   *\n   * If [[CalendarInput.delayRefresh]] is not given with `true` then\n   * [[Calendar.refresh]] will be called once the calendar properties have been\n   * updated.\n   *\n   * @param input The new properties for this calendar to overwrite with.\n   */\n  public set(input: CalendarInput<T, M>): this\n  {\n    type CTD = CalendarTypeDefinition;\n\n    let typeChange: boolean = fn.isDefined(input.type) && input.type !== this.type;\n    let sizeChange: boolean = fn.isDefined(input.size) && input.size !== this.size;\n\n    if (typeChange || sizeChange)\n    {\n      let focus: number    = fn.coalesce( input.otherwiseFocus, 0.4999 );\n      let prefer: boolean  = fn.coalesce( input.preferToday, true );\n      let size: number     = fn.coalesce( input.size, this.size );\n      let type: Units      = fn.coalesce( input.type, this.type );\n      let around: DayInput = fn.coalesce( input.around, this.days[ Math.floor( (this.days.length - 1) * focus ) ] );\n      let today: Day       = Day.today();\n\n      if (!around || (prefer && this.span.matchesDay(today)))\n      {\n        around = today;\n      }\n\n      let meta: CTD        = Calendar.TYPES[ type ];\n      let start: Day       = meta.getStart( Day.parse( around ), size, focus );\n      let end: Day         = meta.getEnd( start, size, focus );\n\n      this.span.start = start;\n      this.span.end = end;\n      this.type = type;\n      this.size = size;\n      this.moveStart = meta.moveStart;\n      this.moveEnd = meta.moveEnd;\n    }\n    else if (input.around)\n    {\n      let focus: number    = fn.coalesce( input.otherwiseFocus, 0.4999 );\n      let around: Day      = Day.parse( input.around );\n      let type: Units      = this.type;\n      let size: number     = this.size;\n      let meta: CTD        = Calendar.TYPES[ type ];\n      let start: Day       = meta.getStart( around, size, focus );\n      let end: Day         = meta.getEnd( start, size, focus );\n\n      this.span.start = start;\n      this.span.end = end;\n    }\n\n    this.fill           = fn.coalesce( input.fill, this.fill );\n    this.minimumSize    = fn.coalesce( input.minimumSize, this.minimumSize );\n    this.repeatCovers   = fn.coalesce( input.repeatCovers, this.repeatCovers );\n    this.listTimes      = fn.coalesce( input.listTimes, this.listTimes );\n    this.eventsOutside  = fn.coalesce( input.eventsOutside, this.eventsOutside );\n    this.updateRows     = fn.coalesce( input.updateRows, this.updateRows );\n    this.updateColumns  = fn.coalesce( input.updateColumns, this.updateColumns );\n    this.eventSorter    = fn.coalesce( input.eventSorter, this.eventSorter );\n    this.parseMeta      = fn.coalesce( input.parseMeta, this.parseMeta );\n    this.parseData      = fn.coalesce( input.parseData, this.parseData );\n\n    if (fn.isArray(input.events))\n    {\n      this.setEvents(input.events, true);\n    }\n\n    if (!input.delayRefresh)\n    {\n      this.refresh();\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the [[Calendar.minimumSize]] value and returns `this` for method\n   * chaining.\n   *\n   * @param minimumSize The new value.\n   */\n  public withMinimumSize(minimumSize: number): this\n  {\n    this.minimumSize = minimumSize;\n    this.refresh();\n\n    return this;\n  }\n\n  /**\n   * Sets the [[Calendar.repeatCovers]] value and returns `this` for method\n   * chaining.\n   *\n   * @param repeatCovers The new value.\n   */\n  public withRepeatCovers(repeatCovers: boolean): this\n  {\n    this.repeatCovers = repeatCovers;\n    this.refreshEvents();\n\n    return this;\n  }\n\n  /**\n   * Sets the [[Calendar.listTimes]] value and returns `this` for method\n   * chaining.\n   *\n   * @param listTimes The new value.\n   */\n  public withListTimes(listTimes: boolean): this\n  {\n    this.listTimes = listTimes;\n    this.refreshEvents();\n\n    return this;\n  }\n\n  /**\n   * Sets the [[Calendar.eventsOutside]] value and returns `this` for method\n   * chaining.\n   *\n   * @param eventsOutside The new value.\n   */\n  public withEventsOutside(eventsOutside: boolean): this\n  {\n    this.eventsOutside = eventsOutside;\n    this.refreshEvents();\n\n    return this;\n  }\n\n  /**\n   * Sets the [[Calendar.updateRows]] value and returns `this` for method\n   * chaining.\n   *\n   * @param updateRows The new value.\n   * @param refresh If the rows should be updated now if `updateRows` is `true`.\n   */\n  public withUpdateRows(updateRows: boolean, refresh: boolean = true): this\n  {\n    this.updateRows = updateRows;\n\n    if (refresh && updateRows)\n    {\n      this.refreshRows();\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the [[Calendar.updateColumns]] value and returns `this` for method\n   * chaining.\n   *\n   * @param updateColumns The new value.\n   * @param refresh If the columns should be updated now if `updateColumns` is\n   *    `true`.\n   */\n  public withUpdateColumns(updateColumns: boolean, refresh: boolean = true): this\n  {\n    this.updateColumns = updateColumns;\n\n    if (refresh && updateColumns)\n    {\n      this.refreshColumns();\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns the start day of the calendar. If this calendar is filled, this\n   * may not represent the very first day in the calendar.\n   */\n  public get start(): Day\n  {\n    return this.span.start;\n  }\n\n  /**\n   * Returns the end day of the calendar. If this calendar is filled, this\n   * may not represent the very last day in the calendar.\n   */\n  public get end(): Day\n  {\n    return this.span.end;\n  }\n\n  /**\n   * Returns the summary of the span of time this calendar represents.\n   *\n   * @param dayOfWeek [[DaySpan.summary]]\n   * @param short [[DaySpan.summary]]\n   * @param repeat [[DaySpan.summary]]\n   * @param contextual [[DaySpan.summary]]\n   * @param delimiter [[DaySpan.summary]]\n   * @see [[DaySpan.summary]]\n   */\n  public summary(dayOfWeek: boolean = true, short: boolean = false, repeat: boolean = false, contextual: boolean = true, delimiter: string = ' - '): string\n  {\n    return this.span.summary( this.type, dayOfWeek, short, repeat, contextual, delimiter );\n  }\n\n  /**\n   * Splits up this calendar into an iterable collection of calendars. The\n   * resulting iterator will return `size / by` number of calendars.\n   *\n   * @param by The new size of the resulting calendars. If the the size of the\n   *    current calendar is not divisible by this value the resulting calendars\n   *    may cover more or less than this calendar covers.\n   * @returns An iterator for the calendars produced.\n   */\n  public split(by: number = 1): Iterator<Calendar<T, M>>\n  {\n    return new Iterator<Calendar<T, M>>(iterator =>\n    {\n      let start: Day = this.start;\n      let end: Day = this.moveEnd( this.end, by - this.size );\n\n      for (let i = 0; i < this.size; i++)\n      {\n        let calendar = new Calendar(start, end, this.type, by, this.moveStart, this.moveEnd, this);\n\n        if (iterator.act(calendar) === IteratorAction.Stop)\n        {\n          return;\n        }\n\n        start = this.moveStart( start, by );\n        end = this.moveEnd( end, by );\n      }\n    });\n  }\n\n  /**\n   * Refreshes the days and events in this calendar based on the start and end\n   * days, the calendar properties, and its eventss.\n   *\n   * @param today The current day to update the calendar days via\n   *    [[CalendarDay.updateCurrent]].\n   */\n  public refresh(today: Day = Day.today()): this\n  {\n    this.length = this.span.days(Op.UP, true);\n    this.resetDays();\n    this.refreshCurrent(today);\n    this.refreshSelection();\n    this.refreshVisible();\n    this.refreshEvents();\n\n    return this;\n  }\n\n  /**\n   * Updates the [[Calendar.filled]] span based on [[Calendar.start]],\n   * [[Calendar.end]], and [[Calendar.fill]] properties.\n   */\n  public resetFilled(): this\n  {\n    this.filled.start = this.fill ? this.start.startOfWeek() : this.start;\n    this.filled.end = this.fill ? this.end.endOfWeek() : this.end;\n\n    return this;\n  }\n\n  /**\n   * Updates [[Calendar.days]] to match the span of days in the calendar.\n   */\n  public resetDays(): this\n  {\n    this.resetFilled();\n\n    let days: CalendarDay<T, M>[] = this.days;\n    let filled: DaySpan = this.filled;\n    let current: Day = filled.start;\n    let daysBetween: number = filled.days(Op.UP);\n    let total: number = Math.max( this.minimumSize, daysBetween );\n\n    for (let i = 0; i < total; i++)\n    {\n      let day: CalendarDay<T, M> = days[ i ];\n\n      if (!day || !day.sameDay( current ))\n      {\n        day = new CalendarDay<T, M>( current.date );\n\n        if (i < days.length)\n        {\n          days.splice( i, 1, day );\n        }\n        else\n        {\n          days.push( day );\n        }\n      }\n\n      day.inCalendar = this.span.contains( day );\n\n      current = current.next();\n    }\n\n    if (days.length > total)\n    {\n      days.splice( total, days.length - total );\n    }\n\n    return this;\n  }\n\n  /**\n   * Updates the list of visible schedules.\n   */\n  public refreshVisible(): this\n  {\n    let start: Day = this.filled.start;\n    let end: Day = this.filled.end;\n\n    this.visible = this.events.filter(e =>\n    {\n      return e.visible && e.schedule.matchesRange(start, end);\n    });\n\n    return this;\n  }\n\n  /**\n   * Updates the days with the current day via [[CalendarDay.updateCurrent]].\n   *\n   * @param today The new current day.\n   */\n  public refreshCurrent(today: Day = Day.today()): this\n  {\n    this.iterateDays().iterate(d =>\n    {\n      d.updateCurrent(today);\n    });\n\n    return this;\n  }\n\n  /**\n   * Updates the selection flags in [[CalendarDay]] based on the\n   * [[Calendar.selection]] property.\n   */\n  public refreshSelection(): this\n  {\n    this.iterateDays().iterate(d =>\n    {\n      if (this.selection)\n      {\n        d.updateSelected( this.selection );\n      }\n      else\n      {\n        d.clearSelected();\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Updates the [[CalendarDay.events]] based on the events in this calendar\n   * and the following properties:\n   *\n   * - [[Calendar.eventsForDay]]\n   * - [[Calendar.eventsOutside]]\n   * - [[Calendar.listTimes]]\n   * - [[Calendar.repeatCovers]]\n   * - [[Calendar.updateRows]]\n   * - [[Calendar.updateColumns]]\n   */\n  public refreshEvents(): this\n  {\n    this.iterateDays().iterate(d =>\n    {\n      if (d.inCalendar || this.eventsOutside)\n      {\n        d.events = this.eventsForDay(d, this.listTimes, this.repeatCovers);\n      }\n    });\n\n    if (this.updateRows)\n    {\n      this.refreshRows();\n    }\n\n    if (this.updateColumns)\n    {\n      this.refreshColumns();\n    }\n\n    return this;\n  }\n\n  /**\n   * Refreshes the [[CalendarEvent.row]] property as described in the link.\n   */\n  public refreshRows(): this\n  {\n    type EventToRowMap = { [id: number]: number };\n    type UsedMap = { [row: number]: boolean };\n\n    let eventToRow: EventToRowMap = {};\n    let onlyFullDay: boolean = this.listTimes;\n\n    this.iterateDays().iterate(d =>\n    {\n      if (d.dayOfWeek === 0)\n      {\n        eventToRow = {};\n      }\n\n      let used: UsedMap = {};\n\n      for (let event of d.events)\n      {\n        if (onlyFullDay && !event.fullDay)\n        {\n          continue;\n        }\n\n        if (event.id in eventToRow)\n        {\n          used[ event.row = eventToRow[ event.id ] ] = true;\n        }\n      }\n\n      let rowIndex: number = 0;\n\n      for (let event of d.events)\n      {\n        if ((onlyFullDay && !event.fullDay) || event.id in eventToRow)\n        {\n          continue;\n        }\n\n        while (used[ rowIndex ])\n        {\n          rowIndex++;\n        }\n\n        eventToRow[ event.id ] = event.row = rowIndex;\n\n        rowIndex++;\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Refreshes the [[CalendarEvent.col]] property as described in the link.\n   */\n  public refreshColumns(): this\n  {\n    interface Marker {\n      time: number,\n      event: CalendarEvent<T, M>,\n      start: boolean,\n      parent: Marker;\n    }\n\n    this.iterateDays().iterate(d =>\n    {\n      let markers: Marker[] = [];\n\n      for (let event of d.events)\n      {\n        if (!event.fullDay)\n        {\n          markers.push({\n            time: event.time.start.time,\n            event: event,\n            start: true,\n            parent: null\n          });\n\n          markers.push({\n            time: event.time.end.time - 1,\n            event: event,\n            start: false,\n            parent: null\n          });\n        }\n      }\n\n      markers.sort((a, b) =>\n      {\n        return a.time - b.time;\n      });\n\n      let parent = null;\n\n      for (let marker of markers)\n      {\n        if (marker.start)\n        {\n          marker.parent = parent;\n          parent = marker;\n        }\n        else if (parent)\n        {\n          parent = parent.parent;\n        }\n      }\n\n      for (let marker of markers)\n      {\n        if (marker.start)\n        {\n          marker.event.col = marker.parent ? marker.parent.event.col + 1 : 0;\n        }\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Gets the calendar day for the given day.\n   *\n   * @param input The day to get the calendar day for.\n   * @returns The reference to the calendar day, or null if the given input\n   *    is not on this calendar.\n   */\n  public getDay(input: DayInput): CalendarDay<T, M>\n  {\n    let parsed: Day = Day.parse( input );\n\n    if (parsed)\n    {\n      let dayCount: number = parsed.start().daysBetween( this.days[ 0 ], Op.DOWN, false );\n\n      return this.days[ dayCount ];\n    }\n\n    return null;\n  }\n\n  /**\n   * Iterates over all days in this calendar and passes each day to `iterator`.\n   *\n   * @param iterator The function to pass [[CalendarDay]]s to.\n   */\n  public iterateDays(): Iterator<CalendarDay<T, M>>\n  {\n    return new Iterator<CalendarDay<T, M>>(iterator =>\n    {\n      let days: CalendarDay<T, M>[] = this.days;\n\n      for (let i = 0; i < days.length; i++)\n      {\n        switch (iterator.act(days[ i ]))\n        {\n          case IteratorAction.Stop:\n            return;\n        }\n      }\n    });\n  }\n\n  /**\n   * Returns the events for the given day optionally looking at schedule times,\n   * optionally looking at events which cover multiple days, and optionally\n   * sorted with the given function.\n   *\n   * @param day The day to find events for.\n   * @param getTimes When `true` an event is added to the result for each time\n   *    specified in the schedule.\n   * @param covers When `true` events which don't start on the given day but do\n   *    overlap are added to the result.\n   * @param sorter The function to sort the events by, if any.\n   * @returns An array of events that occurred on the given day.\n   */\n  public eventsForDay(day: Day, getTimes: boolean = true, covers: boolean = true, sorter: SortEvent<T, M> = this.eventSorter): CalendarEvent<T, M>[]\n  {\n    let events: CalendarEvent<T, M>[] = [];\n    let entries: Event<T, M>[] = this.visible;\n\n    for (let entryIndex = 0; entryIndex < entries.length; entryIndex++)\n    {\n      let entry: Event<T, M> = entries[ entryIndex ];\n      let schedule: Schedule<M> = entry.schedule;\n      let eventId: number = entryIndex * Constants.MAX_EVENTS_PER_DAY;\n      let timeIndex: number = 0;\n\n      schedule.iterateSpans( day, covers ).iterate((span, iterator) =>\n      {\n        events.push(new CalendarEvent(eventId + timeIndex++, entry, span, day));\n\n        if (!getTimes)\n        {\n          iterator.stop();\n        }\n      });\n    }\n\n    if (sorter)\n    {\n      events.sort( sorter );\n    }\n\n    return events\n  }\n\n  /**\n   * Finds the event given one of the ways to identify the event.\n   *\n   * @param input The value to use to search for an event.\n   * @returns The refrence to the event or null if not found.\n   */\n  public findEvent(id: any): Event<T, M>\n  {\n    for (let event of this.events)\n    {\n      if (event === id || event.schedule === id || event.data === id || event.id === id)\n      {\n        return event;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Removes the list of events if they exist in the calendar.\n   *\n   * @param events The array of events to remove if they exist. If no\n   *    events are passed (via `null`) then all events will be removed\n   *    from the calendar.\n   * @param delayRefresh When `true` the [[Calendar.refreshEvents]] will not be\n   *    called after the events are removed.\n   * @see [[Calendar.removeEvent]]\n   * @see [[Calendar.refreshEvents]]\n   */\n  public removeEvents(events: any[] = null, delayRefresh: boolean = false): this\n  {\n    if (events)\n    {\n      for (let event of events)\n      {\n        this.removeEvent( event, true );\n      }\n    }\n    else\n    {\n      this.events = [];\n    }\n\n    this.refreshVisible();\n\n    if (!delayRefresh)\n    {\n      this.refreshEvents();\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes the given event if it exists on the calendar.\n   *\n   * @param event The event to remove if it exists.\n   * @param delayRefresh When `true` the [[Calendar.refreshEvents]] will not be\n   *    called after the event is removed.\n   * @see [[Calendar.refreshEvents]]\n   */\n  public removeEvent(event: any, delayRefresh: boolean = false): this\n  {\n    let found: Event<T, M> = this.findEvent(event);\n\n    if (found)\n    {\n      this.events.splice( this.events.indexOf(found), 1 );\n\n      this.refreshVisible();\n\n      if (!delayRefresh)\n      {\n        this.refreshEvents();\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds the given event to this calendar if it doesn't exist already (or\n   * `allowDuplicates` is `true`).\n   *\n   * @param event The event to add to the calendar.\n   * @param allowDuplicates If an event can be added more than once.\n   * @param delayRefresh When `true` the [[Calendar.refreshEvents]] will not be\n   *    called after the event is added.\n   * @see [[Calendar.refreshEvents]]\n   */\n  public addEvent(event: EventInput<T, M>, allowDuplicates: boolean = false, delayRefresh: boolean = false): this\n  {\n    let parsed: Event<T, M> = Parse.event<T, M>(event, this.parseData, this.parseMeta);\n\n    if (!allowDuplicates)\n    {\n      let existing = this.findEvent(parsed);\n\n      if (existing)\n      {\n        return this;\n      }\n    }\n\n    this.events.push(parsed);\n\n    this.refreshVisible();\n\n    if (!delayRefresh)\n    {\n      this.refreshEvents();\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds the given events to this calendar if they don't exist already (or\n   * `allowDuplicates` is `true`).\n   *\n   * @param events The events to add to the calendar.\n   * @param allowDuplicates If an event can be added more than once.\n   * @param delayRefresh When `true` the [[Calendar.refreshEvents]] will not be\n   *    called after the events are added.\n   * @see [[Calendar.refreshEvents]]\n   */\n  public addEvents(events: EventInput<T, M>[], allowDuplicates: boolean = false, delayRefresh: boolean = false): this\n  {\n    for (let event of events)\n    {\n      this.addEvent(event, allowDuplicates, true);\n    }\n\n    if (!delayRefresh)\n    {\n      this.refreshEvents();\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the given events to this calendar replacing the current list of\n   * events.\n   *\n   * @param events The events to set to the calendar.\n   * @param delayRefresh When `true` the [[Calendar.refreshEvents]] will not be\n   *    called after the events are added.\n   * @see [[Calendar.refreshEvents]]\n   */\n  public setEvents(events: EventInput<T, M>[], delayRefresh: boolean = false): this\n  {\n    const parsedEvents = [];\n\n    for (let i = 0; i < events.length; i++)\n    {\n      let parsed: Event<T, M> = Parse.event<T, M>(events[i], this.parseData, this.parseMeta);\n\n      if (parsed)\n      {\n        parsedEvents.push(parsed);\n      }\n    }\n\n    this.events = parsedEvents;\n\n    this.refreshVisible();\n\n    if (!delayRefresh)\n    {\n      this.refreshEvents();\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the selection point or range of the calendar and updates the flags\n   * in the days.\n   *\n   * @param start The start of the selection.\n   * @param end The end of the selection.\n   * @see [[Calendar.refreshSelection]]\n   */\n  public select(start: Day, end: Day = start): this\n  {\n    this.selection = new DaySpan( start, end );\n    this.refreshSelection();\n\n    return this;\n  }\n\n  /**\n   * Sets the selection of the calendar to nothing.\n   *\n   * @see [[Calendar.refreshSelection]]\n   */\n  public unselect(): this\n  {\n    this.selection = null;\n    this.refreshSelection();\n\n    return this;\n  }\n\n  /**\n   * Shifts the calendar days by the given amount.\n   *\n   * @param jump The amount to shift the calendar by.\n   * @param delayRefresh When `true` [[Calendar.refresh]] will not be called\n   *    after calendar is moved.\n   */\n  public move(jump: number = this.size, delayRefresh: boolean = false): this\n  {\n    this.span.start = this.moveStart( this.start, jump );\n    this.span.end = this.moveEnd( this.end, jump );\n\n    if (!delayRefresh)\n    {\n      this.refresh();\n    }\n\n    return this;\n  }\n\n  /**\n   * Moves the calenndar to the next set of days.\n   *\n   * @param jump The amount to shift the calendar by.\n   * @param delayRefresh When `true` [[Calendar.refresh]] will not be called\n   *    after calendar is moved.\n   */\n  public next(jump: number = this.size, delayRefresh: boolean = false): this\n  {\n    return this.move( jump, delayRefresh );\n  }\n\n  /**\n   * Moves the calenndar to the previous set of days.\n   *\n   * @param jump The amount to shift the calendar by.\n   * @param delayRefresh When `true` [[Calendar.refresh]] will not be called\n   *    after calendar is moved.\n   */\n  public prev(jump: number = this.size, delayRefresh: boolean = false): this\n  {\n    return this.move( -jump, delayRefresh );\n  }\n\n  /**\n   * Converts this calendar to input which can be used to later recreate this\n   * calendar. The only properties of the calendar which will be loss is the\n   * [[Calendar.eventSorter]] property because it is a function.\n   *\n   * @param plain If the returned input should be plain objects as opposed\n   *    to [[Day]] and [[Event]] instances.\n   * @param plainData A function to convert [[Event.data]] to a plain object if\n   *    it is not already.\n   * @param plainMeta A function to convert values in [[Schedule.meta]] to plain\n   *    objects if they are not alreday.\n   * @returns The input generated from this calendar.\n   */\n  public toInput(plain: boolean = false,\n      plainData: (data: T) => any = d => d,\n      plainMeta: (meta: M) => any = m => m): CalendarInput<T, M>\n  {\n    let out: CalendarInput<T, M> = {};\n\n    out.type = this.type;\n    out.size = this.size;\n    out.fill = this.fill;\n    out.minimumSize = this.minimumSize;\n    out.repeatCovers = this.repeatCovers;\n    out.listTimes = this.listTimes;\n    out.eventsOutside = this.eventsOutside;\n    out.updateRows = this.updateRows;\n    out.updateColumns = this.updateColumns;\n    out.around = plain ? this.span.start.time : this.span.start;\n    out.events = [];\n\n    for (let event of this.events)\n    {\n      if (plain)\n      {\n        let plainEvent: any = {};\n\n        if (fn.isDefined(event.id))\n        {\n          plainEvent.id = event.id;\n        }\n\n        if (fn.isDefined(event.data))\n        {\n          plainEvent.data = plainData( event.data );\n        }\n\n        if (!event.visible)\n        {\n          plainEvent.visible = event.visible;\n        }\n\n        plainEvent.schedule = event.schedule.toInput();\n\n        let meta = plainEvent.schedule.meta;\n\n        if (meta)\n        {\n          for (let identifier in meta)\n          {\n            meta[ identifier ] = plainMeta( meta[ identifier ] );\n          }\n        }\n\n        out.events.push( plainEvent );\n      }\n      else\n      {\n        out.events.push( event );\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Creates a calendar based on the given input.\n   *\n   * @param input The input which has at least the `type` specified.\n   * @returns A new calendar instance.\n   */\n  public static fromInput<T, M>(input: CalendarInput<T, M>): Calendar<T, M>\n  {\n    let initial: Day = Day.today();\n\n    return new Calendar(initial, initial, null, 1, null, null, input);\n  }\n\n  /**\n   * Creates a calendar based around a given unit optionally focused around a\n   * given day.\n   *\n   * @param type The unit of the calendar.\n   * @param days The number of units in the calendar.\n   * @param around The day to focus the calendar on.\n   * @param focus The value which describes how months are added around the given\n   *    day. The default value will center the calendar around the given day.\n   *    When the value is `0` the given day is the first day in the calendar,\n   *    and when the value is `1` the given day is the last day in the calendar.\n   * @param input The default properties for the calendar.\n   * @returns A new calendar instance.\n   */\n  public static forType<T, M>(type: Units, size: number = 1, around: Day = Day.today(), focus: number = 0.49999, input?: CalendarInput<T, M>): Calendar<T, M>\n  {\n    let meta: CalendarTypeDefinition = this.TYPES[ type ];\n    let start: Day = meta.getStart( around, size, focus );\n    let end: Day = meta.getEnd( start, size, focus );\n\n    return new Calendar<T, M>(start, end, type, size, meta.moveStart, meta.moveEnd, input || meta.defaultInput);\n  }\n\n\n  /**\n   * Creates a calendar based around days optionally focused around a given day.\n   *\n   * @param days The number of days in the calendar.\n   * @param around The day to focus the calendar on.\n   * @param focus The value which describes how days are added around the given\n   *    day. The default value will center the calendar around the given day.\n   *    When the value is `0` the given day is the first day in the calendar,\n   *    and when the value is `1` the given day is the last day in the calendar.\n   * @param input The default properties for the calendar.\n   * @returns A new calendar instance.\n   * @see [[Calendar.forType]]\n   */\n  public static days<T, M>(days: number = 1, around: Day = Day.today(), focus: number = 0.4999, input?: CalendarInput<T, M>): Calendar<T, M>\n  {\n    return this.forType( Units.DAY, days, around, focus, input );\n  }\n\n  /**\n   * Creates a calendar based around weeks optionally focused around a given day.\n   *\n   * @param days The number of weeks in the calendar.\n   * @param around The day to focus the calendar on.\n   * @param focus The value which describes how weeks are added around the given\n   *    day. The default value will center the calendar around the given day.\n   *    When the value is `0` the given day is the first day in the calendar,\n   *    and when the value is `1` the given day is the last day in the calendar.\n   * @param input The default properties for the calendar.\n   * @returns A new calendar instance.\n   * @see [[Calendar.forType]]\n   */\n  public static weeks<T, M>(weeks: number = 1, around: Day = Day.today(), focus: number = 0.4999, input?: CalendarInput<T, M>): Calendar<T, M>\n  {\n    return this.forType( Units.WEEK, weeks, around, focus, input );\n  }\n\n  /**\n   * Creates a calendar based around months optionally focused around a given day.\n   *\n   * @param days The number of months in the calendar.\n   * @param around The day to focus the calendar on.\n   * @param focus The value which describes how months are added around the given\n   *    day. The default value will center the calendar around the given day.\n   *    When the value is `0` the given day is the first day in the calendar,\n   *    and when the value is `1` the given day is the last day in the calendar.\n   * @param input The default properties for the calendar.\n   * @returns A new calendar instance.\n   * @see [[Calendar.forType]]\n   */\n  public static months<T, M>(months: number = 1, around: Day = Day.today(), focus: number = 0.4999, input?: CalendarInput<T, M>): Calendar<T, M>\n  {\n    return this.forType( Units.MONTH, months, around, focus, input );\n  }\n\n  /**\n   * Creates a calendar based around years optionally focused around a given day.\n   *\n   * @param days The number of years in the calendar.\n   * @param around The day to focus the calendar on.\n   * @param focus The value which describes how years are added around the given\n   *    day. The default value will center the calendar around the given day.\n   *    When the value is `0` the given day is the first day in the calendar,\n   *    and when the value is `1` the given day is the last day in the calendar.\n   * @param input The default properties for the calendar.\n   * @returns A new calendar instance.\n   * @see [[Calendar.forType]]\n   */\n  public static years<T, M>(years: number = 1, around: Day = Day.today(), focus: number = 0.4999, input?: CalendarInput<T, M>): Calendar<T, M>\n  {\n    return this.forType( Units.YEAR, years, around, focus, input );\n  }\n\n  /**\n   * A map of functions and properties by [[Units]] used to create or morph\n   * Calendars.\n   */\n  public static TYPES: CalendarTypeDefinitionMap =\n  {\n    [Units.DAY]:\n    {\n      getStart(around: Day, size: number, focus: number): Day {\n        return around.start().relativeDays( -Math.floor( size * focus ) )\n      },\n      getEnd(start: Day, size: number, focus: number): Day {\n        return start.relativeDays( size - 1 ).end();\n      },\n      moveStart(day: Day, amount: number): Day {\n        return day.relativeDays(amount);\n      },\n      moveEnd(day: Day, amount: number): Day {\n        return day.relativeDays(amount);\n      },\n      defaultInput: <any>undefined\n    },\n    [Units.WEEK]:\n    {\n      getStart(around: Day, size: number, focus: number): Day {\n        return around.start().startOfWeek().relativeWeeks( -Math.floor( size * focus ) );\n      },\n      getEnd(start: Day, size: number, focus: number): Day {\n        return start.relativeWeeks( size - 1 ).endOfWeek();\n      },\n      moveStart(day: Day, amount: number): Day {\n        return day.relativeWeeks(amount);\n      },\n      moveEnd(day: Day, amount: number): Day {\n        return day.relativeWeeks(amount);\n      },\n      defaultInput: <any>undefined\n    },\n    [Units.MONTH]:\n    {\n      getStart(around: Day, size: number, focus: number): Day {\n        return around.start().startOfMonth().relativeMonths( -Math.floor( size * focus ) );\n      },\n      getEnd(start: Day, size: number, focus: number): Day {\n        return start.relativeMonths( size - 1 ).endOfMonth();\n      },\n      moveStart(day: Day, amount: number): Day {\n        return day.relativeMonths(amount);\n      },\n      moveEnd(day: Day, amount: number): Day {\n        return day.startOfMonth().relativeMonths(amount).endOfMonth();\n      },\n      defaultInput: { fill: true }\n    },\n    [Units.YEAR]:\n    {\n      getStart(around: Day, size: number, focus: number): Day {\n        return around.start().startOfYear().relativeYears( -Math.floor( size * focus ) );\n      },\n      getEnd(start: Day, size: number, focus: number): Day {\n        return start.relativeYears( size - 1 ).endOfYear();\n      },\n      moveStart(day: Day, amount: number): Day {\n        return day.relativeYears(amount);\n      },\n      moveEnd(day: Day, amount: number): Day {\n        return day.relativeYears(amount);\n      },\n      defaultInput: { fill: true }\n    }\n  };\n\n}\n","\n/**\n * The months in a year.\n */\nexport class Month\n{\n\n  public static JANUARY: number = 0;\n  public static FEBRUARY: number = 1;\n  public static MARCH: number = 2;\n  public static APRIL: number = 3;\n  public static MAY: number = 4;\n  public static JUNE: number = 5;\n  public static JULY: number = 6;\n  public static AUGUST: number = 7;\n  public static SEPTEMBER: number = 8;\n  public static OCTOBER: number = 9;\n  public static NOVEMBER: number = 10;\n  public static DECEMBER: number = 11;\n\n  /**\n   * The full list of months in a year.\n   */\n  public static LIST: number[] = [\n    Month.JANUARY,\n    Month.FEBRUARY,\n    Month.MARCH,\n    Month.APRIL,\n    Month.MAY,\n    Month.JUNE,\n    Month.JULY,\n    Month.AUGUST,\n    Month.SEPTEMBER,\n    Month.OCTOBER,\n    Month.NOVEMBER,\n    Month.DECEMBER\n  ];\n\n}\n","\n\n/**\n * The days in a week.\n */\nexport class Weekday\n{\n\n  public static SUNDAY: number = 0;\n  public static MONDAY: number = 1;\n  public static TUESDAY: number = 2;\n  public static WEDNESDAY: number = 3;\n  public static THURSDAY: number = 4;\n  public static FRIDAY: number = 5;\n  public static SATURDAY: number = 6;\n\n  /**\n   * The full list of days in a week.\n   */\n  public static LIST: number[] = [\n    Weekday.SUNDAY,\n    Weekday.MONDAY,\n    Weekday.TUESDAY,\n    Weekday.WEDNESDAY,\n    Weekday.THURSDAY,\n    Weekday.FRIDAY,\n    Weekday.SATURDAY\n  ];\n\n  /**\n   * The list of days starting with Monday and ending on Friday.\n   */\n  public static WEEK: number[] = [\n    Weekday.MONDAY,\n    Weekday.TUESDAY,\n    Weekday.WEDNESDAY,\n    Weekday.THURSDAY,\n    Weekday.FRIDAY\n  ];\n\n  /**\n   * The days on the weekend, starting with Saturday and ending with Sunday.\n   */\n  public static ENDS: number[] = [\n    Weekday.SATURDAY,\n    Weekday.SUNDAY\n  ];\n\n}\n","\nimport { CalendarEvent } from './CalendarEvent';\nimport { Event } from './Event';\n\n\n/**\n * A function which takes two [[CalendarEvent]]s and returns a number which\n * instructs a sort which event goes before the other in a list.\n *\n * @param a The first event.\n * @param b The second event.\n * @returns When both events are considered equal `0` is returned, when the\n *    first event should go before the second event a negative number is\n *    returned, when the second event should go before the first event a\n *    positive number is returned.\n */\nexport type SortEvent<T, M> = (a: CalendarEvent<T, M>, b: CalendarEvent<T, M>) => number;\n\n/**\n * A class with [[SortEvent]] functions and functions which accept other\n * [[SortEvent]]s and return a new [[SortEvent]].\n *\n * ```typescript\n * // Sorts full day events first, then events in descending order based on start time.\n * Sorts.List([Sorts.FullDay, Sorts.Desc(Sorts.Start)]);\n * ```\n */\nexport class Sorts\n{\n\n  /**\n   * Sorts the two events by their start time - the earliest event being first\n   * in order.\n   *\n   * @param a The first event.\n   * @param b The second event.\n   * @returns The difference in time between the start of `a` and `b`.\n   * @see [[CalendarEvent.time]]\n   */\n  public static Start<T, M>(a: CalendarEvent<T, M>, b: CalendarEvent<T, M>): number\n  {\n    return a.time.start.time - b.time.start.time;\n  }\n\n  /**\n   * Sorts the two events by their end time - the earliest to end being first\n   * in order.\n   *\n   * @param a The first event.\n   * @param b The second event.\n   * @returns The difference in time between the end of `a` and `b`.\n   * @see [[CalendarEvent.time]]\n   */\n  public static End<T, M>(a: CalendarEvent<T, M>, b: CalendarEvent<T, M>): number\n  {\n    return a.time.end.time - b.time.end.time;\n  }\n\n  /**\n   * Sorts the two events placing the full day events before the timed events.\n   *\n   * @param a The first event.\n   * @param b The second event.\n   * @returns If both are timed or both are full day then `0` is returned,\n   *    otherwise `-1` is returned if `a` is full day and `1` is returned if\n   *    `b` is full day.\n   * @see [[CalendarEvent.fullDay]]\n   */\n  public static FullDay<T, M>(a: CalendarEvent<T, M>, b: CalendarEvent<T, M>): number\n  {\n    let af: number = a.fullDay ? 0 : 1;\n    let bf: number = b.fullDay ? 0 : 1;\n\n    return af - bf;\n  }\n\n  /**\n   * Sorts the two events placing the shorter events before the longer events.\n   * Full day or multiple day events actually take up a day and will be ordered\n   * last.\n   *\n   * @param a The first event.\n   * @param b The second event.\n   * @returns The difference in milliseconds between `a` and `b`.\n   * @see [[CalendarEvent.time]]\n   * @see [[DaySpan.millis]]\n   */\n  public static Duration<T, M>(a: CalendarEvent<T, M>, b: CalendarEvent<T, M>): number\n  {\n    return a.time.millis() - b.time.millis();\n  }\n\n  /**\n   * Returns a [[SortEvent]] that effectively orders the given sorter in the\n   * opposite (often descending) order.\n   *\n   * @param sorter The sorter to reverse.\n   * @returns A new sorter which reverses the one passed in.\n   */\n  public static Desc<T, M>(sorter: SortEvent<T, M>): SortEvent<T, M>\n  {\n    return (a, b) =>\n    {\n      return sorter( b, a );\n    };\n  }\n\n  /**\n   * Returns a [[SortEvent]] that orders the events based on a string in each\n   * event. A function must be supplied which takes an event of type `T` and\n   * returns a string.\n   *\n   * @param getString A function which returns a string from the event.\n   * @returns A sorter which sorts strings alphabetically.\n   */\n  public static Alphabetical<T, M>(getString: (event: Event<T, M>) => string): SortEvent<T, M>\n  {\n    return (a, b) =>\n    {\n      let as: string = getString( a.event ) || '';\n      let bs: string = getString( b.event ) || '';\n\n      return as.localeCompare( bs );\n    };\n  }\n\n  /**\n   * Returns a [[SortEvent]] that orders events based on a number in each event.\n   * A function must be supplied which takes an event of type `T` and returns\n   * a number.\n   *\n   * @param getOrder A function which returns a number from the event.\n   * @returns A sorter which sorts events based on a number in ascending order.\n   */\n  public static Ordered<T, M>(getOrder: (event: Event<T, M>) => number): SortEvent<T, M>\n  {\n    return (a, b) =>\n    {\n      let ao: number = getOrder( a.event );\n      let bo: number = getOrder( b.event );\n\n      return ao - bo;\n    };\n  }\n\n  /**\n   * Returns a [[SortEvent]] that orders events based on an array of sorters.\n   * The first sorter which returns a non-zero result is used.\n   *\n   * @param sorters A list of sorting functions to test one at a time.\n   * @returns A sorter which sorts based on a list of sorters.\n   */\n  public static List<T, M>(sorters: SortEvent<T, M>[]): SortEvent<T, M>\n  {\n    return (a, b) =>\n    {\n      for (let sorter of sorters)\n      {\n        let compare: number = sorter(a, b);\n\n        if (compare !== 0)\n        {\n          return compare;\n        }\n      }\n\n      return 0;\n    };\n  }\n\n}\n","\nexport * from './Calendar';\nexport * from './CalendarDay';\nexport * from './CalendarEvent';\nexport * from './Event';\nexport * from './Constants';\nexport * from './Day';\nexport * from './DaySpan';\nexport * from './Frequency';\nexport * from './Functions';\nexport * from './Identifier';\nexport * from './Iterator';\nexport * from './Month';\nexport * from './Operation';\nexport * from './Parse';\nexport * from './Pattern';\nexport * from './Schedule';\nexport * from './ScheduleModifier';\nexport * from './Sort';\nexport * from './Suffix';\nexport * from './Time';\nexport * from './Units';\nexport * from './Weekday';\n"],"sourceRoot":""}