{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 6cc39dd4ebdb06a42630","webpack:///external {\"commonjs\":\"moment\",\"commonjs2\":\"moment\",\"amd\":\"moment\",\"root\":\"moment\"}","webpack:///./src/Functions.ts","webpack:///./src/Operation.ts","webpack:///./src/Units.ts","webpack:///./src/Constants.ts","webpack:///./src/DaySpan.ts","webpack:///./src/Identifier.ts","webpack:///./src/Suffix.ts","webpack:///./src/Iterator.ts","webpack:///./src/ScheduleModifier.ts","webpack:///./src/Schedule.ts","webpack:///./src/Event.ts","webpack:///./src/Time.ts","webpack:///./src/Parse.ts","webpack:///./src/Day.ts","webpack:///./src/CalendarDay.ts","webpack:///./src/CalendarEvent.ts","webpack:///./src/Calendar.ts","webpack:///./src/Month.ts","webpack:///./src/Weekday.ts","webpack:///./src/Pattern.ts","webpack:///./src/Sort.ts","webpack:///./src/index.ts"],"names":[],"mappings":"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","file":"dayspan.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"moment\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ds\", [\"moment\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ds\"] = factory(require(\"moment\"));\n\telse\n\t\troot[\"ds\"] = factory(root[\"moment\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6cc39dd4ebdb06a42630","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"moment\",\"commonjs2\":\"moment\",\"amd\":\"moment\",\"root\":\"moment\"}\n// module id = 0\n// module chunks = 0","\n\n/**\n * The class which contains commonly used functions by the library. These\n * functions and variables exist in a class so they may be overridden if\n * desired.\n */\nexport class Functions\n{\n\n  /**\n   * Determines whether the given input is an array.\n   *\n   * @param input The variable to test.\n   * @returns `true` if the variable is an array, otherwise `false`.\n   */\n  public static isArray(input: any): boolean\n  {\n    return input instanceof Array;\n  }\n\n  /**\n   * Determines whether the two arrays given are stricly equivalent. If the\n   * arrays are not the same length or contain the same values in the same order\n   * then `false` is returned.\n   *\n   * @param x The first array to test.\n   * @param y The second array to test.\n   * @returns `true` if they have the same exact values, otherwise `false`.\n   */\n  public static isArrayEquals(x: any[], y: any[]): boolean\n  {\n    if (x === y) return true;\n    if (x.length !== y.length) return false;\n\n    for (let i = 0; i < x.length; i++)\n    {\n      if (x[ i ] !== y[ i ])\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Determines whether the given input is a string.\n   *\n   * @param input The variable to test.\n   * @returns `true` if the variable is a string, otherwise `false`.\n   */\n  public static isString(input: any): boolean\n  {\n    return typeof(input) === 'string';\n  }\n\n  /**\n   * Determines whether the given input is a finite number (a number which is\n   * not infinite or not the result of a divide-by-zero operation).\n   *\n   * @param input The variable to test.\n   * @returns `true` if the variable is a finite number, otherwise `false`.\n   */\n  public static isNumber(input: any): boolean\n  {\n    return isFinite(input) && typeof input === 'number';\n  }\n\n  /**\n   * Determines whether the given input is an object and NOT an array.\n   *\n   * @param input The variable to test.\n   * @returns `true` if the variable is a plain object, otherwise `false`.\n   */\n  public static isObject(input: any): boolean\n  {\n    return input !== null && !this.isArray(input) && typeof(input) === 'object';\n  }\n\n  /**\n   * Determines whether the given input is defined.\n   *\n   * @param input The variable to test.\n   * @return `true` if the variable is defined, otherwise `false`.\n   */\n  public static isDefined(input: any): boolean\n  {\n    return typeof(input) !== 'undefined';\n  }\n\n  /**\n   * Determines whether the given input is defined and not null.\n   *\n   * @param input The variable to test.\n   * @return `true` if the variable is defined and not null, otherwise `false`.\n   */\n  public static isValue(input: any): boolean\n  {\n    return input !== null && typeof(input) !== 'undefined';\n  }\n\n  /**\n   * Determines whether the given input appears to be a valid\n   * [[FrequencyValueEvery]].\n   *\n   * ```typescript\n   * Functions.isFrequencyValueEvery({});                   // false\n   * Functions.isFrequencyValueEvery([]);                   // false\n   * Functions.isFrequencyValueEvery([1]);                  // false\n   * Functions.isFrequencyValueEvery(null);                 // false\n   * Functions.isFrequencyValueEvery({every:2});            // true\n   * Functions.isFrequencyValueEvery({offset:1});           // false\n   * Functions.isFrequencyValueEvery({every:2, offset:1});  // true\n   * ```\n   *\n   * @param input The variable to test.\n   * @returns `true` if the variable appears to be a [[FrequencyValueEvery]],\n   *    otherwise false.\n   */\n  public static isFrequencyValueEvery(input: any): boolean\n  {\n    return this.isObject( input ) && this.isNumber( input.every );\n  }\n\n  /**\n   * Determines whether the given input appears to be a valid\n   * [[FrequencyValueOneOf]].\n   *\n   * ```typescript\n   * Functions.isFrequencyValueOneOf({});    // false\n   * Functions.isFrequencyValueOneOf([]);    // false\n   * Functions.isFrequencyValueOneOf([1]);   // true\n   * Functions.isFrequencyValueOneOf(null);  // false\n   * ```\n   *\n   * @param input The variable to test.\n   * @returns `true` if the variable appears to be a [[FrequencyValueOneOf]],\n   *    otherwise false.\n   */\n  public static isFrequencyValueOneOf(input: any): boolean\n  {\n    return this.isArray( input ) && input.length > 0;\n  }\n\n  /**\n   * Returns the first argument which is defined.\n   *\n   * ```typescript\n   * Functions.coalesce(3, 4);                // 3\n   * Functions.coalesce(undefined, 4);        // 4\n   * Functions.coalesce(null, 4);             // null\n   * Functions.coalesce(void 0, void 0, 5);   // 5\n   * ```\n   *\n   * @param a The first argument to look at.\n   * @param b The second argument to look at.\n   * @returns The first defined argument.\n   * @see [[Functions.isDefined]]\n   */\n  public static coalesce(a: any, b: any, c?: any): any\n  {\n    return this.isDefined( a ) ? a : (this.isDefined( b ) ? b : c);\n  }\n\n  /**\n   * Copies values from `from` object and sets them to the `target` object.\n   *\n   * @param target The object to set values to.\n   * @param from The object to copy value references from.\n   * @returns The reference to `target`.\n   */\n  public static extend(target: any, from: any): any\n  {\n    for (let prop in from)\n    {\n      target[ prop ] = from[ prop ];\n    }\n\n    return target;\n  }\n\n  /**\n   * Pads the string `x` up to `length` characters with the given `padding`\n   * optionally placing the `padding` `before` `x`.\n   *\n   * ```typescript\n   * Functions.pad('hey', 5, '_', false);   // 'hey__'\n   * Functions.pad('hey', 5, '_', true);    // '__hey'\n   * Functions.pad('heyman', 5, '_', true); // 'heyman'\n   * ```\n   *\n   * @param x The string to pad.\n   * @param length The length to pad to.\n   * @param padding The string to pad with.\n   * @param before If the padding should go before the string to pad.\n   * @returns The padded string if any padding needed be added.\n   */\n  public static pad(x: string, length: number, padding: string, before: boolean): string\n  {\n    while (x.length < length)\n    {\n      before ? x = padding + x : x = x + padding;\n    }\n\n    return x;\n  }\n\n  /**\n   * Pads the number `x` up to `length` digits where the padding is `0` and it\n   * goes before `x`. This function will only return the first `length`\n   * characters of the padding string representation of the number but can return\n   * an alternative number of `first` characters.\n   *\n   * ```typescript\n   * Functions.padNumber(29, 3);      // '029'\n   * Functions.padNumber(29, 3, 2);   // '02'\n   * Functions.padNumber(9573, 3);    // '957'\n   * ```\n   *\n   * @param x The number to pad with zeros in the beginning.\n   * @param length The number of digits the number should be padded to.\n   * @param first The number of digits to return from the start of the string.\n   * @returns A padded number.\n   */\n  public static padNumber(x: number, length: number, first: number = length)\n  {\n    return this.pad(x + '', length, '0', true).substring( 0, first );\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Functions.ts","\n/**\n * An operation that can be performed on a single number.\n */\nexport enum Op\n{\n  /**\n   * The number is returned unmodified.\n   */\n  NONE,\n\n  /**\n   * The number is rounded down to the nearest whole number.\n   */\n  FLOOR,\n\n  /**\n   * The number is rounded up to the nearest whole number.\n   */\n  CEIL,\n\n  /**\n   * The number is rounded up or down depending on if the fractional value is\n   * greater than or less than 0.5 respectively.\n   */\n  ROUND,\n\n  /**\n   * The fractional part of the number is dropped.\n   */\n  TRUNCATE,\n\n  /**\n   * The number is rounded up when positive and down when negative. This is\n   * effectively ceiling the absolute value where the result preserves the sign.\n   */\n  UP,\n\n  /**\n   * The number is rounded down when positive and up when negative. This is\n   * effectively floor the absolute value where the result preserves the sign.\n   */\n  DOWN\n}\n\n\n/**\n * Performs the requested operation on the given number, optionally taking\n * the absolute value of the number before the operation.\n *\n * @param value The number to operate on.\n * @param op The operation to perform.\n * @param absolute If the number should be positive before the operation.\n * @return The operated result, or the original value if its not a valid number.\n */\nexport function operate(value: number, op: Op, absolute: boolean = false)\n{\n  if (isFinite(value))\n  {\n    if (absolute)\n    {\n      value = Math.abs( value );\n    }\n\n    switch (op)\n    {\n    case Op.NONE:\n      return value;\n    case Op.FLOOR:\n      return Math.floor( value );\n    case Op.CEIL:\n      return Math.ceil( value );\n    case Op.ROUND:\n      return Math.round( value );\n    case Op.TRUNCATE:\n    case Op.DOWN:\n      return value < 0 ? Math.ceil( value ) : Math.floor( value );\n    case Op.UP:\n      return value < 0 ? Math.floor( value ) : Math.ceil( value );\n    }\n  }\n\n  return value;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Operation.ts","\n\n/**\n * Units of time that are compromised of 1 or more days for the [[Calendar]] class.\n */\nexport enum Units\n{\n  DAY,\n  WEEK,\n  MONTH,\n  YEAR\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Units.ts","\n\n/**\n * A class that stores commonly used values.\n */\nexport class Constants\n{\n\n  /**\n   * The number of milliseconds in a second.\n   */\n  public static MILLIS_IN_SECOND: number = 1000;\n\n  /**\n   * The number of milliseconds in a minute.\n   */\n  public static MILLIS_IN_MINUTE: number = Constants.MILLIS_IN_SECOND * 60;\n\n  /**\n   * The number of milliseconds in an hour.\n   */\n  public static MILLIS_IN_HOUR: number = Constants.MILLIS_IN_MINUTE * 60;\n\n  /**\n   * The number of milliseconds in a day (not including DST days).\n   */\n  public static MILLIS_IN_DAY: number = Constants.MILLIS_IN_HOUR * 24;\n\n  /**\n   * The number of milliseconds in a week (not including ones that include DST).\n   */\n  public static MILLIS_IN_WEEK: number = Constants.MILLIS_IN_DAY * 7;\n\n  /**\n   * The number of minutes in an hour.\n   */\n  public static MINUTES_IN_HOUR = 60;\n\n  /**\n   * The number of minutes in a day (not including DST days).\n   */\n  public static MINUTES_IN_DAY = 60 * 24;\n\n  /**\n   * The number of days in a week.\n   */\n  public static DAYS_IN_WEEK: number = 7;\n\n\n  /**\n   * The number of months in a year.\n   */\n  public static MONTHS_IN_YEAR: number = 12;\n\n  /**\n   * The number of hours in a day (not including DST days).\n   */\n  public static HOURS_IN_DAY: number = 24;\n\n\n  /**\n   * The first month of the year.\n   */\n  public static MONTH_MIN: number = 0;\n\n  /**\n   * The last month of the year.\n   */\n  public static MONTH_MAX: number = 11;\n\n  /**\n   * The first day of a month.\n   */\n  public static DAY_MIN: number = 1;\n\n  /**\n   * The last day of the longest month.\n   */\n  public static DAY_MAX: number = 31;\n\n  /**\n   * The first hour of the day.\n   */\n  public static HOUR_MIN: number = 0;\n\n  /**\n   * The last hour of the day.\n   */\n  public static HOUR_MAX: number = 23;\n\n  /**\n   * The first minute of the hour.\n   */\n  public static MINUTE_MIN: number = 0;\n\n  /**\n   * The last minute of the hour.\n   */\n  public static MINUTE_MAX: number = 59;\n\n  /**\n   * The first second of the minute.\n   */\n  public static SECOND_MIN: number = 0;\n\n  /**\n   * The last second of the minute.\n   */\n  public static SECOND_MAX: number = 59;\n\n  /**\n   * The first millisecond of the second.\n   */\n  public static MILLIS_MIN: number = 0;\n\n  /**\n   * The last millisecond of the second.\n   */\n  public static MILLIS_MAX: number = 999;\n\n  /**\n   * The first day of the week.\n   */\n  public static WEEKDAY_MIN: number = 0;\n\n  /**\n   * The last day of the week.\n   */\n  public static WEEKDAY_MAX: number = 6;\n\n\n  /**\n   * The default duration for an event.\n   */\n  public static DURATION_DEFAULT: number = 1;\n\n  /**\n   * The default duration unit for an all day event.\n   */\n  public static DURATION_DEFAULT_UNIT_ALL: string = 'days';\n\n  /**\n   * The default duration unit for an event at a given time.\n   */\n  public static DURATION_DEFAULT_UNIT_TIMES: string = 'hours';\n\n  /**\n   * Computes the duration unit given its for an all day event.\n   *\n   * @param all If the event is all day.\n   * @return The default unit for the event.\n   */\n  public static DURATION_DEFAULT_UNIT: (all: boolean) => string =\n    all => all ? Constants.DURATION_DEFAULT_UNIT_ALL :\n                 Constants.DURATION_DEFAULT_UNIT_TIMES;\n\n  /**\n   * The number of milliseconds for various duration units. These are worse case\n   * scenario and do not include DST changes.\n   */\n  public static DURATION_TO_MILLIS = {\n    minute:   Constants.MILLIS_IN_MINUTE,\n    minutes:  Constants.MILLIS_IN_MINUTE,\n    hour:     Constants.MILLIS_IN_HOUR,\n    hours:    Constants.MILLIS_IN_HOUR,\n    day:      Constants.MILLIS_IN_DAY,\n    days:     Constants.MILLIS_IN_DAY,\n    week:     Constants.MILLIS_IN_WEEK,\n    weeks:    Constants.MILLIS_IN_WEEK,\n    month:    Constants.MILLIS_IN_DAY * Constants.DAY_MAX,\n    months:   Constants.MILLIS_IN_DAY * Constants.DAY_MAX\n  };\n\n  /**\n   * The maximum estimated number of events per day. This is used to calculate\n   * [[CalendarEvent.id]] to give each event a unique ID. If you think you will\n   * have more events than this per day, you can enlarge the value.\n   */\n  public static MAX_EVENTS_PER_DAY: number = 24;\n\n  /**\n   * The day of the week which determines the first week of the year or month.\n   * By default this day is Thursday.\n   */\n  public static WEEK_OF_MONTH_MINIMUM_WEEKDAY: number = 4;\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Constants.ts","\nimport { Day } from './Day';\nimport { Op } from './Operation';\nimport { Units } from './Units';\nimport { Constants } from './Constants';\n\n\n\n/**\n * The calculated bounds of a DaySpan relative to a given day.\n */\nexport interface DaySpanBounds\n{\n\n  /**\n   * The top of the span within the rectangle of the given day.\n   */\n  top: number;\n\n  /**\n   * The bottom of the span within the rectangle of the givne day.\n   */\n  bottom: number;\n\n  /**\n   * The height of the span within the rectangle of the given day. This is\n   * equivalent by `bottom - top`.\n   */\n  height: number;\n\n  /**\n   * The left of the span within the rectangle of the given day.\n   */\n  left: number;\n\n  /**\n   * The right of the span within the rectangle of the given day.\n   */\n  right: number;\n\n  /**\n   * The width of the span within the rectangle of the given day. This is\n   * equivalent by `right - left`.\n   */\n  width: number;\n}\n\n/**\n * A class for a range of time between two [[Day]] timestamps.\n */\nexport class DaySpan\n{\n\n\n  /**\n   * The starting timestamp of the span (inclusive).\n   */\n  public start: Day;\n\n  /**\n   * The endind timestamp of the span (inclusive).\n   */\n  public end: Day;\n\n\n  /**\n   * Creates a new span of time.\n   *\n   * @param start The starting timestamp.\n   * @param end The ending timestamp.\n   */\n  public constructor(start: Day, end: Day)\n  {\n    this.start = start;\n    this.end = end;\n  }\n\n  /**\n   * Whether this span starts and ends on the same timestamp.\n   */\n  public get isPoint(): boolean\n  {\n    return this.start.time === this.end.time;\n  }\n\n  /**\n   * Determines whether the given timestamp lies between the start and end\n   * timestamp.\n   *\n   * @param day The timestamp to test.\n   * @returns True if the day is >= the start and <= the end of this span.\n   */\n  public contains(day: Day): boolean\n  {\n    return day.time >= this.start.time && day.time <= this.end.time;\n  }\n\n  /**\n   * Compares the given timestamp to this span. If the timestamp is before this\n   * span then `-1` is returned, if the timestamp is after this span then `1`\n   * us returned, otherwise `0` is returned when the timestamp is in this span.\n   *\n   * @param day The timestamp to compare to.\n   * @returns `-1`, `0`, or `1` depending on the given timestamp relative to\n   *    this span.\n   */\n  public compareTo(day: Day): number\n  {\n    return day.time < this.start.time ? -1 : (day.time > this.end.time ? 1 : 0);\n  }\n\n  /**\n   * Determines whether the given timestamp is between the start and end\n   * timestamp or lies on the same day as the start or end timestamp.\n   *\n   * @param day The timestamp to test.\n   * @see [[Day.sameDay]]\n   */\n  public matchesDay(day: Day): boolean\n  {\n    return this.contains( day ) || day.sameDay( this.start ) || day.sameDay( this.end );\n  }\n\n  /**\n   * Determines whether the given timestamp is between the start and end\n   * timestamp or lies on the same week as the start or end timestamp.\n   *\n   * @param day The timestamp to test.\n   * @see [[Day.sameWeek]]\n   */\n  public matchesWeek(day: Day): boolean\n  {\n    return this.contains( day ) || day.sameWeek( this.start ) || day.sameWeek( this.end );\n  }\n\n  /**\n   * Determines whether the given timestamp is between the start and end\n   * timestamp or lies on the same month as the start or end timestamp.\n   *\n   * @param day The timestamp to test.\n   * @see [[Day.sameMonth]]\n   */\n  public matchesMonth(day: Day): boolean\n  {\n    return this.contains( day ) || day.sameMonth( this.start ) || day.sameMonth( this.end );\n  }\n\n  /**\n   * Determines whether the given timestamp is between the start and end\n   * timestamp or lies on the same year as the start or end timestamp.\n   *\n   * @param day The timestamp to test.\n   * @see [[Day.sameYear]]\n   */\n  public matchesYear(day: Day): boolean\n  {\n    return this.contains( day ) || day.sameYear( this.start ) || day.sameYear( this.end );\n  }\n\n\n  /**\n   * Calculates the number of milliseconds between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.millisBetween]]\n   */\n  public millis(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.millisBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of seconds between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.secondsBetween]]\n   */\n  public seconds(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.secondsBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of minutes between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.minutesBetween]]\n   */\n  public minutes(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.minutesBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of hours between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.hoursBetween]]\n   */\n  public hours(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.hoursBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of days between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.daysBetween]]\n   */\n  public days(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.daysBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of weeks between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.weeksBetween]]\n   */\n  public weeks(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.weeksBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of months between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.monthsBetween]]\n   */\n  public months(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.monthsBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Calculates the number of years between the start and end timestamp.\n   *\n   * @param op The operation to perform on the result.\n   * @param absolute Whether the result should always be positive.\n   * @returns The time between the start and end timestamp.\n   * @see [[Day.yearsBetween]]\n   */\n  public years(op: Op = Op.DOWN, absolute: boolean = true): number\n  {\n    return this.start.yearsBetween(this.end, op, absolute);\n  }\n\n  /**\n   * Returns a delta value between 0 and 1 which represents where the\n   * [[DaySpan.start]] is relative to the given day. The delta value would\n   * be less than 0 if the start of the event is before the given day.\n   *\n   * @param relativeTo The day to find the start delta relative to.\n   * @return A number between 0 and 1 if the start of this span is in the\n   *    24-hour period starting at the given timestamp, otherwise the value\n   *    returned may be less than 0 or greater than 1.\n   */\n  public startDelta(relativeTo: Day): number\n  {\n    return (this.start.time - relativeTo.time) / Constants.MILLIS_IN_DAY;\n  }\n\n  /**\n   * Returns a delta value between 0 and 1 which represents where the\n   * [[DaySpan.end]] is relative to the given day. The delta value would\n   * be greater than 1 if the end of the event is after the given day.\n   *\n   * @param relativeTo The day to find the end delta relative to.\n   * @return A number between 0 and 1 if the end of this span is in the\n   *    24-hour period starting at the given timestamp, otherwise the value\n   *    returned may be less than 0 or greater than 1.\n   */\n  public endDelta(relativeTo: Day): number\n  {\n    return (this.end.time - relativeTo.time) / Constants.MILLIS_IN_DAY;\n  }\n\n  /**\n   * Calculates the bounds for span event if it were placed in a rectangle which\n   * represents a day (24 hour period). By default the returned values are\n   * between 0 and 1 and can be scaled by the proper rectangle dimensions or the\n   * rectangle dimensions can be passed to this function.\n   *\n   * @param relativeTo The day to find the bounds relative to. If this is not the\n   *    start of the day the returned bounds is relative to the given time.\n   * @param dayHeight The height of the rectangle of the day.\n   * @param dayWidth The width of the rectangle of the day.\n   * @param columnOffset The offset in the rectangle of the day to adjust this\n   *    span by. This also reduces the width of the returned bounds to keep the\n   *    bounds in the rectangle of the day.\n   * @param clip `true` if the bounds should stay in the day rectangle, `false`\n   *    and the bounds may go outside the rectangle of the day for multi-day\n   *    spans.\n   * @param offsetX How much to translate the left & right properties by.\n   * @param offsetY How much to translate the top & bottom properties by.\n   * @returns The calculated bounds for this span.\n   */\n  public getBounds(relativeTo: Day, dayHeight: number = 1, dayWidth: number = 1, columnOffset: number = 0, clip: boolean = true, offsetX: number = 0, offsetY: number = 0): DaySpanBounds\n  {\n    let startRaw: number = this.startDelta( relativeTo );\n    let endRaw: number = this.endDelta( relativeTo );\n\n    let start: number = clip ? Math.max(0, startRaw) : startRaw;\n    let end: number = clip ? Math.min(1, endRaw) : endRaw;\n\n    let left: number = columnOffset;\n    let right: number = dayWidth - left;\n\n    let top: number = start * dayHeight;\n    let bottom: number = end * dayHeight;\n\n    return {\n      top: top + offsetY,\n      bottom: bottom + offsetY,\n      height: bottom - top,\n      left: left + offsetX,\n      right: right + offsetX,\n      width: right\n    };\n  }\n\n  /**\n   * Summarizes this span given an approximate unit of time and a few other\n   * options. If the start and end are on the same unit, a single value will\n   * be returned. Otherwise a start and end will be returned with a `delimiter`.\n   *\n   * @param type The unit of time this span is for.\n   * @param dayOfWeek When `true` the weekday of the start and end are included.\n   * @param short When `true` the short form of weekdays and months will be used.\n   * @param repeat When `true` the year will be repeated on the start and end\n   *  timestamp even if they are the same year.\n   * @param contextual When `true` the year will be hidden if it's the current\n   *  year.\n   * @param delimiter The string to separate the start and end timestamps with.\n   * @returns The summary of this span.\n   */\n  public summary(type: Units, dayOfWeek: boolean = true, short: boolean = false, repeat: boolean = false, contextual: boolean = true, delimiter: string = ' - '): string\n  {\n    let formats = DaySpan.SUMMARY_FORMATS[ type ];\n    let today: Day = Day.today();\n    let showStartYear: boolean = !contextual || !this.start.sameYear( today );\n    let showEndYear: boolean = !contextual || !this.end.sameYear( today );\n    let start: string = this.start.format( formats(short, dayOfWeek, showStartYear) );\n    let end: string = this.end.format( formats(short, dayOfWeek, showEndYear) );\n    let summary: string = start;\n\n    if (start !== end)\n    {\n      if (!repeat)\n      {\n        summary = this.start.format( formats(short, dayOfWeek, !this.start.sameYear(this.end)) );\n      }\n\n      summary += delimiter;\n      summary += end;\n    }\n    else\n    {\n      summary = start;\n    }\n\n    return summary;\n  }\n\n  /**\n   * Determines whether the gven span intersects with this span.\n   *\n   * @param span The span to test.\n   * @returns `true` if the spans intersect, otherwise `false`.\n   */\n  public intersects(span: DaySpan): boolean\n  {\n    return !(\n      this.end.time < span.start.time ||\n      this.start.time > span.end.time\n    );\n  }\n\n  /**\n   * Calculates the intersection between this span and the given span. If there\n   * is no intersection between the two spans then `null` is returned.\n   *\n   * @param span The span to calculate the intersection with.\n   * @returns The intersection or `null` if none exists.\n   */\n  public intersection(span: DaySpan): DaySpan\n  {\n    let start: Day = this.start.max( span.start );\n    let end: Day = this.end.min( span.end );\n\n    return start.isAfter( end ) ? null : new DaySpan(start, end);\n  }\n\n  /**\n   * Calculates the union between this span and the given span.\n   *\n   * @param span The span to calculate the union with.\n   * @returns The union of the two spans.\n   */\n  public union(span: DaySpan): DaySpan\n  {\n    let start: Day = this.start.min( span.start );\n    let end: Day = this.end.max( span.end );\n\n    return new DaySpan(start, end);\n  }\n\n  /**\n   * Returns a point [[DaySpan]] with the same start and end timestamp.\n   *\n   * @param day The timestamp which will be the start and end.\n   * @returns The new instance.\n   * @see [[DaySpan.isPoint]]\n   */\n  public static point(day: Day): DaySpan\n  {\n    return new DaySpan( day, day );\n  }\n\n\n  /**\n   * Formatting functions which assist the [[DaySpan.summary]] function.\n   */\n  public static SUMMARY_FORMATS =\n  {\n    [Units.DAY]: (short: boolean, dayOfWeek: boolean, year: boolean) => {\n      return (dayOfWeek ? (short ? 'ddd, ' : 'dddd, ') : '') + (short ? 'MMM ' : 'MMMM ') + 'Do' + (year ? ' YYYY' : '');\n    },\n    [Units.WEEK]: (short: boolean, dayOfWeek: boolean, year: boolean) => {\n      return (dayOfWeek ? (short ? 'ddd, ' : 'dddd, ') : '') + (short ? 'MMM ' : 'MMMM ') + 'Do' + (year ? ' YYYY' : '');\n    },\n    [Units.MONTH]: (short: boolean, dayOfWeek: boolean, year: boolean) => {\n      return (short ? 'MMM' : 'MMMM') + (year ? ' YYYY' : '');\n    },\n    [Units.YEAR]: (short: boolean, dayOfWeek: boolean, year: boolean) => {\n      return (year ? 'YYYY' : '');\n    }\n  };\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/DaySpan.ts","\nimport { Functions as fn } from './Functions';\nimport { Day } from './Day';\nimport { DaySpan } from './DaySpan';\n\n\n/**\n * The type for identifiers. Most of the time an identifier can be stored as a\n * number because the 4 digit year is first. However when the year is below\n * 1000 a string will be used with zero padding. Storing identifiers as numbers\n * enable very quick comparisons and using strings or numbers allows the\n * identifier to be used as a key to a map.\n */\nexport type IdentifierInput = number | string;\n\n/**\n * The possible properties which can be pulled from an identifier.\n */\nexport interface IdentifierObject\n{\n  /**\n   * The year pulled from an identifier (0-9999).\n   */\n  year?: number;\n  /**\n   * The quarter of the year pulled from an identifier (1-4)\n   */\n  quarter?: number;\n  /**\n   * The month of the year pulled from an identifier (0-11)\n   */\n  month?: number;\n  /**\n   * The week of the year pulled from an identifier (1-52)\n   */\n  week?: number;\n  /**\n   * The day of the month pulled from an identifier (1-31)\n   */\n  day?: number;\n  /**\n   * The hour of the day pulled from an identifier (0-23)\n   */\n  hour?: number;\n  /**\n   * The minute of the hour pulled from an identifier (0-59)\n   */\n  minute?: number;\n}\n\n\n/**\n * A class for detecting, parsing, and building identifiers to and from days.\n *\n * An identifier is a simple value which represents a span of time. It may\n * represent an entire year, a quarter (3 months) of a year, a week of a year,\n * a month in a year, a specific day of a month of a year, or a specific hour,\n * minute, day, and month of a year.\n *\n * For example:\n * - `2018`: The year 2018\n * - `201801`: January 2018\n * - `2014023`: The 23rd week of 2014\n * - `20170311`: March 11th, 2017\n * - `201406151651`: June 15th 2016 at 4:51 pm\n * - `'0525'`: Year 525 of the first age, Elrond and Elros are born\n */\nexport abstract class Identifier\n{\n\n  /**\n   * Determines whether the given identifier is this type.\n   *\n   * @param id The identifier to test.\n   * @returns `true` if the identifier is this type, otherwise `false`.\n   */\n  public is(id: IdentifierInput): boolean\n  {\n    return (id + '').length === this.getLength();\n  }\n\n  /**\n   * Returns the identifier of this type for the given day,\n   *\n   * @param day The day to get the identifier of.\n   * @returns The identifier for the day of this type.\n   */\n  abstract get(day: Day): IdentifierInput;\n\n  /**\n   * Converts the given identifier which has passed [[Identifier.is]] to an\n   * object with properties pulled from the identifier.\n   *\n   * @param id The identifier to parse.\n   * @returns The object with properties parsed from the identifer.\n   */\n  abstract object(id: IdentifierInput): IdentifierObject;\n\n  /**\n   * Returns the start of the time span the identifier represents.\n   *\n   * @param id The identifier to convert to a start day.\n   * @returns The start of the time span the identifier represents.\n   */\n  abstract start(id: IdentifierInput): Day;\n\n  /**\n   * Returns the span of time the identifier represents.\n   *\n   * @param id The identifier to convert to a span.\n   * @param endInclusive When `true` the end of the span will be the very last\n   *    millisecond that represents the timespan, otherwise `false` the end\n   *    will be the start of the very next span.\n   * @returns\n   */\n  abstract span(id: IdentifierInput, endInclusive: boolean): DaySpan;\n\n  /**\n   * Determines if the day matches the given identifier.\n   *\n   * @param day The day to test.\n   * @param id The identifier to compare to.\n   * @returns `true` if the day exists in the time span represented by the\n   *    identifier, otherwise `false`.\n   */\n  abstract matches(day: Day, id: IdentifierInput): boolean;\n\n  /**\n   * Describes the given identifier as a human friendly string.\n   *\n   * @param id The identifier to describe.\n   * @param short If the description should use shorter language or longer.\n   * @returns The human friendly string that describes the identifier.\n   */\n  abstract describe(id: IdentifierInput, short: boolean): string;\n\n  /**\n   * The scales for all the different values stored in an identifier.\n   */\n  protected abstract getScales(): number[];\n\n  /**\n   * The length of the identifier of this type in digits.\n   */\n  protected abstract getLength(): number;\n\n  /**\n   * Computes the identifier given values taken from a [[Day]].\n   *\n   * @param values The values to compute.\n   * @returns The computed identifier.\n   */\n  protected compute(...values: number[]): IdentifierInput\n  {\n    const scales: number[] = this.getScales();\n    let total: number = 0;\n\n    for (let i = 0; i < values.length; i++)\n    {\n      total += values[ i ] * scales[ i ];\n    }\n\n    return this.is( total ) ? total : fn.padNumber(total, this.getLength());\n  }\n\n  /**\n   * Decomputes the given identifier and returns values which describe a span\n   * of time.\n   *\n   * @param id The identifier to decompute.\n   * @returns The original values which computed the identifier.\n   */\n  protected decompute(id: IdentifierInput): number[]\n  {\n    const scales: number[] = this.getScales();\n    let total: number = fn.isNumber(id) ? <number>id : parseInt(<string>id);\n    let values: number[] = [];\n\n    for (let i = 0; i < scales.length - 1; i++)\n    {\n      let curr: number = scales[ i + 0 ];\n      let next: number = scales[ i + 1 ];\n      let mod: number = next / curr;\n      let value: number = total % mod;\n\n      values.push( value );\n      total = Math.floor( total / mod );\n    }\n\n    values.push( total );\n\n    return values;\n  }\n\n  /**\n   * The identifier type for an hour of time on a specific day.\n   */\n  public static Time: Identifier = null;\n\n  /**\n   * The identifier type for a specific day.\n   */\n  public static Day: Identifier = null;\n\n  /**\n   * The identifier type for a specific week of a year.\n   */\n  public static Week: Identifier = null;\n\n  /**\n   * The identifier type for a specific month of a year.\n   */\n  public static Month: Identifier = null;\n\n  /**\n   * The identifier type for a specific quarter of a year.\n   */\n  public static Quarter: Identifier = null;\n\n  /**\n   * The identifier type for a specific year.\n   */\n  public static Year: Identifier = null;\n\n\n  /**\n   * Finds which identifier type matches the given identifier, if any.\n   *\n   * @param id The identifier to find the type of.\n   * @returns The found identifier type, otherwise `null` if none exists.\n   */\n  public static find(id: IdentifierInput): Identifier\n  {\n    if (this.Time.is(id)) return this.Time;\n    if (this.Day.is(id)) return this.Day;\n    if (this.Week.is(id)) return this.Week;\n    if (this.Month.is(id)) return this.Month;\n    if (this.Year.is(id)) return this.Year;\n\n    return null;\n  }\n\n  /**\n   * Determines whether the given time span `outer` contains the time span\n   * `inner`.\n   *\n   * @param outer The potentially larger time span `inner` must be contained in.\n   * @param inner The time span to test is contained inside `outer`.\n   * @returns `true` if `inner` is equal to or contained in `outer`, otherwise\n   *    `false`.\n   */\n  public static contains(outer: IdentifierInput, inner: IdentifierInput): boolean\n  {\n    let outerString: string = outer + '';\n\n    return (inner + '').substring( 0, outerString.length ) === outerString;\n  }\n\n}\n\n// YYYYMMddHHmm (12)\nclass IdentifierTime extends Identifier\n{\n\n  public static DESCRIBE_FORMAT_LONG: string = 'LLL';\n  public static DESCRIBE_FORMAT_SHORT: string = 'lll';\n\n  private static SCALES: number[] = [\n    1           /* minute */,\n    100         /* hour   */,\n    10000       /* day    */,\n    1000000     /* month  */,\n    100000000   /* year   */];\n  private static LENGTH: number = 12;\n\n  protected getScales(): number[]\n  {\n    return IdentifierTime.SCALES;\n  }\n\n  protected getLength(): number\n  {\n    return IdentifierTime.LENGTH;\n  }\n\n  public get(day: Day): IdentifierInput\n  {\n    return this.compute(day.minute, day.hour, day.dayOfMonth, day.month + 1, day.year);\n  }\n\n  public object(id: IdentifierInput): IdentifierObject\n  {\n    let values: number[] = this.decompute(id);\n\n    return {\n      minute:   values[0],\n      hour:     values[1],\n      day:      values[2],\n      month:    values[3] - 1,\n      year:     values[4]\n    };\n  }\n\n  public start(id: IdentifierInput): Day\n  {\n    let obj: IdentifierObject = this.object(id);\n    let start: Day = Day.build( obj.year, obj.month, obj.day, obj.hour, obj.minute );\n\n    return start;\n  }\n\n  public span(id: IdentifierInput, endInclusive: boolean = false): DaySpan\n  {\n    let start: Day = this.start( id );\n    let end: Day = start.endOfHour( endInclusive );\n\n    return new DaySpan(start, end);\n  }\n\n  public describe(id: IdentifierInput, short: boolean = false): string\n  {\n    let start: Day = this.start( id );\n    let format: string = short ? IdentifierTime.DESCRIBE_FORMAT_SHORT : IdentifierTime.DESCRIBE_FORMAT_LONG;\n\n    return start.format( format );\n  }\n\n  public matches(day: Day, id: IdentifierInput): boolean\n  {\n    return day.timeIdentifier === id;\n    /*\n    let obj: IdentifierObject = this.object(id);\n\n    return (\n      day.year === obj.year &&\n      day.month === obj.month &&\n      day.dayOfMonth === obj.day &&\n      day.hour === obj.hour &&\n      day.minute === obj.minute\n    );\n    */\n  }\n\n}\n\n// YYYYMMdd (8)\nclass IdentifierDay extends Identifier\n{\n\n  public static DESCRIBE_FORMAT_LONG: string = 'LL';\n  public static DESCRIBE_FORMAT_SHORT: string = 'll';\n\n  private static SCALES: number[] = [\n    1           /* day     */,\n    100         /* month   */,\n    10000       /* year    */];\n  private static LENGTH: number = 8;\n\n  protected getScales(): number[]\n  {\n    return IdentifierDay.SCALES;\n  }\n\n  protected getLength(): number\n  {\n    return IdentifierDay.LENGTH;\n  }\n\n  public get(day: Day): IdentifierInput\n  {\n    return this.compute(day.dayOfMonth, day.month + 1, day.year);\n  }\n\n  public object(id: IdentifierInput): IdentifierObject\n  {\n    let values: number[] = this.decompute(id);\n\n    return {\n      day:      values[0],\n      month:    values[1] - 1,\n      year:     values[2]\n    };\n  }\n\n  public start(id: IdentifierInput): Day\n  {\n    let obj: IdentifierObject = this.object(id);\n    let start: Day = Day.build( obj.year, obj.month, obj.day );\n\n    return start;\n  }\n\n  public span(id: IdentifierInput, endInclusive: boolean = false): DaySpan\n  {\n    let start: Day = this.start( id );\n    let end: Day = start.end( endInclusive );\n\n    return new DaySpan(start, end);\n  }\n\n  public describe(id: IdentifierInput, short: boolean = false): string\n  {\n    let start: Day = this.start( id );\n    let format: string = short ? IdentifierDay.DESCRIBE_FORMAT_SHORT : IdentifierDay.DESCRIBE_FORMAT_LONG;\n\n    return start.format( format );\n  }\n\n  public matches(day: Day, id: IdentifierInput): boolean\n  {\n    return day.dayIdentifier === id;\n    /*\n    let obj: IdentifierObject = this.object(id);\n\n    return (\n      day.year === obj.year &&\n      day.month === obj.month &&\n      day.dayOfMonth === obj.day\n    );\n    */\n  }\n\n}\n\n// YYYY0ww (7)\nclass IdentifierWeek extends Identifier\n{\n\n  public static DESCRIBE_FORMAT_LONG: string = 'wo [week of] YYYY';\n  public static DESCRIBE_FORMAT_SHORT: string = 'wo [week of] YYYY';\n\n  private static SCALES: number[] = [\n    1           /* week   */,\n    1000        /* year   */];\n  private static LENGTH: number = 7;\n\n  protected getScales(): number[]\n  {\n    return IdentifierWeek.SCALES;\n  }\n\n  protected getLength(): number\n  {\n    return IdentifierWeek.LENGTH;\n  }\n\n  public get(day: Day): IdentifierInput\n  {\n    return this.compute(day.week, day.year);\n  }\n\n  public object(id: IdentifierInput): IdentifierObject\n  {\n    let values: number[] = this.decompute(id);\n\n    return {\n      week:     values[0],\n      year:     values[1]\n    };\n  }\n\n  public start(id: IdentifierInput): Day\n  {\n    let obj: IdentifierObject = this.object(id);\n    let start: Day = Day.build( obj.year, 0 ).withWeek( obj.week );\n\n    return start;\n  }\n\n  public span(id: IdentifierInput, endInclusive: boolean = false): DaySpan\n  {\n    let start: Day = this.start( id );\n    let end: Day = start.endOfWeek( endInclusive );\n\n    return new DaySpan(start, end);\n  }\n\n  public describe(id: IdentifierInput, short: boolean = false): string\n  {\n    let start: Day = this.start( id );\n    let format: string = short ? IdentifierWeek.DESCRIBE_FORMAT_SHORT : IdentifierWeek.DESCRIBE_FORMAT_LONG;\n\n    return start.format( format );\n  }\n\n  public matches(day: Day, id: IdentifierInput): boolean\n  {\n    return day.weekIdentifier === id;\n    /*\n    let obj: IdentifierObject = this.object(id);\n\n    return (\n      day.year === obj.year &&\n      day.week === obj.week\n    );\n    */\n  }\n\n}\n\n// YYYYMM (6)\nclass IdentifierMonth extends Identifier\n{\n\n  public static DESCRIBE_FORMAT_LONG: string = 'MMMM YYYY';\n  public static DESCRIBE_FORMAT_SHORT: string = 'MMM YYYY';\n\n  private static SCALES: number[] = [\n    1           /* month  */,\n    100         /* year   */];\n  private static LENGTH: number = 6;\n\n  protected getScales(): number[]\n  {\n    return IdentifierMonth.SCALES;\n  }\n\n  protected getLength(): number\n  {\n    return IdentifierMonth.LENGTH;\n  }\n\n  public get(day: Day): IdentifierInput\n  {\n    return this.compute(day.month + 1, day.year);\n  }\n\n  public object(id: IdentifierInput): IdentifierObject\n  {\n    let values: number[] = this.decompute(id);\n\n    return {\n      month:    values[0] - 1,\n      year:     values[1]\n    };\n  }\n\n  public start(id: IdentifierInput): Day\n  {\n    let obj: IdentifierObject = this.object(id);\n    let start: Day = Day.build( obj.year, obj.month );\n\n    return start;\n  }\n\n  public span(id: IdentifierInput, endInclusive: boolean = false): DaySpan\n  {\n    let start: Day = this.start( id );\n    let end: Day = start.endOfMonth( endInclusive );\n\n    return new DaySpan(start, end);\n  }\n\n  public describe(id: IdentifierInput, short: boolean = false): string\n  {\n    let start: Day = this.start( id );\n    let format: string = short ? IdentifierMonth.DESCRIBE_FORMAT_SHORT : IdentifierMonth.DESCRIBE_FORMAT_LONG;\n\n    return start.format( format );\n  }\n\n  public matches(day: Day, id: IdentifierInput): boolean\n  {\n    return day.monthIdentifier === id;\n    /*\n    let obj: IdentifierObject = this.object(id);\n\n    return (\n      day.year === obj.year &&\n      day.month === obj.month\n    );\n    */\n  }\n\n}\n\n// YYYYQ (5)\nclass IdentifierQuarter extends Identifier\n{\n\n  public static DESCRIBE_FORMAT_LONG: string = 'Qo [quarter] YYYY';\n  public static DESCRIBE_FORMAT_SHORT: string = 'Qo [quarter] YYYY';\n\n  private static SCALES: number[] = [\n    1           /* quarter  */,\n    10          /* year   */];\n  private static LENGTH: number = 5;\n\n  protected getScales(): number[]\n  {\n    return IdentifierQuarter.SCALES;\n  }\n\n  protected getLength(): number\n  {\n    return IdentifierQuarter.LENGTH;\n  }\n\n  public get(day: Day): IdentifierInput\n  {\n    return this.compute(day.quarter, day.year);\n  }\n\n  public object(id: IdentifierInput): IdentifierObject\n  {\n    let values: number[] = this.decompute(id);\n\n    return {\n      quarter:  values[0],\n      year:     values[1]\n    };\n  }\n\n  public start(id: IdentifierInput): Day\n  {\n    let obj: IdentifierObject = this.object(id);\n    let start: Day = Day.build( obj.year, (obj.quarter - 1) * 3 );\n\n    return start;\n  }\n\n  public span(id: IdentifierInput, endInclusive: boolean = false): DaySpan\n  {\n    let start: Day = this.start( id );\n    let end: Day = start.relativeMonths( 3 ).endOfMonth( endInclusive );\n\n    return new DaySpan(start, end);\n  }\n\n  public describe(id: IdentifierInput, short: boolean = false): string\n  {\n    let start: Day = this.start( id );\n    let format: string = short ? IdentifierQuarter.DESCRIBE_FORMAT_SHORT : IdentifierQuarter.DESCRIBE_FORMAT_LONG;\n\n    return start.format( format );\n  }\n\n  public matches(day: Day, id: IdentifierInput): boolean\n  {\n    return day.quarterIdentifier === id;\n    /*\n    let obj: IdentifierObject = this.object(id);\n\n    return (\n      day.year === obj.year &&\n      day.quarter === obj.quarter\n    );\n    */\n  }\n\n}\n\n// YYYY (4)\nclass IdentifierYear extends Identifier\n{\n\n  public static DESCRIBE_FORMAT_LONG: string = 'YYYY';\n  public static DESCRIBE_FORMAT_SHORT: string = 'YYYY';\n\n  private static SCALES: number[] = [\n    1           /* year  */];\n  private static LENGTH: number = 4;\n\n  protected getScales(): number[]\n  {\n    return IdentifierYear.SCALES;\n  }\n\n  protected getLength(): number\n  {\n    return IdentifierYear.LENGTH;\n  }\n\n  public get(day: Day): IdentifierInput\n  {\n    return this.compute(day.year);\n  }\n\n  public object(id: IdentifierInput): IdentifierObject\n  {\n    let values: number[] = this.decompute(id);\n\n    return {\n      year:     values[0]\n    };\n  }\n\n  public start(id: IdentifierInput): Day\n  {\n    let obj: IdentifierObject = this.object(id);\n    let start: Day = Day.build( obj.year, 0 );\n\n    return start;\n  }\n\n  public span(id: IdentifierInput, endInclusive: boolean = false): DaySpan\n  {\n    let start: Day = this.start( id );\n    let end: Day = start.endOfYear( endInclusive );\n\n    return new DaySpan(start, end);\n  }\n\n  public describe(id: IdentifierInput, short: boolean = false): string\n  {\n    let start: Day = this.start( id );\n    let format: string = short ? IdentifierYear.DESCRIBE_FORMAT_SHORT : IdentifierYear.DESCRIBE_FORMAT_LONG;\n\n    return start.format( format );\n  }\n\n  public matches(day: Day, id: IdentifierInput): boolean\n  {\n    return day.year === id;\n    /*\n    let obj: IdentifierObject = this.object(id);\n\n    return (\n      day.year === obj.year\n    );\n    */\n  }\n\n}\n\n// Sets the Identifier types\nIdentifier.Time = new IdentifierTime();\nIdentifier.Day = new IdentifierDay();\nIdentifier.Week = new IdentifierWeek();\nIdentifier.Month = new IdentifierMonth();\nIdentifier.Quarter = new IdentifierQuarter();\nIdentifier.Year = new IdentifierYear();\n\n\n\n// WEBPACK FOOTER //\n// ./src/Identifier.ts","\n/**\n * A class which takes a number and determines the suffix for that number.\n *\n * ```typescript\n * Suffix.CACHE[ 2 ];         // 2nd\n * Suffix.determine( 3 );     // rd\n * Suffix.get( 4 );           // th\n * Suffix.get( 4, true );     // 4th\n * ```\n */\nexport class Suffix\n{\n\n  /**\n   * The array of suffixes used.\n   */\n  public static MAP: string[] = [\n    'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'\n  ];\n\n  /**\n   * An internal cache of [[Suffix._CACHE_SIZE]] suffixes.\n   */\n  private static _CACHE: string[];\n\n  /**\n   * The number of values to store in the cache (inclusive).\n   */\n  private static _CACHE_SIZE: number = 366;\n\n\n  /**\n   * The cache of number & suffix pairs.\n   */\n  public static get CACHE(): string[]\n  {\n    if (!this._CACHE)\n    {\n      this._CACHE = [];\n\n      for (let i = 0; i <= this._CACHE_SIZE; i++)\n      {\n        this._CACHE[ i ] = this.get( i, true );\n      }\n    }\n\n    return this._CACHE;\n  }\n\n  /**\n   * Determines the suffix for a given number.\n   *\n   * @param value The number to find the suffix for.\n   * @returns The suffix determined.\n   */\n  public static determine(value: number): string\n  {\n    return value >= 11 && value <= 13 ? 'th' : this.MAP[ value % this.MAP.length ];\n  }\n\n  /**\n   * Gets the suffix for a number and optionally appends it before the suffix.\n   *\n   * @param value The number to get the suffix for.\n   * @param prepend When `true` the value is prepended to the suffix.\n   * @returns The suffix or value & suffix pair determined.\n   */\n  public static get(value: number, prepend: boolean = false): string\n  {\n    let suffix: string = this.determine(value);\n\n    return prepend ? value + suffix : suffix;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Suffix.ts","\nimport { Functions as fn } from './Functions';\n\n\n/**\n * The callback which is invoked for each item in the Iterator. The callback\n * can call [[Iterator.stop]] at anytime to stop iteration.\n *\n * @param item The item found in the iterator.\n * @param iterator The iterator with the item.\n * @returns The result of the callback.\n */\nexport type IteratorCallback<T, R> = (item: T, iterator: Iterator<T>) => R;\n\n/**\n * An [[Iterator]] source which handles iterating over items and calls\n * [[Iterator.act]] for each item, taking the requested action when possible.\n *\n * @param callback The function to invoke for each item.\n * @param iterator The iterator to check for early exists.\n */\nexport type IteratorSource<T> = (iterator: Iterator<T>) => any;\n\n/**\n * A filter to apply duration iteration to only look at certain items when this\n * function returns `true`.\n *\n * @param item The item being iterated.\n * @returns `true` if the item should be iterated, otherwise `false`.\n */\nexport type IteratorFilter<T> = (item: T) => boolean;\n\n/**\n * An action to perform on the source as instructed by the iterator.\n */\nexport enum IteratorAction\n{\n  /**\n   * Continue iteration.\n   */\n  Continue,\n\n  /**\n   * Stop iteration.\n   */\n  Stop,\n\n  /**\n   * Remove the current item if possible, and continue iteration.\n   */\n  Remove,\n\n  /**\n   * Replace the current item with the provided value.\n   */\n  Replace\n}\n\n/**\n * A class that allows an iteratable source to be iterated any number of times\n * by providing the following functionality:\n *\n * - [[Iterator.isEmpty]]: Determines whether the source contains any items.\n * - [[Iterator.first]]: Gets the first item in the source.\n * - [[Iterator.count]]: Counds the number of items in the source.\n * - [[Iterator.list]]: Builds a list of the items in the source.\n * - [[Iterator.object]]: Builds an object of the items in the source.\n * - [[Iterator.reduce]]: Reduces the items in the source down to a single value.\n * - [[Iterator.purge]]: Removes items from the source which meet some criteria.\n * - [[Iterator.filter]]: Returns a subset of items that meet some criteria by\n *    returning a new Iterator.\n * - [[Iterator.map]]: Maps each item in the source to another item by returning\n *    a new Iterator.\n * - [[Iterator.iterate]]: Invokes a function for each item in the source.\n *\n * The following static functions exist to help iterate simple sources:\n *\n * - [[Iterator.forArray]]: Iterates an array, optionally reverse\n * - [[Iterator.forObject]]: Iterates the properties of an object, optionally\n *    just the properties explicitly set on the object.\n *\n * ```typescript\n * let iter = object.iterateThings();\n * iter.isEmpty();              // no items?\n * iter.isEmpty(d => d.flag);   // no items that meet some criteria?\n * iter.count();                // number of items\n * iter.count(d => d.flag);     // number of items that meet some criteria\n * iter.first();                // first item\n * iter.first(d => d.flag);     // first item that meets some criteria\n * iter.list();                 // get all items as array\n * iter.list(myArray);          // add all items to given array\n * iter.list([], d => d.flag);  // get all items as array that meet some criteria\n * iter.object(d => d.id);      // get all items as an object keyed by a value (ex: id)\n * iter.object(d => d.id, {},\n *    d => d.flag);             // get all items as an object keyed by a value where the item meets some criteria (ex: key id if flag is truthy)\n * iter.purge(d => d.flag);     // remove all items from source that meet some criteria\n * iter.filter(d => d.flag);    // returns an iterator which iterates a subset of items which meet some criteria\n * iter.reduce<number>(0,\n *   (d, t) => t + d.size);     // reduces all items to a single value (ex: sums all size)\n * iter.reduce<number>(0,\n *   (d, t) => t + d.size,\n *   d => d.flag);              // reduces all items to a single value (ex: sums all size) where the item meets some criteria\n * iter.map<S>(d => d.subitem); // return an iterator for subitems if they exist\n * iter.iterate(d => log(d));   // do something for each item\n * ```\n *\n * @typeparam T The type of item being iterated.\n */\nexport class Iterator<T>\n{\n\n  /**\n   * A result of the iteration passed to [[Iterator.stop]].\n   */\n  public result: any = null;\n\n  /**\n   * The last action (if any) called on this iterator.\n   */\n  public action: IteratorAction;\n\n  /**\n   * The value to replace with the current item.\n   */\n  public replaceWith: T;\n\n  /**\n   * The current callback passed to the iterator.\n   */\n  public callback: IteratorCallback<T, any>;\n\n  /**\n   * The source of iterable items. This allows the iteration over any type of\n   * structure. The source must call the callback for each item and its\n   * recommended that the source checks the [[Iterator.iterating]] flag after\n   * each callback invokation.\n   */\n  private source: IteratorSource<T>;\n\n  /**\n   * Creates a new Iterator given a source.\n   *\n   * @param source The source of items to iterator.\n   */\n  public constructor(source: IteratorSource<T>)\n  {\n    this.source = source;\n  }\n\n  /**\n   * Returns a clone of this iterator with the same source. This is necessary\n   * if you want to iterate all or a portion of the source while already\n   * iterating it (like a nested loop).\n   */\n  public clone(): Iterator<T>\n  {\n    return new Iterator<T>( this.source );\n  }\n\n  /**\n   * Passes the given item to the iterator callback and returns the action\n   * requested at this point in iteration.\n   *\n   * @param item The current item being iterated.\n   */\n  public act(item: T): IteratorAction\n  {\n    this.action = IteratorAction.Continue;\n    this.replaceWith = null;\n\n    this.callback( item, this );\n\n    return this.action;\n  }\n\n  /**\n   * Stops iteration and optionally sets the result of the iteration.\n   *\n   * @param result The result of the iteration.\n   */\n  public stop(result?: any): this\n  {\n    this.result = result;\n    this.action = IteratorAction.Stop;\n\n    return this;\n  }\n\n  /**\n   * Stops iteration and optionally sets the result of the iteration.\n   *\n   * @param result The result of the iteration.\n   */\n  public replace(replaceWith: T): this\n  {\n    this.replaceWith = replaceWith;\n    this.action = IteratorAction.Replace;\n\n    return this;\n  }\n\n  /**\n   * Signals to the iterator source that the current item wants to be removed.\n   */\n  public remove(): this\n  {\n    this.action = IteratorAction.Remove;\n\n    return this;\n  }\n\n  /**\n   * Determines with this iterator is empty. A filter function can be specified\n   * to only check for items which match certain criteria.\n   *\n   * @param filter A function to the checks items for certain criteria.\n   * @returns `true` if no valid items exist in the source.\n   */\n  public isEmpty(filter: IteratorFilter<T> = null): boolean\n  {\n    let empty: boolean = true;\n\n    this.iterate((item, iterator) =>\n    {\n      if (filter && !filter( item ))\n      {\n        return;\n      }\n\n      empty = false;\n      iterator.stop();\n    });\n\n    return empty;\n  }\n\n  /**\n   * Counts the number of items in the iterator. A filter function can be\n   * specified to only count items which match certain criteria.\n   *\n   * @param filter A function to count items for certain criteria.\n   * @returns The number of items in the source that optionally match the given\n   *    criteria.\n   */\n  public count(filter: IteratorFilter<T> = null): number\n  {\n    let total: number = 0;\n\n    this.iterate((item, iterator) =>\n    {\n      if (filter && !filter( item ))\n      {\n        return;\n      }\n\n      total++;\n    });\n\n    return total;\n  }\n\n  /**\n   * Returns the first item in the iterator. A filter function can be specified\n   * to only return the first item which matches certain criteria.\n   *\n   * @param filter A function to compare items to to match certain criteria.\n   * @returns The first item found that optonally matches the given criteria.\n   */\n  public first(filter: IteratorFilter<T> = null): T\n  {\n    let first: T = null;\n\n    this.iterate((item, iterator) =>\n    {\n      if (filter && !filter( item ))\n      {\n        return;\n      }\n\n      first = item;\n      iterator.stop();\n    });\n\n    return first;\n  }\n\n  /**\n   * Builds a list of items from the source. A filter function can be specified\n   * so the resulting list only contain items that match certain criteria.\n   *\n   * @param out The array to place the items in.\n   * @param filter The function which determines which items are added to the list.\n   * @returns The reference to `out` which has had items added to it which\n   *    optionally match the given criteria.\n   */\n  public list(out: T[] = [], filter: IteratorFilter<T> = null): T[]\n  {\n    this.iterate((item, iterator) =>\n    {\n      if (filter && !filter( item ))\n      {\n        return;\n      }\n\n      out.push( item );\n    });\n\n    return out;\n  }\n\n  /**\n   * Builds an object of items from the source keyed by a result returned by\n   * a `getKey` function.\n   *\n   * @param getKey The function which returns the key of the object.\n   * @param out The object to place the items in.\n   * @param filter The function which determines which items are set on the object.\n   * @returns The reference to `out` which has had items set to it which\n   *    optionally match the given criteria.\n   */\n  public object(getKey: (item: T) => any, out: any = {}, filter: IteratorFilter<T> = null): any\n  {\n    this.iterate((item, iterator) =>\n    {\n      if (filter && !filter( item ))\n      {\n        return;\n      }\n\n      let key = getKey( item );\n\n      out[ key ] = item;\n    });\n\n    return out;\n  }\n\n  /**\n   * Returns a new iterator that only returns a maximum number of items.\n   *\n   * @param amount The maximum number of items to return.\n   * @returns A new iterator which returns a maximum number of items.\n   */\n  public take(amount: number): Iterator<T>\n  {\n    return new Iterator<T>(next =>\n    {\n      this.iterate((item, prev) =>\n      {\n        switch (next.act( item ))\n        {\n          case IteratorAction.Stop:\n            prev.stop();\n            break;\n          case IteratorAction.Remove:\n            prev.remove();\n            break;\n          case IteratorAction.Replace:\n            prev.replace( next.replaceWith );\n            break;\n        }\n\n        if (--amount <= 0)\n        {\n          prev.stop();\n        }\n      });\n    });\n  }\n\n  /**\n   * Returns a new iterator that skips the given number of items from the items\n   * in this iterator.\n   *\n   * @param amount The number of items to skip.\n   * @returns A new iterator which skipped the given number of items.\n   */\n  public skip(amount: number): Iterator<T>\n  {\n    return new Iterator<T>(next =>\n    {\n      let skipped: number = 0;\n\n      this.iterate((item, prev) =>\n      {\n        if (skipped >= amount)\n        {\n          switch (next.act( item ))\n          {\n            case IteratorAction.Stop:\n              prev.stop();\n              break;\n            case IteratorAction.Remove:\n              prev.remove();\n              break;\n            case IteratorAction.Replace:\n              prev.replace( next.replaceWith );\n              break;\n          }\n        }\n\n        skipped++;\n      });\n    });\n  }\n\n  /**\n   * Returns a new iterator thats items are the items in this iterator followed\n   * by the items in the given iterators.\n   *\n   * @param iterators The iterators to append after this one.\n   * @returns A new iterator based on this iterator followed by the given.\n   */\n  public append(...iterators: Iterator<T>[]): Iterator<T>\n  {\n    return Iterator.join<T>( this, ...iterators );\n  }\n\n  /**\n   * Returns a new iterator thats items are the items in the given iterators\n   * followed by the items in this iterator.\n   *\n   * @param iterators The iterators to prepend before this one.\n   * @returns A new iterator based on the given iterators followed by this.\n   */\n  public prepend(...iterators: Iterator<T>[]): Iterator<T>\n  {\n    return Iterator.join<T>( ...iterators, this );\n  }\n\n  /**\n   * Removes items from the source that match certain criteria.\n   *\n   * @param filter The function which determines which items to remove.\n   */\n  public purge(filter: IteratorFilter<T>): this\n  {\n    this.iterate((item, iterator) =>\n    {\n      if (filter(item))\n      {\n        iterator.remove();\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Returns an iterator which takes items from this iterator and presents them\n   * in reverse.\n   *\n   * @returns A new iterator with the items in this iterator in reverse.\n   */\n  public reverse(): Iterator<T>\n  {\n    return new Iterator<T>(iterator =>\n    {\n      let items: T[] = this.list();\n      let modifies: boolean = false;\n      let actions: IteratorAction[] = [];\n      let replaces: T[] = [];\n\n      for (let i = items.length - 1; i >= 0; i--)\n      {\n        let item: T = items[ i ];\n        let action: IteratorAction = iterator.act( item );\n\n        if (action === IteratorAction.Stop)\n        {\n          break;\n        }\n\n        if (action !== IteratorAction.Continue)\n        {\n          modifies = true;\n\n          actions[ i ] = action;\n          replaces[ i ] = iterator.replaceWith;\n        }\n      }\n\n      if (modifies)\n      {\n        let index: number = 0;\n\n        this.iterate((item, iterator) =>\n        {\n          switch (actions[ index ])\n          {\n            case IteratorAction.Remove:\n              iterator.remove();\n              break;\n            case IteratorAction.Replace:\n              iterator.replace( replaces[ index ] );\n              break;\n          }\n\n          index++;\n        });\n      }\n    });\n  }\n\n  /**\n   * Reduces all the items in the source to a single value given the initial\n   * value and a function to convert an item and the current reduced value\n   */\n  public reduce<R>(initial: R, reducer: (item: T, reduced: R) => R, filter: IteratorFilter<T> = null): R\n  {\n    let reduced: R = initial;\n\n    this.iterate((item, iterator) =>\n    {\n      if (filter && !filter( item ))\n      {\n        return;\n      }\n\n      reduced = reducer( item, reduced );\n    });\n\n    return reduced;\n  }\n\n  /**\n   * Returns an iterator where this iterator is the source and the returned\n   * iterator is built on a subset of items which pass a `filter` function.\n   *\n   * @param filter The function which determines if an item should be iterated.\n   * @returns A new iterator for the filtered items from this iterator.\n   */\n  public filter(filter: IteratorFilter<T>): Iterator<T>\n  {\n    return new Iterator<T>(next =>\n    {\n      this.iterate((prevItem, prev) =>\n      {\n        if (filter(prevItem))\n        {\n          switch (next.act( prevItem ))\n          {\n            case IteratorAction.Stop:\n              prev.stop();\n              break;\n            case IteratorAction.Remove:\n              prev.remove();\n              break;\n            case IteratorAction.Replace:\n              prev.replace( next.replaceWith );\n              break;\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Returns an iterator where this iterator is the source and the returned\n   * iterator is built from mapped items pulled from items in the source\n   * of this iterator. If the given callback `outerCallback` does not return\n   * a mapped value then the returned iterator will not see the item. A filter\n   * function can be specified to only look at mapping items which match\n   * certain criteria.\n   *\n   * @param mapper The function which maps an item to another.\n   * @param filter The function which determines if an item should be mapped.\n   * @param unmapper The function which unmaps a value when replace is called.\n   * @returns A new iterator for the mapped items from this iterator.\n   */\n  public map<W>(mapper: IteratorCallback<T, W>,\n    filter: IteratorFilter<T> = null,\n    unmapper: (replaceWith: W, current: W, item: T) => T = null): Iterator<W>\n  {\n    return new Iterator<W>(next =>\n    {\n      this.iterate((prevItem, prev) =>\n      {\n        if (filter && !filter( prevItem ))\n        {\n          return;\n        }\n\n        let nextItem: W = mapper( prevItem, prev );\n\n        if (fn.isDefined( nextItem ))\n        {\n          switch (next.act( nextItem ))\n          {\n            case IteratorAction.Stop:\n              prev.stop();\n              break;\n            case IteratorAction.Remove:\n              prev.remove();\n              break;\n            case IteratorAction.Replace:\n              if (unmapper) {\n                prev.replace( unmapper( next.replaceWith, nextItem, prevItem ) );\n              }\n              break;\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Invokes the callback for each item in the source of this iterator. The\n   * second argument in the callback is the reference to this iterator and\n   * [[Iterator.stop]] can be called at anytime to cease iteration.\n   *\n   * @param callback The function to invoke for each item in this iterator.\n   */\n  public iterate(callback: IteratorCallback<T, any>): this\n  {\n    this.result = undefined;\n    this.callback = callback;\n    this.action = IteratorAction.Continue;\n    this.source( this );\n    this.callback = null;\n\n    return this;\n  }\n\n  /**\n   * Passes the result of the iteration to the given function if a truthy\n   * result was passed to [[Iterator.stop]].\n   *\n   * @param getResult The function to pass the result to if it exists.\n   */\n  public withResult(getResult: (result: any) => any): this\n  {\n    if (this.result)\n    {\n      getResult( this.result );\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns an iterator for the given array optionally iterating it in reverse.\n   *\n   * @param items The array of items to iterate.\n   * @param reverse If the array should be iterated in reverse.\n   * @returns A new iterator for the given array.\n   */\n  public static forArray<T>(items: T[], reverse: boolean = false): Iterator<T>\n  {\n    return new Iterator<T>(iterator =>\n    {\n      if (reverse)\n      {\n        for (let i = items.length - 1; i >= 0; i--)\n        {\n          switch (iterator.act(items[ i ]))\n          {\n            case IteratorAction.Stop:\n              return;\n            case IteratorAction.Remove:\n              items.splice(i, 1);\n              break;\n            case IteratorAction.Replace:\n              items.splice(i, 1, iterator.replaceWith);\n              break;\n          }\n        }\n      }\n      else\n      {\n        for (let i = 0; i < items.length; i++)\n        {\n          switch (iterator.act(items[ i ]))\n          {\n            case IteratorAction.Stop:\n              return;\n            case IteratorAction.Remove:\n              items.splice(i, 1);\n              i--;\n              break;\n            case IteratorAction.Replace:\n              items.splice(i, 1, iterator.replaceWith);\n              break;\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Returns an iterator for the given object optionally checking the\n   * `hasOwnProperty` function on the given object.\n   *\n   * @param items The object to iterate.\n   * @param hasOwnProperty If `hasOwnProperty` should be checked.\n   * @returns A new iterator for the given object.\n   */\n  public static forObject<T>(items: { [key: string]: T }, hasOwnProperty: boolean = true): Iterator<T>\n  {\n    return new Iterator<T>(iterator =>\n    {\n      for (let key in items)\n      {\n        if (hasOwnProperty && !items.hasOwnProperty( key ))\n        {\n          continue;\n        }\n\n        switch (iterator.act(items[ key ]))\n        {\n          case IteratorAction.Stop:\n            return;\n          case IteratorAction.Remove:\n            delete items[ key ];\n            break;\n          case IteratorAction.Replace:\n            items[ key ] = iterator.replaceWith;\n            break;\n        }\n      }\n    });\n  }\n\n  /**\n   * Joins all the given iterators into a single iterator where the items\n   * returned are in the same order as passed to this function. If any items\n   * are removed from the returned iterator they will be removed from the given\n   * iterator if it supports removal.\n   *\n   * @param iterators The array of iterators to join as one.\n   * @returns A new iterator for the given iterators.\n   */\n  public static join<T>(...iterators: Iterator<T>[]): Iterator<T>\n  {\n    return new Iterator<T>(parent =>\n    {\n      for (let child of iterators)\n      {\n        child.iterate((item, childIterator) =>\n        {\n          switch (parent.act( item ))\n          {\n            case IteratorAction.Remove:\n              childIterator.remove();\n              break;\n            case IteratorAction.Stop:\n              childIterator.stop();\n              break;\n            case IteratorAction.Replace:\n              childIterator.replace( parent.replaceWith );\n              break;\n          }\n        });\n\n        if (child.action === IteratorAction.Stop)\n        {\n          return;\n        }\n      }\n    });\n  }\n\n  /**\n   * Returns a new iterator with no items.\n   *\n   * @returns A new iterator with no items.\n   */\n  public static empty<T>(): Iterator<T>\n  {\n    return new Iterator<T>(parent => {});\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Iterator.ts","\nimport { Functions as fn } from './Functions';\nimport { Identifier, IdentifierInput } from './Identifier';\nimport { Day } from './Day';\nimport { Time } from './Time';\nimport { DaySpan } from './DaySpan';\nimport { Iterator, IteratorAction } from './Iterator';\n\n\n/**\n * A map of values in the [[ScheduleModifier]] keyed by the descriptions of the\n * identifiers.\n */\nexport interface ScheduleModifierDescription<T>\n{\n  [description: string]: T\n}\n\n/**\n * An object which carries the span taken from an identifier and the value\n * mapped to it in a [[ScheduleModifier]].\n */\nexport interface ScheduleModifierSpan<T>\n{\n  span: DaySpan,\n  value: T\n}\n\n/**\n * A class that can modify the events of a schedule by storing [[Identifier]]s\n * and an associated value.\n *\n * @typeparam T The type of data that modifies the schedule.\n */\nexport class ScheduleModifier<T>\n{\n\n  /**\n   * The map of values mapped by their [[Identifier]]s.\n   */\n  public map: { [id: string]: T };\n\n\n  /**\n   * Creates a new schedule modifier.\n   */\n  public constructor()\n  {\n    this.map = {};\n  }\n\n  /**\n   * Clears the modifier of all modifications.\n   */\n  public clear(): this\n  {\n    this.map = {};\n\n    return this;\n  }\n\n  /**\n   * Returns `true` if this modifier lacks any modifications, otherwise `false`.\n   */\n  public isEmpty(): boolean\n  {\n    // @ts-ignore\n    for (let id in this.map)\n    {\n      return !id;\n    }\n\n    return true;\n  }\n\n  /**\n   * Gets the most specific value in this modifier for the given day, if none\n   * exists `otherwise` is returned. A modifier can have multiple values for a\n   * given day because [[Identifier]]s represent a span of time.\n   *\n   * @param day The day to get a value for.\n   * @param otherwise What to return if no value exists for the given day.\n   * @param lookAtTime If the specific time of the given day should be looked at.\n   * @returns The most specific value for the given day, or `otherwise`.\n   */\n  public get(day: Day, otherwise: T, lookAtTime: boolean = true): T\n  {\n    let map = this.map;\n\n    return (lookAtTime && map[ day.timeIdentifier ]) ||\n      map[ day.dayIdentifier ] ||\n      map[ day.monthIdentifier ] ||\n      map[ day.weekIdentifier ] ||\n      map[ day.quarterIdentifier ] ||\n      otherwise;\n  }\n\n  /**\n   * Gets the most specific identifier type for the span over the given day.\n   * If the day does not have a modification, `null` is returned.\n   *\n   * @param day The day to get the type for.\n   * @param lookAtTime If the specific time of the given day should be looked at.\n   * @returns The most specific identifier for the given day, otherwise `null`.\n   */\n  public getIdentifier(day: Day, lookAtTime: boolean = true): Identifier\n  {\n    let map = this.map;\n\n    if (lookAtTime && fn.isDefined( map[ day.timeIdentifier ] )) return Identifier.Time;\n    if (fn.isDefined( map[ day.dayIdentifier ] )) return Identifier.Day;\n    if (fn.isDefined( map[ day.monthIdentifier ] )) return Identifier.Month;\n    if (fn.isDefined( map[ day.weekIdentifier ] )) return Identifier.Week;\n    if (fn.isDefined( map[ day.quarterIdentifier ] )) return Identifier.Quarter;\n    if (fn.isDefined( map[ day.year ] )) return Identifier.Year;\n\n    return null;\n  }\n\n  /**\n   * Gets all values in this modifier for the given day. If none exist, an empty\n   * array is returned. The values returned in the array are returned in most\n   * specific to least specific.\n   *\n   * @param day The day to get the values for.\n   * @returns An array of values (modifications) for the given day.\n   */\n  public getAll(day: Day): T[]\n  {\n    let map = this.map;\n    let all: T[] = [];\n\n    if (map[ day.timeIdentifier ]) all.push( map[ day.timeIdentifier ] );\n    if (map[ day.dayIdentifier ]) all.push( map[ day.dayIdentifier ] );\n    if (map[ day.monthIdentifier ]) all.push( map[ day.monthIdentifier ] );\n    if (map[ day.weekIdentifier ]) all.push( map[ day.weekIdentifier ] );\n    if (map[ day.quarterIdentifier ]) all.push( map[ day.quarterIdentifier ] );\n\n    return all;\n  }\n\n  /**\n   * Moves the value/modification from one identifier to another.\n   *\n   * @param from The day to take the identifier from.\n   * @param fromType The identifier type.\n   * @param to The day to move the value to.\n   * @param toType The identifier type to move the value to.\n   */\n  public move(from: Day, fromType: Identifier, to: Day, toType: Identifier): this\n  {\n    let fromIdentifier = fromType.get( from );\n    let toIdentifier = toType.get( to );\n\n    this.map[ toIdentifier ] = this.map[ fromIdentifier ];\n\n    delete this.map[ fromIdentifier ];\n\n    return this;\n  }\n\n  /**\n   * Moves any identifiers with the matching time `fromTime` to `toTime` and\n   * returns the number of moves.\n   *\n   * @param fromTime The time to move from.\n   * @param toTime The time to move to.\n   * @returns The number of modifiers moved.\n   */\n  public moveTime(fromTime: Time, toTime: Time): number\n  {\n    let type: Identifier = Identifier.Time;\n    let moveIds: IdentifierInput[] = [];\n\n    this.iterate().iterate(([id, value]) =>\n    {\n      if (type.is( id ))\n      {\n        let start: Day = type.start( id );\n\n        if (start.sameTime( fromTime ))\n        {\n          moveIds.push( id );\n        }\n      }\n    });\n\n    let moved: number = 0;\n\n    for (let id of moveIds)\n    {\n      let value: T = this.map[ id ];\n      let start: Day = type.start( id );\n      let newStart: Day = start.withTime( toTime );\n      let newId: IdentifierInput = type.get( newStart );\n\n      if (!this.map[ newId ])\n      {\n        this.map[ newId ] = value;\n        delete this.map[ id ];\n        moved++;\n      }\n    }\n\n    return moved;\n  }\n\n  /**\n   * Removes any identifiers and modifications that are at the given time.\n   *\n   * @param time The time to remove.\n   * @returns The number of modifiers removed.\n   */\n  public removeTime(time: Time): number\n  {\n    let type: Identifier = Identifier.Time;\n    let removed: number = 0;\n\n    this.iterate().iterate(([id,], iterator) =>\n    {\n      if (type.is( id ))\n      {\n        let start: Day = type.start( id );\n\n        if (start.sameTime( time ))\n        {\n          iterator.remove();\n          removed++;\n        }\n      }\n    });\n\n    return removed;\n  }\n\n  /**\n   * Sets the value/modification in this map given a day, the value, and the\n   * identifier type.\n   *\n   * @param day The day to take an identifier from.\n   * @param value The value/modification to set.\n   * @param type The identifier type.\n   */\n  public set(day: Day, value: T, type: Identifier): this\n  {\n    this.map[ type.get( day ) ] = value;\n\n    return this;\n  }\n\n  /**\n   * Removes the value/modification from this modifier based on the identifier\n   * pulled from the day.\n   *\n   * @param day The day to take an identifier from.\n   * @param type The identifier type.\n   */\n  public unset(day: Day, type: Identifier): this\n  {\n    delete this.map[ type.get( day ) ];\n\n    return this;\n  }\n\n  /**\n   * Iterates through the modifiers passing the identifier and the related value.\n   *\n   * @returns A new instance of an [[Iterator]].\n   */\n  public iterate(): Iterator<[IdentifierInput, T]>\n  {\n    return new Iterator<[IdentifierInput, T]>(iterator =>\n    {\n      let map = this.map;\n\n      for (let rawId in map)\n      {\n        let asNumber: number = parseInt( rawId );\n        let validAsNumber: boolean = asNumber + '' === rawId;\n        let id: IdentifierInput = validAsNumber ? asNumber : rawId;\n\n        switch (iterator.act([id, map[ rawId ]]))\n        {\n          case IteratorAction.Stop:\n            return;\n          case IteratorAction.Remove:\n            delete map[ rawId ];\n            break;\n        }\n      }\n    });\n  }\n\n  /**\n   * Queries the modifier for all values/modifications which fall in the time\n   * span that the given identifier represents. All identifiers and their value\n   * are passed to the given callback.\n   *\n   * @param prefix The identifier\n   * @returns A new instance of an [[Iterator]].\n   */\n  public query(query: IdentifierInput): Iterator<[IdentifierInput, T]>\n  {\n    return this.iterate()\n      .filter(([id, value]) => Identifier.contains( query, id ));\n    ;\n  }\n\n  /**\n   * Returns all identifiers stored in this modifier.\n   */\n  public identifiers(filter?: (value: T, id: IdentifierInput) => boolean): Iterator<IdentifierInput>\n  {\n    return this.iterate()\n      .filter(([id, value]) => !filter || filter( value, id ))\n      .map<IdentifierInput>(([id, ]) => id)\n    ;\n  }\n\n  /**\n   * Builds a list of spans and the associated values. The spans are calculated\n   * from the identiier key via [[Identifier.span]].\n   *\n   * @param endInclusive If the end date in the spans should be the last\n   *    millisecond of the timespan or the first millisecond of the next.\n   * @returns An array of spans calculated from the identifiers with the\n   *    associated values/modifications.\n   */\n  public spans(endInclusive: boolean = false): Iterator<ScheduleModifierSpan<T>>\n  {\n    return this.iterate()\n      .map(([id, value]) =>\n      {\n        let type: Identifier = Identifier.find(id);\n\n        if (type)\n        {\n          let span = type.span( id, endInclusive );\n\n          return { span, value };\n        }\n      })\n    ;\n  }\n\n  /**\n   * Builds a list of the descriptions of the identifiers in this modifier.\n   *\n   * @param short If the description should use shorter language or longer.\n   * @returns The built list of descriptions.\n   */\n  public describe(short: boolean = false): Iterator<string>\n  {\n    return this.iterate()\n      .map<string>( ([id, ]) =>\n      {\n        let type: Identifier = Identifier.find( id );\n\n        if (type)\n        {\n          return type.describe( id, short );\n        }\n      })\n    ;\n  }\n\n  /**\n   * Builds a map of the values/modifications keyed by the descripton of the\n   * identifier computed via [[Identifier.describe]].\n   *\n   * @param short If the description should use shorter language or longer.\n   * @returns The built map of description to values/modifications.\n   */\n  public describeMap(short: boolean = false): ScheduleModifierDescription<T>\n  {\n    let map = this.map;\n    let out: ScheduleModifierDescription<T> = {};\n\n    for (let id in map)\n    {\n      let type: Identifier = Identifier.find(id);\n\n      if (type)\n      {\n        out[ type.describe( id, short ) ] = map[ id ];\n      }\n    }\n\n    return out;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/ScheduleModifier.ts","\nimport { Functions as fn } from './Functions';\nimport { FrequencyValue, FrequencyCheck, FrequencyValueEvery, FrequencyValueOneOf } from './Frequency';\nimport { Day, DayInput, DurationInput, DayProperty } from './Day';\nimport { Identifier, IdentifierInput } from './Identifier';\nimport { DaySpan } from './DaySpan';\nimport { Constants } from './Constants';\nimport { Parse } from './Parse';\nimport { Time, TimeInput } from './Time';\nimport { Suffix } from './Suffix';\nimport { ScheduleModifier, ScheduleModifierSpan } from './ScheduleModifier';\nimport { Units } from './Units';\nimport { Iterator, IteratorAction } from './Iterator';\n\n// @ts-ignore\nimport * as moment from 'moment';\n\n\n/**\n * A tuple which identifies an event on the schedule. The tuple contains the\n * total span of the event occurrence, the day of the event (could be the start\n * day, end day, or any days in between for multi-day events) as well as the\n * identifier for the event.\n */\nexport type ScheduleEventTuple = [DaySpan, Day, IdentifierInput];\n\n/**\n * Input given by a user which describes an event schedule.\n *\n * @typeparam M The type of metadata stored in the schedule.\n */\nexport interface ScheduleInput<M>\n{\n\n  /**\n   * @see [[Schedule.start]]\n   */\n  start?: DayInput;\n\n  /**\n   * @see [[Schedule.end]]\n   */\n  end?: DayInput;\n\n  /**\n   * A shortcut to setting the [[Schedule.start]], [[Schedule.end]],\n   * [[Schedule.year]], [[Schedule.month]], and [[Schedule.dayOfMonth]].\n   */\n  on?: DayInput;\n\n  /**\n   * @see [[Schedule.times]]\n   */\n  times?: TimeInput[];\n\n  /**\n   * @see [[Schedule.duration]]\n   */\n  duration?: number;\n\n  /**\n   * @see [[Schedule.durationUnit]]\n   */\n  durationUnit?: DurationInput;\n\n  /**\n   * An array of days or identifiers which should be excluded from the schedule.\n   *\n   * @see [[Schedule.exclude]]\n   */\n  exclude?: (Day | IdentifierInput)[];\n\n  /**\n   * An array of days or identifiers which should be included in the schedule.\n   *\n   * @see [[Schedule.include]]\n   */\n  include?: (Day | IdentifierInput)[];\n\n  /**\n   * An array of days or identifiers which should be canceled in the schedule.\n   *\n   * @see [[Schedule.cancel]]\n   */\n  cancel?: (Day | IdentifierInput)[];\n\n  /**\n   * @see [[Schedule.meta]]\n   */\n  meta?: { [identifier: string]: M };\n\n  /**\n   * @see [[Schedule.month]]\n   */\n  month?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.year]]\n   */\n  year?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.week]]\n   */\n  week?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.dayOfWeek]]\n   */\n  dayOfWeek?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.dayOfMonth]]\n   */\n  dayOfMonth?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.lastDayOfMonth]]\n   */\n  lastDayOfMonth?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.dayOfYear]]\n   */\n  dayOfYear?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.weekOfYear]]\n   */\n  weekOfYear?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.weekspanOfYear]]\n   */\n  weekspanOfYear?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.fullWeekOfYear]]\n   */\n  fullWeekOfYear?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.lastWeekspanOfYear]]\n   */\n  lastWeekspanOfYear?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.lastFullWeekOfYear]]\n   */\n  lastFullWeekOfYear?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.weekOfMonth]]\n   */\n  weekOfMonth?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.weekspanOfMonth]]\n   */\n  weekspanOfMonth?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.fullWeekOfMonth]]\n   */\n  fullWeekOfMonth?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.lastWeekspanOfMonth]]\n   */\n  lastWeekspanOfMonth?: FrequencyValue;\n\n  /**\n   * @see [[Schedule.lastFullWeekOfMonth]]\n   */\n  lastFullWeekOfMonth?: FrequencyValue;\n\n  /**\n   * The function to parse metadata with.\n   */\n  parseMeta?: (input: any) => M;\n}\n\n\n/**\n * A class which describes when an event occurs over what time and if it repeats.\n *\n * @typeparam M The type of metadata stored in the schedule.\n */\nexport class Schedule<M>\n{\n\n  /**\n   * The earliest an event can occur in the schedule, or `null` if there are no\n   * restrictions when the earliest event can occur. This day is inclusive.\n   */\n  public start: Day;\n\n  /**\n   * The latest an event can occur in the schedule, or `null` if there are no\n   * restrictions when the latest event can occur. This day is inclusive.\n   */\n  public end: Day;\n\n  /**\n   * The length of events in this schedule.\n   */\n  public duration: number;\n\n  /**\n   * The unit which describes the duration of the event.\n   */\n  public durationUnit: DurationInput;\n\n  /**\n   * The times at which the events occur on the days they should. If there are\n   * no times specified its assumed to be an all day event - potentially over\n   * multiple days or weeks based on [[Schedule.duration]] and\n   * [[Schedule.durationUnit]].\n   */\n  public times: Time[];\n\n  /**\n   * The number of days an event in this schedule lasts PAST the starting day.\n   * If this is a full day event with a duration greater than zero this value\n   * will be greater than one. If this event occurs at a specific time with a\n   * given duration that is taken into account and if it passes over into the\n   * next day this value will be greater than one. This value is used to look\n   * back in time when trying to figure out what events start or overlap on a\n   * given day.\n   */\n  public durationInDays: number;\n\n  /**\n   * A set of identifiers which mark what days or times are excluded on the\n   * schedule. This typically represents the set of event occurrences removed.\n   */\n  public exclude: ScheduleModifier<boolean>;\n\n  /**\n   * A set of identifiers which mark what days or times are included outside\n   * the normal series of days on the schedule. This typically represents\n   * an event occurrence which is moved so its added to the exclude and include\n   * sets.\n   */\n  public include: ScheduleModifier<boolean>;\n\n  /**\n   * A set of identifiers which mark what days, times, weeks, months, etc that\n   * should have all event occurrences cancelled.\n   */\n  public cancel: ScheduleModifier<boolean>;\n\n  /**\n   * A map of metadata keyed by an identifier. The metadata is placed in\n   * [[CalendarEvent]].\n   */\n  public meta: ScheduleModifier<M>;\n\n  /**\n   * How frequent the event occurs based on [[Day.dayOfWeek]].\n   */\n  public dayOfWeek: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.dayOfMonth]].\n   */\n  public dayOfMonth: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.lastDayOfMonth]].\n   */\n  public lastDayOfMonth: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.dayOfYear]].\n   */\n  public dayOfYear: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.month]].\n   */\n  public month: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.week]].\n   */\n  public week: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.weekOfYear]].\n   */\n  public weekOfYear: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.weekspanOfYear]].\n   */\n  public weekspanOfYear: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.fullWeekOfYear]].\n   */\n  public fullWeekOfYear: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.lastWeekspanOfYear]].\n   */\n  public lastWeekspanOfYear: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.lastFullWeekOfYear]].\n   */\n  public lastFullWeekOfYear: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.weekOfMonth]].\n   */\n  public weekOfMonth: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.weekspanOfMonth]].\n   */\n  public weekspanOfMonth: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.fullWeekOfMonth]].\n   */\n  public fullWeekOfMonth: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.lastWeekspanOfMonth]].\n   */\n  public lastWeekspanOfMonth: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.lastFullWeekOfMonth]].\n   */\n  public lastFullWeekOfMonth: FrequencyCheck;\n\n  /**\n   * How frequent the event occurs based on [[Day.year]].\n   */\n  public year: FrequencyCheck;\n\n  /**\n   * The array of frequency functions which had valid frequencies.\n   *\n   * @see [[FrequencyCheck.given]]\n   */\n  public checks: FrequencyCheck[];\n\n\n  /**\n   * Creates a schedule based on the given input.\n   *\n   * @param input The input which describes the schedule of events.\n   */\n  public constructor(input?: ScheduleInput<M>)\n  {\n    this.exclude = new ScheduleModifier<boolean>();\n    this.include = new ScheduleModifier<boolean>();\n    this.cancel = new ScheduleModifier<boolean>();\n    this.meta = new ScheduleModifier<M>();\n\n    if (fn.isDefined(input))\n    {\n      this.set(input);\n    }\n  }\n\n  /**\n   * Sets the schedule with the given input.\n   *\n   * @param input The input or schedule which describes the schedule of events.\n   * @param parseMeta A function to use when parsing meta input into the desired type.\n   * @see [[Parse.schedule]]\n   */\n  public set(input: ScheduleInput<M> | Schedule<M>,\n    parseMeta: (input: any) => M = (x => <M>x)): this\n  {\n    if (input instanceof Schedule)\n    {\n      Parse.schedule<M>( input.toInput(), undefined, this);\n    }\n    else\n    {\n      Parse.schedule<M>(input, fn.coalesce( input.parseMeta, parseMeta ), this);\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns the last event time specified or `undefined` if this schedule is\n   * for an all day event.\n   */\n  public get lastTime(): Time\n  {\n    return this.times[ this.times.length - 1 ];\n  }\n\n  /**\n   * The [[Identifier]] for this schedule. Either [[Identifier.Day]] or\n   * [[Identifier.Time]].\n   */\n  public get identifierType(): Identifier\n  {\n    return this.isFullDay() ? Identifier.Day : Identifier.Time;\n  }\n\n  /**\n   * Updates the [[Schedule.durationInDays]] variable based on the\n   * [[Schedule.lastTime]] (if any), the [[Schedule.duration]] and it's\n   * [[Schedule.durationUnit]].\n   */\n  public updateDurationInDays(): this\n  {\n    let start: number = this.lastTime ? this.lastTime.toMilliseconds() : 0;\n    let duration: number = this.duration * (Constants.DURATION_TO_MILLIS[ this.durationUnit ] || 0);\n    let exclude: number = Constants.MILLIS_IN_DAY;\n    let day: number = Constants.MILLIS_IN_DAY;\n\n    this.durationInDays = Math.max(0, Math.ceil((start + duration - exclude) / day));\n\n    return this;\n  }\n\n  /**\n   * Updates [[Schedule.checks]] based on the frequencies that were specified\n   * in the schedule input.\n   */\n  public updateChecks(): this\n  {\n    this.checks = Parse.givenFrequency([\n      this.year,\n      this.month,\n      this.week,\n      this.weekOfYear,\n      this.fullWeekOfYear,\n      this.weekspanOfYear,\n      this.lastFullWeekOfYear,\n      this.lastWeekspanOfYear,\n      this.weekOfMonth,\n      this.weekspanOfMonth,\n      this.fullWeekOfMonth,\n      this.lastWeekspanOfMonth,\n      this.lastFullWeekOfMonth,\n      this.dayOfWeek,\n      this.dayOfMonth,\n      this.lastDayOfMonth,\n      this.dayOfYear\n    ]);\n\n    return this;\n  }\n\n  /**\n   * Determines whether the given day lies between the earliest and latest\n   * valid day in the schedule.\n   *\n   * @param day The day to test.\n   * @returns `true` if the day lies in the schedule, otherwise `false`.\n   * @see [[Schedule.start]]\n   * @see [[Schedule.end]]\n   */\n  public matchesSpan(day: Day): boolean\n  {\n    return (this.start === null || day.isSameOrAfter(this.start)) &&\n      (this.end === null || day.isBefore(this.end));\n  }\n\n  /**\n   * Determines whether the given range overlaps with the earliest and latest\n   * valid days in this schedule (if any).\n   *\n   * @param start The first day in the range.\n   * @param end The last day in the range.\n   * @returns `true` if the range intersects with the schedule, otherwise `false`.\n   * @see [[Schedule.start]]\n   * @see [[Schedule.end]]\n   */\n  public matchesRange(start: Day, end: Day): boolean\n  {\n    if (this.start && end.isBefore(this.start))\n    {\n      return false;\n    }\n\n    if (this.end && start.isAfter(this.end))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Determines whether the given day is explicitly excluded in the schedule.\n   *\n   * @param day The day to test.\n   * @param lookAtTime lookAtTime If the specific time of the given day should\n   *    be looked at.\n   * @returns `true` if the day was excluded, otherwise `false`.\n   */\n  public isExcluded(day: Day, lookAtTime: boolean = true): boolean\n  {\n    return this.exclude.get( day, false, lookAtTime );\n  }\n\n  /**\n   * Determines whether the given day is explicitly included in the schedule.\n   *\n   * @param day The day to test.\n   * @param lookAtTime lookAtTime If the specific time of the given day should\n   *    be looked at.\n   * @returns `true` if the day is NOT explicitly included, otherwise `false`.\n   */\n  public isIncluded(day: Day, lookAtTime: boolean = true): boolean\n  {\n    return this.include.get( day, false, lookAtTime );\n  }\n\n  /**\n   * Determines whether the given day is cancelled in the schedule.\n   *\n   * @param day The day to test.\n   * @param lookAtTime lookAtTime If the specific time of the given day should\n   *    be looked at.\n   * @returns `true` if the day was cancelled, otherwise `false`.\n   */\n  public isCancelled(day: Day, lookAtTime: boolean = true): boolean\n  {\n    return this.cancel.get( day, false, lookAtTime );\n  }\n\n  /**\n   * Returns the metadata for the given day or `null` if there is none.\n   *\n   * @param day The day to return the metadata for.\n   * @param otherwise The data to return if none exists for the given day.\n   * @param lookAtTime lookAtTime If the specific time of the given day should\n   *    be looked at.\n   * @returns The metadata or `null`.\n   */\n  public getMeta(day: Day, otherwise: M = null, lookAtTime: boolean = true): M\n  {\n    return this.meta.get( day, otherwise, lookAtTime );\n  }\n\n  /**\n   * Returns all metadata for the given day or an empty array if there is none.\n   *\n   * @param day The day to return the metadata for.\n   * @returns The array of metadata ordered by priority or an empty array.\n   */\n  public getMetas(day: Day): M[]\n  {\n    return this.meta.getAll( day );\n  }\n\n  /**\n   * Returns whether the events in the schedule are all day long or start at\n   * specific times. Full day events start at the start of the day and end at\n   * the start of the next day (if the duration = `1` and durationUnit = 'days').\n   * Full day events have no times specified and should have a durationUnit of\n   * either `days` or `weeks`.\n   */\n  public isFullDay(): boolean\n  {\n    return this.times.length === 0;\n  }\n\n  /**\n   * Sets whether this schedule is a full day event if it is not already. If\n   * this schedule is a full day event and `false` is passed to this function\n   * a single timed event will be added based on `defaultTime`. If this schedule\n   * has timed events and `true` is passed to make the schedule full day, the\n   * timed events are removed from this schedule. If the durationUnit is not the\n   * expected unit based on the new full day flag - the duration is reset to 1\n   * and the duration unit is set to the expected unit.\n   *\n   * @param fullDay Whether this schedule should represent a full day event or\n   *    timed events.\n   * @param defaultTime If `fullDay` is `false` and this schedule is currently\n   *    a full day event - this time will be used as the time of the first event.\n   */\n  public setFullDay(fullDay: boolean = true, defaultTime: TimeInput = '08:00'): this\n  {\n    if (fullDay !== this.isFullDay())\n    {\n      if (fullDay)\n      {\n        this.times = [];\n\n        if (this.durationUnit !== 'days' && this.durationUnit !== 'day')\n        {\n          this.duration = 1;\n          this.durationUnit = 'days';\n        }\n      }\n      else\n      {\n        this.times = [Parse.time( defaultTime )];\n\n        if (this.durationUnit !== 'hours' && this.durationUnit !== 'hour')\n        {\n          this.duration = 1;\n          this.durationUnit = 'hours';\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Adjusts the [[Schedule.start]] and [[Schedule.end]] dates specified on this\n   * schedule if this schedule represents a single event and the `start` and\n   * `end` are already set or `addSpan` is `true`.\n   *\n   * @param addSpan If `true`, the `start` and `end` dates will always be\n   *    adjusted if this schedule is a single event.\n   */\n  public adjustDefinedSpan(addSpan: boolean = false): this\n  {\n    let single: DaySpan = this.getSingleEventSpan();\n\n    if (single && (addSpan || (this.start && this.end)))\n    {\n      this.start = single.start.start();\n      this.end = single.end.end();\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns a span of time for a schedule with full day events starting on the\n   * start of the given day with the desired duration in days or weeks.\n   *\n   * @param day The day the span starts on.\n   * @returns The span of time starting on the given day.\n   */\n  public getFullSpan(day: Day): DaySpan\n  {\n    let start: Day = day.start();\n    let end: Day = start.add( this.duration, this.durationUnit );\n\n    return new DaySpan( start, end );\n  }\n\n  /**\n   * Returns a span of time starting on the given day at the given day with the\n   * duration specified on this schedule.\n   *\n   * @param day The day the span starts on.\n   * @param time The time of day the span starts.\n   * @returns The span of time calculated.\n   */\n  public getTimeSpan(day: Day, time: Time): DaySpan\n  {\n    let start: Day = day.withTime( time );\n    let end: Day = start.add( this.duration, this.durationUnit );\n\n    return new DaySpan( start, end );\n  }\n\n  /**\n   * Determines whether the given day is a day on the schedule for the start\n   * of an event. If an event is more than one day and the day given is not the\n   * start this may return `false`. This does not test for event instances\n   * that exist through [[Schedule.include]].\n   *\n   * @param day The day to test.\n   * @returns `true` if the day marks the start of an event on the schedule.\n   * @see [[Schedule.isIncluded]]\n   * @see [[Schedule.isFullyExcluded]]\n   * @see [[Schedule.matchesSpan]]\n   */\n  public matchesDay(day: Day): boolean\n  {\n    if (this.isIncluded( day, false ))\n    {\n      return true;\n    }\n\n    if (!this.matchesSpan( day ) || this.isFullyExcluded( day ))\n    {\n      return false;\n    }\n\n    for (let check of this.checks)\n    {\n      if (!check( <number>day[ check.property ] ))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Determines whether the given day has events added through\n   * [[Schedule.include]].\n   *\n   * @param day The day to look for included times on.\n   * @returns `true` if there are included event instances on the given day,\n   *    otherwise `false`.\n   */\n  public hasIncludedTime(day: Day): boolean\n  {\n    return !this.iterateIncludeTimes( day ).isEmpty();\n  }\n\n  /**\n   * Determines whether the given day is fully excluded from the schedule. A\n   * fully excluded day is one that has a day-wide exclusion, or the schedule\n   * is not an all-day event and all times in the schedule are specifically\n   * excluded.\n   *\n   * @param day The day to test.*\n   * @returns `true` if he day is fully excluded, otherwise `false`.\n   */\n  public isFullyExcluded(day: Day): boolean\n  {\n    if (this.isExcluded(day, false))\n    {\n      return true;\n    }\n\n    if (this.isFullDay())\n    {\n      return false;\n    }\n\n    for (let time of this.times)\n    {\n      if (!this.isExcluded( day.withTime( time ) ))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Finds the next day an event occurs on the schedule given a day to start,\n   * optionally including it, and a maximum number of days to look ahead.\n   *\n   * @param day The day to start to search from.\n   * @param includeDay If the given day should be included in the search.\n   * @param lookAhead The maximum number of days to look ahead from the given\n   *     day for event occurrences.\n   * @returns The next day on the schedule or `null` if none exists.\n   */\n  public nextDay(day: Day, includeDay: boolean = false, lookAhead: number = 366): Day\n  {\n    return this.iterateDaycast(day, 1, true, includeDay, lookAhead).first();\n  }\n\n  /**\n   * Finds the next specified number of days that events occur on the schedule\n   * given a day to start, optionally including it, and a maximum number of days\n   * to look ahead.\n   *\n   * @param day The day to start to search from.\n   * @param max The maximum number of days to return in the result.\n   * @param includeDay If the given day should be included in the search.\n   * @param lookAhead The maximum number of days to look ahead from the given\n   *     day for event occurrences.\n   * @returns An array containing the next days on the schedule that events\n   *    start or an empty array if there are none.\n   */\n  public nextDays(day: Day, max: number, includeDay: boolean = false, lookAhead: number = 366): Iterator<Day>\n  {\n    return this.iterateDaycast(day, max, true, includeDay, lookAhead);\n  }\n\n  /**\n   * Finds the previous day an event occurs on the schedule given a day to start,\n   * optionally including it, and a maximum number of days to look behind.\n   *\n   * @param day The day to start to search from.\n   * @param includeDay If the given day should be included in the search.\n   * @param lookBack The maximum number of days to look behind from the given\n   *     day for event occurrences.\n   * @returns The previous day on the schedule or `null` if none exists.\n   */\n  public prevDay(day: Day, includeDay: boolean = false, lookBack: number = 366): Day\n  {\n    return this.iterateDaycast(day, 1, false, includeDay, lookBack).first();\n  }\n\n  /**\n   * Finds the previous specified number of days that events occur on the\n   * schedule given a day to start, optionally including it, and a maximum\n   * number of days to look behind.\n   *\n   * @param day The day to start to search from.\n   * @param max The maximum number of days to return in the result.\n   * @param includeDay If the given day should be included in the search.\n   * @param lookAhead The maximum number of days to look behind from the given\n   *     day for event occurrences.\n   * @returns An array containing the previous days on the schedule that events\n   *    start or an empty array if there are none.\n   */\n  public prevDays(day: Day, max: number, includeDay: boolean = false, lookBack: number = 366): Iterator<Day>\n  {\n    return this.iterateDaycast(day, max, false, includeDay, lookBack);\n  }\n\n  /**\n   * Iterates over days that events start in the schedule given a day to start,\n   * a maximum number of days to find, and a direction to look.\n   *\n   * @param day The day to start to search from.\n   * @param max The maximum number of days to iterate.\n   * @param next If `true` this searches forward, otherwise `false` is backwards.\n   * @param includeDay If the given day should be included in the search.\n   * @param lookup The maximum number of days to look through from the given\n   *     day for event occurrences.\n   * @returns A new Iterator for the days found in the cast.\n   * @see [[Schedule.iterateSpans]]\n   */\n  public iterateDaycast(day: Day, max: number, next: boolean, includeDay: boolean = false, lookup: number = 366): Iterator<Day>\n  {\n    return new Iterator<Day>(iterator =>\n    {\n      let iterated: number = 0;\n\n      for (let days = 0; days < lookup; days++)\n      {\n        if (!includeDay || days > 0)\n        {\n          day = next ? day.next() : day.prev();\n        }\n\n        if (!this.iterateSpans( day, false ).isEmpty())\n        {\n          let action: IteratorAction = iterator.act( day );\n\n          if (action === IteratorAction.Stop || ++iterated >= max)\n          {\n            return;\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Iterates through the spans (event instances) that start on or covers the\n   * given day.\n   *\n   * @param day The day to look for spans on.\n   * @param covers If `true` spans which span multiple days will be looked at\n   *    to see if they intersect with the given day, otherwise `false` will\n   *    only look at the given day for the start of events.\n   * @returns A new Iterator for all the spans found.\n   */\n  public iterateSpans(day: Day, covers: boolean = false): Iterator<DaySpan>\n  {\n    return new Iterator<DaySpan>(iterator =>\n    {\n      let current: Day = day;\n      let lookBehind: number = covers ? this.durationInDays : 0;\n\n      // If the events start at the end of the day and may last multiple days....\n      if (this.isFullDay())\n      {\n        // If the schedule has events which span multiple days we need to look\n        // backwards for events that overlap with the given day.\n        while (lookBehind >= 0)\n        {\n          // If the current day matches the schedule rules...\n          if (this.matchesDay( current ))\n          {\n            // Build a DaySpan with the given start day and the schedules duration.\n            let span: DaySpan = this.getFullSpan( current );\n\n            // If that dayspan intersects with the given day, it's a winner!\n            if (span.matchesDay( day ))\n            {\n              switch (iterator.act( span ))\n              {\n                case IteratorAction.Stop:\n                  return;\n              }\n            }\n          }\n\n          current = current.prev();\n          lookBehind--;\n        }\n      }\n      // This schedule has events which start at certain times\n      else\n      {\n        // If the schedule has events which span multiple days we need to look\n        // backwards for events that overlap with the given day.\n        while (lookBehind >= 0)\n        {\n          // If the current day matches the schedule rules...\n          if (this.matchesDay( current ))\n          {\n            // Iterate through each daily occurrence in the schedule...\n            for (let time of this.times)\n            {\n              let span: DaySpan = this.getTimeSpan( current, time );\n\n              // If the event intersects with the given day and the occurrence\n              // has not specifically been excluded...\n              if (span.matchesDay( day ) && !this.isExcluded( span.start, true ))\n              {\n                switch (iterator.act( span ))\n                {\n                  case IteratorAction.Stop:\n                    return;\n                }\n              }\n            }\n          }\n          else\n          {\n            // The current day does not match the schedule, however the schedule\n            // might have moved/random event occurrents on the current day.\n            // We only want the ones that overlap with the given day.\n            this.iterateIncludeTimes(current, day).iterate((span, timeIterator) =>\n            {\n              switch (iterator.act( span ))\n              {\n                case IteratorAction.Stop:\n                  timeIterator.stop();\n                  break;\n              }\n            })\n\n            if (iterator.action === IteratorAction.Stop)\n            {\n              return;\n            }\n          }\n\n          current = current.prev();\n          lookBehind--;\n        }\n      }\n    });\n  }\n\n  /**\n   * Determines if the given day is on the schedule and the time specified on\n   * the day matches one of the times on the schedule.\n   *\n   * @param day The day to test.\n   * @returns `true` if the day and time match the schedule, otherwise false.\n   */\n  public matchesTime(day: Day): boolean\n  {\n    return !!this.iterateSpans( day, true ).first( span => span.start.sameMinute( day ) );\n  }\n\n  /**\n   * Determines if the given day is covered by this schedule. A schedule can\n   * specify events that span multiple days - so even though the day does not\n   * match the starting day of a span - it can be a day that is within the\n   * schedule.\n   *\n   * @param day The day to test.\n   * @returns `true` if the day is covered by an event on this schedule,\n   *    otherwise `false`.\n   */\n  public coversDay(day: Day): boolean\n  {\n    return !this.iterateSpans( day, true ).isEmpty();\n  }\n\n  /**\n   * Determines if the given timestamp lies in an event occurrence on this\n   * schedule.\n   *\n   * @param day The timestamp to test against the schedule.\n   * @return `true` if the timestamp lies in an event occurrent start and end\n   *    timestamps, otherwise `false`.\n   */\n  public coversTime(day: Day): boolean\n  {\n    return !!this.iterateSpans( day, true ).first( span => span.contains( day ) );\n  }\n\n  /**\n   * Sets the frequency for the given property. This does not update the\n   * [[Schedule.checks]] array, the [[Schedule.updateChecks]] function needs\n   * to be called.\n   *\n   * @param property The frequency to update.\n   * @param frequency The new frequency.\n   */\n  public setFrequency(property: DayProperty, frequency?: FrequencyValue): this\n  {\n    this[ property ] = Parse.frequency( frequency, property );\n\n    return this;\n  }\n\n  /**\n   * Changes the exclusion status of the event at the given time. By default\n   * this excludes this event - but `false`  may be passed to undo an exclusion.\n   *\n   * @param time The start time of the event occurrence to exclude or include.\n   * @param excluded Whether the event should be excluded.\n   */\n  public setExcluded(time: Day, excluded: boolean = true): this\n  {\n    let type: Identifier = this.identifierType;\n\n    this.exclude.set( time, excluded, type );\n    this.include.set( time, !excluded, type );\n\n    return this;\n  }\n\n  /**\n   * Changes the cancellation status of the event at the given start time. By\n   * default this cancels the event occurrence - but `false` may be passed to\n   * undo a cancellation.\n   *\n   * @param time The start time of the event occurrence to cancel or uncancel.\n   * @param cancelled Whether the event should be cancelled.\n   */\n  public setCancelled(time: Day, cancelled: boolean = true): this\n  {\n    this.cancel.set( time, cancelled, this.identifierType );\n\n    return this;\n  }\n\n  /**\n   * Removes the time from this schedule and all related included, excluded,\n   * cancelled instances as well as metadata.\n   *\n   * @param time The time to remove from the schedule.\n   * @param removeInclude If any included instances should be removed as well.\n   * @returns `true` if the time was removed, otherwise `false`.\n   */\n  public removeTime(time: Time, removeInclude: boolean = true): boolean\n  {\n    let found: boolean = false;\n\n    for (let i = 0; i < this.times.length && !found; i++)\n    {\n      if (found = time.matches( this.times[ i ] ))\n      {\n        this.times.splice( i, 1 );\n      }\n    }\n\n    if (found)\n    {\n      if (removeInclude)\n      {\n        this.include.removeTime( time );\n      }\n\n      this.exclude.removeTime( time );\n      this.cancel.removeTime( time );\n      this.meta.removeTime( time );\n    }\n\n    return found;\n  }\n\n  /**\n   * Moves the event instance starting at `fromTime` to `toTime` optionally\n   * placing `meta` in the schedules metadata for the new time `toTime`.\n   * If this schedule has a single event ([[Schedule.isSingleEvent]]) then the\n   * only value needed is `toTime` and not `fromTime`.\n   *\n   * @param toTime The timestamp of the new event.\n   * @param fromTime The timestamp of the event on the schedule to move if this\n   *    schedule generates multiple events.\n   * @returns `true` if the schedule had the event moved, otherwise `false`.\n   */\n  public move(toTime: Day, fromTime?: Day, meta?: M): boolean\n  {\n    if (!this.moveSingleEvent( toTime ) && fromTime)\n    {\n      return this.moveInstance( fromTime, toTime );\n    }\n\n    return false;\n  }\n\n  /**\n   * Moves a time specified in this schedule to the given time, adjusting\n   * any cancelled event instances, metadata, and any excluded and included\n   * event instances.\n   *\n   * @param fromTime The time to move.\n   * @param toTime The new time in the schedule.\n   * @returns `true` if time was moved, otherwise `false`.\n   */\n  public moveTime(fromTime: Time, toTime: Time): boolean\n  {\n    let found: boolean = false;\n\n    for (let i = 0; i < this.times.length && !found; i++)\n    {\n      if (found = fromTime.matches( this.times[ i ] ))\n      {\n        this.times.splice( i, 1, toTime );\n      }\n    }\n\n    if (found)\n    {\n      this.include.moveTime( fromTime, toTime );\n      this.exclude.moveTime( fromTime, toTime );\n      this.cancel.moveTime( fromTime, toTime );\n      this.meta.moveTime( fromTime, toTime );\n\n      this.adjustDefinedSpan( false );\n    }\n\n    return found;\n  }\n\n  /**\n   * Moves the event instance starting at `fromTime` to `toTime` optionally\n   * placing `meta` in the schedules metadata for the new time `toTime`. A move\n   * is accomplished by excluding the current event and adding an inclusion of\n   * the new day & time.\n   *\n   * @param fromTime The timestamp of the event on the schedule to move.\n   * @param toTime The timestamp of the new event.\n   * @returns `true`.\n   * @see [[Schedule.move]]\n   */\n  public moveInstance(fromTime: Day, toTime: Day): boolean\n  {\n    let type: Identifier = this.identifierType;\n\n    this.exclude.set( fromTime, true, type );\n    this.exclude.set( toTime, false, type );\n\n    this.include.set( toTime, true, type );\n    this.include.set( fromTime, false, type );\n\n    if (this.cancel.get( fromTime, false ) && !this.cancel.get( toTime, false ))\n    {\n      this.cancel.set( toTime, true, type );\n\n      if (this.cancel.getIdentifier( fromTime ) === type)\n      {\n        this.cancel.unset( fromTime, type );\n      }\n    }\n\n    let meta: M = this.meta.get( fromTime, null );\n\n    if (meta && meta !== this.meta.get( toTime, null ))\n    {\n      this.meta.set( toTime, meta, type );\n\n      if (this.meta.getIdentifier( fromTime ) === type)\n      {\n        this.meta.unset( fromTime, type );\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Moves the single event in this schedule to the given day/time if applicable.\n   * If this schedule is not a single event schedule then `false` is returned.\n   * If this schedule is a timed event the time will take the time of the given\n   * `toTime` of `takeTime` is `true`.\n   *\n   * @param toTime The time to move the single event to.\n   * @param takeTime If this schedule has a single timed event, should the time\n   *    of the event be changed to the time of the given `toTime`?\n   * @returns `true` if the schedule was adjusted, otherwise `false`.\n   * @see [[Schedule.move]]\n   */\n  public moveSingleEvent(toTime: Day, takeTime: boolean = true): boolean\n  {\n    if (!this.isSingleEvent())\n    {\n      return false;\n    }\n\n    for (let check of this.checks)\n    {\n      let prop: DayProperty  = check.property;\n      let value = toTime[ prop ];\n      let frequency: FrequencyCheck = Parse.frequency( [value], prop );\n\n      this[ prop ] = frequency;\n    }\n\n    if (this.times.length === 1 && takeTime)\n    {\n      this.times = [toTime.asTime()];\n    }\n\n    this.updateChecks();\n\n    let span: DaySpan = this.getSingleEventSpan();\n\n    if (this.start)\n    {\n      this.start = span.start.start();\n    }\n\n    if (this.end)\n    {\n      this.end = span.end.end();\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the span of the single event in this schedule if it's that type of\n   * schedule, otherwise `null` is returned.\n   *\n   * @returns A span of the single event, otherwise `null`.\n   * @see [[Schedule.isSingleEvent]]\n   */\n  public getSingleEventSpan(): DaySpan\n  {\n    if (!this.isSingleEvent())\n    {\n      return null;\n    }\n\n    let startOfYear: Day = Day.build( this.year.input[0], 0, 1 );\n    let start: Day = this.iterateDaycast( startOfYear, 1, true, true, 366 ).first();\n\n    if (!start)\n    {\n      return null;\n    }\n\n    return this.isFullDay() ?\n      this.getFullSpan( start ) :\n      this.getTimeSpan( start, this.times[ 0 ] );\n  }\n\n  /**\n   * Determines whether this schedule produces a single event, and no more.\n   * If this schedule has any includes, it's assumed to be a multiple event\n   * schedule. A single event can be detected in the following scenarios where\n   * each frequency has a single occurrence (see [[Schedule.isSingleFrequency]]).\n   *\n   * - year, day of year\n   * - year, month, day of month\n   * - year, month, week of month, day of week\n   * - year, week of year, day of week\n   *\n   * @returns `true` if this schedule produces a single event, otherwise `false`.\n   */\n  public isSingleEvent(): boolean\n  {\n    // 0 = full day, 1 = once a day, 1+ = multiple events a day\n    if (this.times.length > 1)\n    {\n      return false;\n    }\n\n    // Let's assume if there are includes, this is not a single event.\n    if (!this.include.isEmpty())\n    {\n      return false;\n    }\n\n    // If this can occur on multiple years, not a single event.\n    if (!this.isSingleYear())\n    {\n      return false;\n    }\n\n    // If this is a specific year and day of the year: single!\n    if (this.isSingleDayOfYear())\n    {\n      return true;\n    }\n\n    // If this is a specific year, month, and day of month: single!\n    if (this.isSingleMonth() && this.isSingleDayOfMonth())\n    {\n      return true;\n    }\n\n    // If this is a specific year, month, week of the month, day of the week: single!\n    if (this.isSingleMonth() && this.isSingleWeekOfMonth() && this.isSingleDayOfWeek())\n    {\n      return true;\n    }\n\n    // If this is a specific year, week of the year, day of the week: single!\n    if (this.isSingleWeekOfYear() && this.isSingleDayOfWeek())\n    {\n      return true;\n    }\n\n    // Doesn't look like a single event.\n    return false;\n  }\n\n  /**\n   * @returns `true` if this schedule produces events only in a specific year.\n   * @see [[Schedule.year]]\n   */\n  public isSingleYear(): boolean\n  {\n    return this.isSingleFrequency( this.year );\n  }\n\n  /**\n   * @returns `true` if this schedule produces events only in a specific month.\n   * @see [[Schedule.month]]\n   */\n  public isSingleMonth(): boolean\n  {\n    return this.isSingleFrequency( this.month );\n  }\n\n  /**\n   * @returns `true` if this schedule produces events only in a specific day of\n   *    the month.\n   * @see [[Schedule.dayOfMonth]]\n   * @see [[Schedule.lastDayOfMonth]]\n   */\n  public isSingleDayOfMonth(): boolean\n  {\n    return this.isSingleFrequency( this.dayOfMonth ) ||\n      this.isSingleFrequency( this.lastDayOfMonth );\n  }\n\n  /**\n   * @returns `true` if this schedule produces events only in a specific day of\n   *    the week.\n   * @see [[Schedule.dayOfWeek]]\n   */\n  public isSingleDayOfWeek(): boolean\n  {\n    return this.isSingleFrequency( this.dayOfWeek );\n  }\n\n  /**\n   * @returns `true` if this schedule produces events only in a specific day of\n   *    the year.\n   * @see [[Schedule.dayOfYear]]\n   */\n  public isSingleDayOfYear(): boolean\n  {\n    return this.isSingleFrequency( this.dayOfYear );\n  }\n\n  /**\n   * @returns `true` if this schedule produces events only in a specific week of\n   *    the month.\n   * @see [[Schedule.weekspanOfMonth]]\n   * @see [[Schedule.fullWeekOfMonth]]\n   * @see [[Schedule.weekOfMonth]]\n   * @see [[Schedule.lastFullWeekOfMonth]]\n   * @see [[Schedule.lastWeekspanOfMonth]]\n   */\n  public isSingleWeekOfMonth(): boolean\n  {\n    return this.isSingleFrequency( this.weekspanOfMonth ) ||\n      this.isSingleFrequency( this.fullWeekOfMonth ) ||\n      this.isSingleFrequency( this.weekOfMonth ) ||\n      this.isSingleFrequency( this.lastFullWeekOfMonth ) ||\n      this.isSingleFrequency( this.lastWeekspanOfMonth );\n  }\n\n  /**\n   * @returns `true` if this schedule produces events only in a specific week of\n   *    the year.\n   * @see [[Schedule.weekspanOfYear]]\n   * @see [[Schedule.fullWeekOfYear]]\n   * @see [[Schedule.week]]\n   * @see [[Schedule.weekOfYear]]\n   * @see [[Schedule.lastFullWeekOfYear]]\n   * @see [[Schedule.lastWeekspanOfYear]]\n   */\n  public isSingleWeekOfYear(): boolean\n  {\n    return this.isSingleFrequency( this.weekspanOfYear ) ||\n      this.isSingleFrequency( this.fullWeekOfYear ) ||\n      this.isSingleFrequency( this.week ) ||\n      this.isSingleFrequency( this.weekOfYear ) ||\n      this.isSingleFrequency( this.lastFullWeekOfYear ) ||\n      this.isSingleFrequency( this.lastWeekspanOfYear );\n  }\n\n  /**\n   * Determines if the given [[FrequencyCheck]] results in a single occurrence.\n   *\n   * @returns `true` if the frequency results in a single event, otherwise `false`.\n   */\n  public isSingleFrequency(frequency: FrequencyCheck): boolean\n  {\n    return fn.isArray( frequency.input ) && (<number[]>frequency.input).length === 1;\n  }\n\n  /**\n   * Creates a forecast for this schedule which returns a number of event\n   * occurrences around a given day. A single item could be returned per day, or\n   * you could get an item for each timed event occurrence.\n   *\n   * @param around The day to find a forecast around.\n   * @param covers If `true` spans which span multiple days will be looked at\n   *    to see if they intersect with the given day, otherwise `false` will\n   *    only look at the given day for the start of events.\n   * @param daysAfter The number of events to return before the given day.\n   * @param daysBefore The number of events to return after the given day.\n   * @param times If timed events should be returned, or only one for each day.\n   * @param lookAround How many days to look before and after the given day for\n   *    event occurrences.\n   * @returns A new iterator which provides the event occurence span, the day it\n   *    starts (or is covered if `covers` is `true`), and the identifier for the\n   *    event.\n   */\n  public forecast(around: Day,\n    covers: boolean = true,\n    daysAfter: number,\n    daysBefore: number = daysAfter,\n    times: boolean = false,\n    lookAround: number = 366): Iterator<ScheduleEventTuple>\n  {\n    let type: Identifier = this.identifierType;\n\n    let tuplesForDay = (day: Day, tuples: Iterator<ScheduleEventTuple>): boolean =>\n    {\n      let spans: DaySpan[] = this.iterateSpans( day, covers ).list();\n      let last: number = times ? spans.length : Math.min( 1, spans.length );\n      let offset: number = times ? 0 : spans.length - 1;\n\n      for (let i = 0; i < last; i++)\n      {\n        let span: DaySpan = spans[ i + offset ];\n        let id: IdentifierInput = type.get( span.start );\n\n        if (tuples.act( [ span, day, id ] ) === IteratorAction.Stop)\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    let prev = new Iterator<ScheduleEventTuple>(iterator =>\n    {\n      let curr: Day = around;\n\n      for (let i = 0; i < lookAround; i++)\n      {\n        if (!tuplesForDay( curr, iterator ))\n        {\n          break;\n        }\n\n        curr = curr.prev();\n      }\n    });\n\n    let next = new Iterator<ScheduleEventTuple>(iterator =>\n    {\n      let curr: Day = around;\n\n      for (let i = 0; i < lookAround; i++)\n      {\n        curr = curr.next();\n\n        if (!tuplesForDay( curr, iterator ))\n        {\n          break;\n        }\n      }\n    });\n\n    return prev.take( daysBefore + 1 ).reverse().append( next.take( daysAfter ) );\n  }\n\n  /**\n   * Iterates timed events that were explicitly specified on the given day.\n   * Those events could span multiple days so may be tested against another day.\n   *\n   * @param day The day to look for included timed events.\n   * @param matchAgainst The day to test against the timed event.\n   * @returns A new Iterator for all the included spans found.\n   */\n  public iterateIncludeTimes(day: Day, matchAgainst: Day = day): Iterator<DaySpan>\n  {\n    let isIncludedTime = (result: [IdentifierInput, boolean]) =>\n    {\n      let [id, included] = result;\n\n      return included && Identifier.Time.is( id );\n    };\n\n    let getSpan = (result: [IdentifierInput, boolean]) =>\n    {\n      let [id] = result;\n      let time: Day = Identifier.Time.start( id );\n      let span: DaySpan = this.getTimeSpan( time, time.asTime() );\n\n      if (span.matchesDay( matchAgainst ))\n      {\n        return span;\n      }\n    };\n\n    return this.include.query( day.dayIdentifier ).map<DaySpan>( getSpan, isIncludedTime );\n  }\n\n  /**\n   * Clones this schedule.\n   *\n   * @returns A new schedule which matches this schedule.\n   */\n  public clone(): Schedule<M>\n  {\n    return new Schedule<M>( this.toInput() );\n  }\n\n  /**\n   * Converts the schedule instance back into input.\n   *\n   * @param returnDays When `true` the start, end, and array of exclusions will\n   *    have [[Day]] instances, otherwise the UTC timestamp and dayIdentifiers\n   *    will be used when `false`.\n   * @param returnTimes When `true` the times returned in the input will be\n   *    instances of [[Time]] otherwise the `timeFormat` is used to convert the\n   *    times to strings.\n   * @param timeFormat The time format to use when returning the times as strings.\n   * @param alwaysDuration If the duration values (`duration` and\n   *    `durationUnit`) should always be returned in the input.\n   * @returns The input that describes this schedule.\n   * @see [[Time.format]]\n   */\n  public toInput(returnDays: boolean = false, returnTimes: boolean = false, timeFormat: string = '', alwaysDuration: boolean = false): ScheduleInput<M>\n  {\n    let defaultUnit: string = Constants.DURATION_DEFAULT_UNIT( this.isFullDay() );\n    let exclusions: IdentifierInput[] = this.exclude.identifiers(v => v).list();\n    let inclusions: IdentifierInput[] = this.include.identifiers(v => v).list();\n    let cancels: IdentifierInput[] = this.cancel.identifiers(v => v).list();\n    let hasMeta: boolean = !this.meta.isEmpty();\n    let out: ScheduleInput<M> = {};\n    let times: TimeInput[]  = [];\n\n    for (let time of this.times)\n    {\n      times.push( returnTimes ? time : (timeFormat ? time.format( timeFormat ) : time.toString()) );\n    }\n\n    if (this.start) out.start = returnDays ? this.start : this.start.time;\n    if (this.end) out.end = returnDays ? this.end : this.end.time;\n    if (times.length) out.times = times;\n    if (alwaysDuration || this.duration !== Constants.DURATION_DEFAULT) out.duration = this.duration;\n    if (alwaysDuration || this.durationUnit !== defaultUnit) out.durationUnit = this.durationUnit;\n    if (exclusions.length) out.exclude = exclusions;\n    if (inclusions.length) out.include = inclusions;\n    if (cancels.length) out.cancel = cancels;\n    if (hasMeta) out.meta = fn.extend( {}, this.meta.map );\n    if (this.dayOfWeek.input) out.dayOfWeek = this.dayOfWeek.input;\n    if (this.dayOfMonth.input) out.dayOfMonth = this.dayOfMonth.input;\n    if (this.lastDayOfMonth.input) out.lastDayOfMonth = this.lastDayOfMonth.input;\n    if (this.dayOfYear.input) out.dayOfYear = this.dayOfYear.input;\n    if (this.year.input) out.year = this.year.input;\n    if (this.month.input) out.month = this.month.input;\n    if (this.week.input) out.week = this.week.input;\n    if (this.weekOfYear.input) out.weekOfYear = this.weekOfYear.input;\n    if (this.weekspanOfYear.input) out.weekspanOfYear = this.weekspanOfYear.input;\n    if (this.fullWeekOfYear.input) out.fullWeekOfYear = this.fullWeekOfYear.input;\n    if (this.lastWeekspanOfYear.input) out.lastWeekspanOfYear = this.lastWeekspanOfYear.input;\n    if (this.lastFullWeekOfYear.input) out.lastFullWeekOfYear = this.lastFullWeekOfYear.input;\n    if (this.weekOfMonth.input) out.weekOfMonth = this.weekOfMonth.input;\n    if (this.weekspanOfMonth.input) out.weekspanOfMonth = this.weekspanOfMonth.input;\n    if (this.fullWeekOfMonth.input) out.fullWeekOfMonth = this.fullWeekOfMonth.input;\n    if (this.lastWeekspanOfMonth.input) out.lastWeekspanOfMonth = this.lastWeekspanOfMonth.input;\n    if (this.lastFullWeekOfMonth.input) out.lastFullWeekOfMonth = this.lastFullWeekOfMonth.input;\n\n    return out;\n  }\n\n  /**\n   * Describes the schedule in a human friendly string taking into account all\n   * possible values specified in this schedule.\n   *\n   * @param thing A brief description of the things (events) on the schedule.\n   * @param includeRange When `true` the [[Schedule.start]] and [[Schedule.end]]\n   *    are possibly included in the description if they have values.\n   * @param includeTimes When `true` the [[Schedule.times]] are possibly included\n   *    in the description.\n   * @param includeDuration When `true` the [[Schedule.duration]] and\n   *    [[Schedule.durationUnit]] are added to the description if\n   *    [[Schedule.duration]] is not equal to `1`.\n   * @param includeExcludes When `true` the [[Schedule.exclude]] are added\n   *    to the description if there are any.\n   * @param includeIncludes When `true` the [[Schedule.include]] are added\n   *    to the description if there are any.\n   * @param includeCancels When `true` the [[Schedule.cancel]] are added\n   *    to the description if there are any.\n   * @returns The descroption of the schedule.\n   */\n  public describe(thing: string = 'event',\n    includeRange: boolean = true,\n    includeTimes: boolean = true,\n    includeDuration: boolean = false,\n    includeExcludes: boolean = false,\n    includeIncludes: boolean = false,\n    includeCancels: boolean = false): string\n  {\n    let out: string = '';\n\n    if (includeRange)\n    {\n      if (this.start)\n      {\n        out += 'Starting on ' + this.start.format('dddd Do, YYYY');\n\n        if (this.end)\n        {\n          out += ' and ending on ' + this.end.format('dddd Do, YYYY');\n        }\n      }\n      else if (this.end)\n      {\n        out += 'Up until ' + this.end.format('dddd Do, YYYY');\n      }\n    }\n\n    if (out)\n    {\n      out += ' the ' + thing + ' will occur';\n    }\n    else\n    {\n      out += 'The ' + thing + ' will occur';\n    }\n\n    out += this.describeRule( this.dayOfWeek.input, 'day of the week', x => moment.weekdays()[x], 1, false);\n    out += this.describeRule( this.lastDayOfMonth.input, 'last day of the month', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.dayOfMonth.input, 'day of the month', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.dayOfYear.input, 'day of the year', x => Suffix.CACHE[x], 1 );\n    out += this.describeRule( this.year.input, 'year', x => x, 0, false, ' in ' );\n    out += this.describeRule( this.month.input, 'month', x => moment.months()[x], 0, false, ' in ' );\n    out += this.describeRule( this.weekOfYear.input, 'week of the year', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.weekspanOfYear.input, 'weekspan of the year', x => Suffix.CACHE[x + 1], 1 );\n    out += this.describeRule( this.fullWeekOfYear.input, 'full week of the year', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.lastWeekspanOfYear.input, 'last weekspan of the year', x => Suffix.CACHE[x + 1], 1 );\n    out += this.describeRule( this.lastFullWeekOfYear.input, 'last full week of the year', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.weekOfMonth.input, 'week of the month', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.fullWeekOfMonth.input, 'full week of the month', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.weekspanOfMonth.input, 'weekspan of the month', x => Suffix.CACHE[x + 1], 1 );\n    out += this.describeRule( this.lastFullWeekOfMonth.input, 'last full week of the month', x => Suffix.CACHE[x] );\n    out += this.describeRule( this.lastWeekspanOfMonth.input, 'last weekspan of the month', x => Suffix.CACHE[x + 1], 1 );\n\n    if (includeTimes && this.times.length)\n    {\n      out += ' at ';\n      out += this.describeArray( this.times, x => x.format('hh:mm a') );\n    }\n\n    if (includeDuration && this.duration !== Constants.DURATION_DEFAULT)\n    {\n      out += ' lasting ' + this.duration + ' ';\n\n      if (this.durationUnit)\n      {\n        out += this.durationUnit + ' ';\n      }\n    }\n\n    if (includeExcludes)\n    {\n      let excludes: ScheduleModifierSpan<boolean>[] = this.exclude.spans().list();\n\n      if (excludes.length)\n      {\n        out += ' excluding ';\n        out += this.describeArray( excludes, x => x.span.summary(Units.DAY) );\n      }\n    }\n\n    if (includeIncludes)\n    {\n      let includes: ScheduleModifierSpan<boolean>[] = this.include.spans().list();\n\n      if (includes.length)\n      {\n        out += ' including ';\n        out += this.describeArray( includes, x => x.span.summary(Units.DAY) );\n      }\n    }\n\n    if (includeCancels)\n    {\n      let cancels: ScheduleModifierSpan<boolean>[] = this.cancel.spans().list();\n\n      if (cancels.length)\n      {\n        out += ' with cancellations on ';\n        out += this.describeArray( cancels, x => x.span.summary(Units.DAY) );\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Describes the given frequency.\n   *\n   * @param value The frequency to describe.\n   * @param unit The unit of the frequency.\n   * @param map How the values in the frequency should be described.\n   * @param everyOffset A value to add to a [[FrequencyValueEvery]] offset to\n   *    account for zero-based values that should be shifted for human\n   *    friendliness.\n   * @param the If the word 'the' should be used to describe the unit.\n   * @param on The word which preceeds values of the given unit.\n   * @param required If the description should always return a non-empty string\n   *    even if the frequency was not specified in the original input.\n   * @returns A string description of the frequency.\n   */\n  private describeRule(value: FrequencyValue, unit: string, map: (x: number) => any, everyOffset: number = 0, the: boolean = true, on: string = ' on ', required: boolean = false): string\n  {\n    let out: string = '';\n    let suffix: string = the ? ' ' + unit : '';\n\n    if (fn.isFrequencyValueEvery(value))\n    {\n      let valueEvery: FrequencyValueEvery = <FrequencyValueEvery>value;\n\n      out += ' every ' + Suffix.CACHE[ valueEvery.every ] + ' ' + unit;\n\n      if (valueEvery.offset)\n      {\n        out += ' starting at ' + map( valueEvery.offset + everyOffset ) + suffix;\n      }\n    }\n    else if (fn.isFrequencyValueOneOf(value))\n    {\n      let valueOne: FrequencyValueOneOf = <FrequencyValueOneOf>value;\n\n      if (valueOne.length)\n      {\n        out += on + (the ? 'the ' : '');\n        out += this.describeArray( valueOne, map );\n        out += suffix;\n      }\n    }\n    else if (required)\n    {\n      out +=  on + 'any ' + unit;\n    }\n\n    return out;\n  }\n\n  /**\n   * Describes the array by adding commas where appropriate and 'and' before the\n   * last value of the array (if its more than `1`).\n   *\n   * @param array The array of items to describe.\n   * @param map The function which converts an item to a string.\n   * @returns The final description of the array items.\n   */\n  private describeArray<T>(array: T[], map: (item: T) => string): string\n  {\n    let out: string = '';\n    let last: number = array.length - 1;\n\n    out += map( array[ 0 ] );\n\n    for (let i = 1; i < last; i++)\n    {\n      out += ', ' + map( array[ i ] );\n    }\n\n    if (last > 0)\n    {\n      out += ' and ' + map( array[ last ] );\n    }\n\n    return out;\n  }\n\n  /**\n   * Generates a schedule for an event which occurs once all day for a given day\n   * optionally spanning multiple days starting on the given day.\n   *\n   * @param input The day the event starts.\n   * @param days The number of days the event lasts.\n   * @returns A new schedule that starts on the given day.\n   */\n  public static forDay<M>(input: DayInput, days: number = 1): Schedule<M>\n  {\n    let day: Day = Day.parse( input );\n\n    if (!day)\n    {\n      return null;\n    }\n\n    return new Schedule<M>({\n      year: [ day.year ],\n      month: [ day.month ],\n      dayOfMonth: [ day.dayOfMonth ],\n      duration: days,\n      durationUnit: 'days'\n    });\n  }\n\n  /**\n   * Generates a schedule for an event which occurs once at a given time on a\n   * given day optionally spanning any amount of time (default is 1 hour).\n   *\n   * @param input The day the event starts.\n   * @param time The time the event starts.\n   * @param duration The duration of the event.\n   * @param durationUnit The unit for the duration of the event.\n   * @returns A new schedule that starts on the given day and time.\n   */\n  public static forTime<M>(input: DayInput, time: TimeInput, duration: number = 1, durationUnit: DurationInput = 'hours'): Schedule<M>\n  {\n    let day: Day = Day.parse( input );\n\n    if (!day)\n    {\n      return null;\n    }\n\n    return new Schedule<M>({\n      year: [ day.year ],\n      month: [ day.month ],\n      dayOfMonth: [ day.dayOfMonth ],\n      times: [ time ],\n      duration: duration,\n      durationUnit: durationUnit\n    });\n  }\n\n  /**\n   * Generates a schedule for an event which occurs once over a given span.\n   *\n   * @param span The span of the event.\n   * @returns A new schedule that starts and ends at the given timestamps.\n   */\n  public static forSpan<M>(span: DaySpan): Schedule<M>\n  {\n    let start = span.start;\n    let minutes = span.minutes();\n    let isDay = minutes % Constants.MINUTES_IN_DAY === 0;\n    let isHour = minutes % Constants.MINUTES_IN_HOUR === 0;\n    let duration = isDay ? minutes / Constants.MINUTES_IN_DAY : (isHour ? minutes / Constants.MINUTES_IN_HOUR : minutes);\n    let durationUnit: DurationInput = isDay ? 'days' : (isHour ? 'hours' : 'minutes');\n\n    return this.forTime<M>( start, start.asTime(), duration, durationUnit );\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Schedule.ts","\nimport { Schedule, ScheduleInput } from './Schedule';\n\n/**\n * The input which can be passed to the calendar when adding a schedule and event.\n *\n * @typeparam T The type of data stored in the [[Event]] class.\n * @typeparam M The type of metadata stored in the schedule.\n */\nexport interface EventInput<T, M>\n{\n  id?: any;\n  data?: T;\n  schedule: ScheduleInput<M> | Schedule<M>;\n}\n\n/**\n * A pairing of a user specified event object and the schedule which defines\n * when it occurs on a calendar.\n *\n * @typeparam T The type of data stored in the [[Event]] class.\n * @typeparam M The type of metadata stored in the schedule.\n */\nexport class Event<T, M>\n{\n\n  /**\n   * User specified ID which can be used to find or remove this event from a\n   * Calendar.\n   */\n  public id: any;\n\n  /**\n   * User specified object which describes this event.\n   */\n  public data: T;\n\n  /**\n   * The schedule which defines when this event occurs.\n   */\n  public schedule: Schedule<M>;\n\n  /**\n   * If the event is visible on the calendar.\n   */\n  public visible: boolean;\n\n  /**\n   * Creates a new event.\n   *\n   * @param schedule The schedule which defines when the event occurs.\n   * @param data User specified object which describes this event.\n   * @param id User specified ID which identifies this event.\n   */\n  public constructor(schedule: Schedule<M>, data?: T, id?: any, visible: boolean = true)\n  {\n    this.schedule = schedule;\n    this.data = data;\n    this.id = id;\n    this.visible = visible;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Event.ts","\nimport { Functions as fn } from './Functions';\nimport { Constants } from './Constants';\nimport { Parse } from './Parse';\n\n\n/**\n * A value that can possibly be parsed into a Time instance.\n *\n * @see [[Time.parse]]\n */\nexport type TimeInput = Time | number | string | {hour: number, minute?: number, second?: number, millisecond?: number};\n\n/**\n * A class which holds a specific time during in any day.\n */\nexport class Time\n{\n\n  /**\n   * The regular expression used to parse a time from a string.\n   *\n   * - ## = hour\n   * - ##:## = hour & minute\n   * - ##:##:## = hour, minute, & second\n   * - ##:##:##.### = hour, minute, second, and milliseconds\n   */\n  public static REGEX = /^(\\d\\d?):?(\\d\\d)?:?(\\d\\d)?\\.?(\\d\\d\\d)?$/;\n\n  /**\n   * The hour between 0 and 23\n   */\n  public hour: number;\n\n  /**\n   * The minute between 0 and 59\n   */\n  public minute: number;\n\n  /**\n   * The second between 0 and 59\n   */\n  public second: number;\n\n  /**\n   * The millisecond between 0 and 999\n   */\n  public millisecond: number;\n\n\n  /**\n   * Creates a new Time instance given an hour and optionally a minute, second,\n   * and millisecond. If they have not been specified they default to 0.\n   *\n   * @param hour The hour.\n   * @param minute The minute.\n   * @param second The second.\n   * @param millisecond The millisecond.\n   */\n  public constructor(hour: number, minute: number = Constants.MINUTE_MIN, second: number = Constants.SECOND_MIN, millisecond: number = Constants.MILLIS_MIN)\n  {\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond;\n  }\n\n  /**\n   * Formats this time into a string. The following list describes the available\n   * formatting patterns:\n   *\n   * ### Hour\n   * - H: 0-23\n   * - HH: 00-23\n   * - h: 12,1-12,1-11\n   * - hh: 12,01-12,01-11\n   * - k: 1-24\n   * - kk: 01-24\n   * - a: am,pm\n   * - A: AM,PM\n   * ### Minute\n   * - m: 0-59\n   * - mm: 00-59\n   * ### Second\n   * - s: 0-59\n   * - ss: 00-59\n   * ### Millisecond\n   * - S: 0-9\n   * - SS: 00-99\n   * - SSS: 000-999\n   *\n   * @param format The format to output.\n   * @returns The formatted time.\n   */\n  public format(format: string): string\n  {\n    let formatterEntries = Time.FORMATTERS;\n    let out: string = '';\n\n    for (let i = 0; i < format.length; i++)\n    {\n      let handled: boolean = false;\n\n      for (let k = 0; k < formatterEntries.length && !handled; k++)\n      {\n        let entry = formatterEntries[ k ];\n        let part: string = format.substring( i, i + entry.size );\n\n        if (part.length === entry.size)\n        {\n          let formatter = entry.formats[ part ];\n\n          if (formatter)\n          {\n            out += formatter(this);\n            i += entry.size - 1;\n            handled = true;\n          }\n        }\n      }\n\n      if (!handled)\n      {\n        out += format.charAt(i);\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Determines whether this time is an exact match for the given time.\n   *\n   * @param time The given time to test against.\n   * @returns `true` if the time matches this time, otherwise `false`.\n   */\n  public matches(time: Time): boolean\n  {\n    return this.hour === time.hour &&\n      this.minute === time.minute &&\n      this.second === time.second &&\n      this.millisecond === time.millisecond;\n  }\n\n  /**\n   * Determines whether this time has the same hour as the given time.\n   *\n   * @param time The given time to test against.\n   * @returns `true` if the given hour matches this hour, otherwise `false`.\n   */\n  public matchesHour(time: Time): boolean\n  {\n    return this.hour === time.hour;\n  }\n\n  /**\n   * Determines whether this time has the same hour and minute as the given time.\n   *\n   * @param time The given time to test against.\n   * @returns `true` if the given hour and minute matches, otherwise `false`.\n   */\n  public matchesMinute(time: Time): boolean\n  {\n    return this.hour === time.hour &&\n      this.minute === time.minute;\n  }\n\n  /**\n   * Determines whether this time has the same hour, minute, and second as the\n   * given time.\n   *\n   * @param time The given time to test against.\n   * @returns `true` if the given hour, minute, and second matches, otherwise\n   *    `false`.\n   */\n  public matchesSecond(time: Time): boolean\n  {\n    return this.hour === time.hour &&\n      this.minute === time.minute &&\n      this.second === time.second;\n  }\n\n  /**\n   * Sets the time of this instance to the same time of the given input.\n   *\n   * @param input The time to set this to.\n   * @returns `true` if this time was set, otherwise `false` (invalid input).\n   */\n  public set(input: TimeInput): boolean\n  {\n    let parsed: Time = Time.parse( input );\n    let valid: boolean = !!parsed;\n\n    if (valid)\n    {\n      this.hour = parsed.hour;\n      this.minute = parsed.minute;\n      this.second = parsed.second;\n      this.millisecond = parsed.millisecond;\n    }\n\n    return valid;\n  }\n\n  /**\n   * @returns The number of milliseconds from the start of the day until this\n   *  time.\n   */\n  public toMilliseconds(): number\n  {\n    return this.hour * Constants.MILLIS_IN_HOUR +\n      this.minute * Constants.MILLIS_IN_MINUTE +\n      this.second * Constants.MILLIS_IN_SECOND +\n      this.millisecond;\n  }\n\n  /**\n   * @returns The time formatted using the smallest format that completely\n   *  represents this time.\n   */\n  public toString(): string\n  {\n    if (this.millisecond) return this.format('HH:mm:ss.SSS');\n    if (this.second) return this.format('HH:mm:ss');\n    if (this.minute) return this.format('HH:mm');\n\n    return this.format('HH');\n  }\n\n  /**\n   * @returns A unique identifier for this time. The number returned is in the\n   *  following format: SSSssmmHH\n   */\n  public toIdentifier(): number\n  {\n    return this.hour +\n      this.minute * 100 +\n      this.second * 10000 +\n      this.millisecond * 10000000;\n  }\n\n  /**\n   * @returns An object with hour, minute, second, a millisecond properties if\n   *  they are non-zero on this time.\n   */\n  public toObject(): TimeInput\n  {\n    let out: TimeInput = {\n      hour: this.hour\n    };\n\n    if (this.minute) out.minute = this.minute;\n    if (this.second) out.second = this.second;\n    if (this.millisecond) out.millisecond = this.millisecond;\n\n    return out;\n  }\n\n  /**\n   * Parses a value and tries to convert it to a Time instance.\n   *\n   * @param input The input to parse.\n   * @returns The instance parsed or `null` if it was invalid.\n   * @see [[Parse.time]]\n   */\n  public static parse(input: any): Time\n  {\n    return Parse.time(input);\n  }\n\n  /**\n   * Parses a string and converts it to a Time instance. If the string is not\n   * in a valid format `null` is returned.\n   *\n   * @param time The string to parse.\n   * @returns The instance parsed or `null` if it was invalid.\n   * @see [[Time.REGEX]]\n   */\n  public static fromString(time: string): Time\n  {\n    let matches: string[] = this.REGEX.exec( time );\n\n    if (!matches)\n    {\n      return null;\n    }\n\n    let h: number = parseInt(matches[1]) || 0;\n    let m: number = parseInt(matches[2]) || 0;\n    let s: number = parseInt(matches[3]) || 0;\n    let l: number = parseInt(matches[4]) || 0;\n\n    return this.build(h, m, s, l);\n  }\n\n  /**\n   * Parses a number and converts it to a Time instance. The number is assumed\n   * to be in the [[Time.toIdentifier]] format.\n   *\n   * @param time The number to parse.\n   * @returns The instance parsed.\n   */\n  public static fromIdentifier(time: number): Time\n  {\n    let h: number = time % 100;\n    let m: number = Math.floor(time / 100) % 100;\n    let s: number = Math.floor(time / 10000) % 100;\n    let l: number = Math.floor(time / 10000000) % 1000;\n\n    return this.build(h, m, s, l);\n  }\n\n  /**\n   * Returns a new instance given an hour and optionally a minute, second,\n   * and millisecond. If they have not been specified they default to 0.\n   *\n   * @param hour The hour.\n   * @param minute The minute.\n   * @param second The second.\n   * @param millisecond The millisecond.\n   * @returns A new instance.\n   */\n  public static build(hour: number, minute: number = Constants.MINUTE_MIN, second: number = Constants.SECOND_MIN, millisecond: number = Constants.MILLIS_MIN): Time\n  {\n    return new Time(hour, minute, second, millisecond)\n  }\n\n  /**\n   * A set of formatting functions keyed by their format string.\n   */\n  public static FORMATTERS = [\n    {\n      size: 3,\n      formats: {\n        SSS: (t: Time) => fn.padNumber(t.millisecond, 3)\n      }\n    },\n    {\n      size: 2,\n      formats: {\n        HH: (t: Time) => fn.padNumber(t.hour, 2),\n        hh: (t: Time) => fn.padNumber((t.hour % 12) || 12, 2),\n        kk: (t: Time) => fn.padNumber(t.hour + 1, 2),\n        mm: (t: Time) => fn.padNumber(t.minute, 2),\n        ss: (t: Time) => fn.padNumber(t.second, 2),\n        SS: (t: Time) => fn.padNumber(t.millisecond, 3, 2)\n      }\n    },\n    {\n      size: 1,\n      formats: {\n        A: (t: Time) => t.hour < 12 ? 'AM' : 'PM',\n        a: (t: Time) => t.hour < 12 ? 'am' : 'pm',\n        H: (t: Time) => t.hour + '',\n        h: (t: Time) => ((t.hour % 12) || 12) + '',\n        k: (t: Time) => (t.hour + 1) + '',\n        m: (t: Time) => t.minute + '',\n        s: (t: Time) => t.second + '',\n        S: (t: Time) => fn.padNumber(t.millisecond, 3, 1)\n      }\n    }\n  ];\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Time.ts","\nimport { Functions as fn } from './Functions';\nimport { FrequencyCheck } from './Frequency';\nimport { Schedule, ScheduleInput } from './Schedule';\nimport { ScheduleModifier } from './ScheduleModifier';\nimport { Constants } from './Constants';\nimport { Day, DayProperty, DayInput, DurationInput } from './Day';\nimport { Event } from './Event';\nimport { Time } from './Time';\n\n\n/**\n * The class which takes user input and parses it to specific structures.\n */\nexport class Parse\n{\n\n  /**\n   * Parses a value and converts it to a [[FrequencyCheck]].\n   *\n   * @param input The input to parse into a function.\n   * @param property The [[Day]] property the frequency is for.\n   * @returns A function which determines whether a value matches a frequency.\n   * @see [[Schedule]]\n   */\n  public static frequency(input: any, property: DayProperty): FrequencyCheck\n  {\n    let check: FrequencyCheck = (value: number) => {\n      return true;\n    };\n\n    check.given = false;\n\n    if (fn.isFrequencyValueEvery(input))\n    {\n      let every: number = input.every;\n      let offset: number = (input.offset || 0) % every;\n\n      check = (value: number) => {\n        return value % every === offset;\n      };\n      check.given = true;\n    }\n\n    if (fn.isFrequencyValueOneOf(input))\n    {\n      let map: object = {};\n\n      for (let i = 0; i < input.length; i++) {\n        map[ input[ i ] ] = true;\n      }\n\n      check = (value: number) => {\n        return !!map[ value ];\n      };\n      check.given = true;\n    }\n\n    check.input = fn.coalesce( input, null );\n    check.property = property;\n\n    return check;\n  }\n\n  /**\n   * Parses [[DayInput]] into a [[Day]] instance.\n   *\n   * ```typescript\n   * Parse.day( 65342300 );               // UTC timestamp\n   * Parse.day( '01/02/2014' );           // strings in many formats\n   * Parse.day( day );                    // return a passed instance\n   * Parse.day( [2018, 0, 2] );           // array: 01/02/2018\n   * Parse.day( {year: 2018, month: 2} ); // object: 03/01/2018\n   * Parse.day( true );                   // today\n   * ```\n   *\n   * @param input The input to parse.\n   * @returns The Day parsed or `null` if the value is not valid.\n   */\n  public static day(input: DayInput): Day\n  {\n    if (fn.isNumber(input))\n    {\n      return Day.unix( <number>input );\n    }\n    else if (fn.isString(input))\n    {\n      return Day.fromString( <string>input );\n    }\n    else if (input instanceof Day)\n    {\n      return input;\n    }\n    else if (fn.isArray( input ))\n    {\n      return Day.fromArray( <number[]>input );\n    }\n    else if (fn.isObject( input ))\n    {\n      return Day.fromObject( <object>input );\n    }\n    else if (input === true)\n    {\n      return Day.today();\n    }\n\n    return null;\n  }\n\n  /**\n   * Parses a value and tries to convert it to a Time instance.\n   *\n   * ```typescript\n   * Parse.time( time );      // return a passed instance\n   * Parse.time( 9 );         // 09:00:00.000\n   * Parse.time( 3009 );      // 09:30:00.000\n   * Parse.time( 593009 );    // 09:30:59.000\n   * Parsetime( '09' );       // 09:00:00.000\n   * Parse.time( '9:30' );    // 09:30:00.000\n   * Parse.time( '9:30:59' ); // 09:30:59.000\n   * Parse.time( {hour: 2} ); // 02:00:00.000\n   * ```\n   *\n   * @param input The input to parse.\n   * @returns The instance parsed or `null` if it was invalid.\n   * @see [[Time.fromIdentifier]]\n   * @see [[Time.fromString]]\n   */\n  public static time(input: any): Time\n  {\n    if (input instanceof Time)\n    {\n      return input;\n    }\n    if (fn.isNumber(input))\n    {\n      return Time.fromIdentifier( <number>input );\n    }\n    if (fn.isString(input))\n    {\n      return Time.fromString( <string>input );\n    }\n    if (fn.isObject(input) && fn.isNumber(input.hour))\n    {\n      return new Time(input.hour, input.minute, input.second, input.millisecond);\n    }\n\n    return null;\n  }\n\n  /**\n   * Parses a value and tries to convert it to an array of Time instances.\n   * If any of the given values are not a valid time value then the resulting\n   * array will not contain a time instance.\n   *\n   * @param input The input to parse.\n   * @returns A non-null array of time instances.\n   * @see [[Parse.time]]\n   */\n  public static times(input: any): Time[]\n  {\n    let times: Time[] = [];\n\n    if (fn.isArray(input))\n    {\n      for (let timeInput of input)\n      {\n        let time = this.time( timeInput );\n\n        if (time)\n        {\n          times.push( time );\n        }\n      }\n\n      // Sort times from earliest to latest.\n      times.sort((a, b) =>\n      {\n        return a.toMilliseconds() - b.toMilliseconds();\n      });\n    }\n\n    return times;\n  }\n\n  /**\n   * Parses an array of excluded days into a map of excluded days where the\n   * array value and returned object key are [[Day.dayIdentifier]].\n   *\n   * ```typescript\n   * Parse.modifier( [ 20180101, 20140506 ] );            // {'20180101': true, '20140506': true}\n   * Parse.modifier( [ 20180101, Day.build(2014,4,6) ] ); // {'20180101': true, '20140506': true}\n   * ```\n   *\n   * @param input The input to parse.\n   * @param value The default value if the input given is an array of identifiers.\n   * @param parseMeta A function to use to parse a modifier.\n   * @param out The modifier to set the identifiers and values of and return.\n   * @returns The object with identifier keys and `true` values.\n   * @see [[Day.dayIdentifier]]\n   */\n  public static modifier<T>(input: any, value: T,\n    parseMeta: (input: any) => T = (x => <T>x),\n    out: ScheduleModifier<T> = new ScheduleModifier<T>()): ScheduleModifier<T>\n  {\n    let map = {};\n\n    if (fn.isArray(input))\n    {\n      for (let identifier of input)\n      {\n        if (identifier instanceof Day)\n        {\n          map[ identifier.dayIdentifier ] = value;\n        }\n        else if (fn.isNumber(identifier))\n        {\n          map[ <number>identifier ] = value;\n        }\n        else if (fn.isString(identifier))\n        {\n          map[ <string>identifier ] = value;\n        }\n      }\n    }\n\n    if (fn.isObject(input))\n    {\n      for (let identifier in input)\n      {\n        map[ identifier ] = parseMeta( input[ identifier ] );\n      }\n    }\n\n    out.map = map;\n\n    return out;\n  }\n\n  /**\n   * Parses an object which specifies a schedule where events may or may not\n   * repeat and they may be all day events or at specific times.\n   *\n   * @param input The input to parse into a schedule.\n   * @param parseMeta A function to use when parsing meta input into the desired type.\n   * @param out The schedule to set the values of and return.\n   * @returns An instance of the parsed [[Schedule]].\n   */\n  public static schedule<M>(input: ScheduleInput<M> | Schedule<M>,\n    parseMeta: (input: any) => M = (x => <M>x),\n    out: Schedule<M> = new Schedule<M>()): Schedule<M>\n  {\n    if (input instanceof Schedule)\n    {\n      return input;\n    }\n\n    let on: Day = this.day( input.on );\n    let times: Time[] = this.times( input.times );\n    let fullDay: boolean = times.length === 0;\n\n    if (on)\n    {\n      input.start = on.start();\n      input.end = on.end();\n      input.year = [on.year];\n      input.month = [on.month];\n      input.dayOfMonth = [on.dayOfMonth];\n    }\n\n    out.times = times;\n    out.duration = fn.coalesce( input.duration, Constants.DURATION_DEFAULT );\n    out.durationUnit = <DurationInput>fn.coalesce( input.durationUnit, Constants.DURATION_DEFAULT_UNIT( fullDay ) );\n    out.start = this.day( input.start );\n    out.end = this.day( input.end );\n    out.exclude = this.modifier( input.exclude, true, undefined, out.exclude );\n    out.include = this.modifier( input.include, true, undefined, out.include );\n    out.cancel = this.modifier( input.cancel, true, undefined, out.cancel );\n    out.meta = this.modifier( input.meta, null, parseMeta, out.meta );\n    out.year = this.frequency( input.year, 'year' );\n    out.month = this.frequency( input.month, 'month' );\n    out.week = this.frequency( input.week, 'week' );\n    out.weekOfYear = this.frequency( input.weekOfYear, 'weekOfYear' );\n    out.weekspanOfYear = this.frequency( input.weekspanOfYear, 'weekspanOfYear' );\n    out.fullWeekOfYear = this.frequency( input.fullWeekOfYear, 'fullWeekOfYear' );\n    out.lastWeekspanOfYear = this.frequency( input.lastWeekspanOfYear, 'lastWeekspanOfYear' );\n    out.lastFullWeekOfYear = this.frequency( input.lastFullWeekOfYear, 'lastFullWeekOfYear' );\n    out.weekOfMonth = this.frequency( input.weekOfMonth, 'weekOfMonth' );\n    out.weekspanOfMonth = this.frequency( input.weekspanOfMonth, 'weekspanOfMonth' );\n    out.fullWeekOfMonth = this.frequency( input.fullWeekOfMonth, 'fullWeekOfMonth' );\n    out.lastWeekspanOfMonth = this.frequency( input.lastWeekspanOfMonth, 'lastWeekspanOfMonth' );\n    out.lastFullWeekOfMonth = this.frequency( input.lastFullWeekOfMonth, 'lastFullWeekOfMonth' );\n    out.dayOfWeek = this.frequency( input.dayOfWeek, 'dayOfWeek' );\n    out.dayOfMonth = this.frequency( input.dayOfMonth, 'dayOfMonth' );\n    out.lastDayOfMonth = this.frequency( input.lastDayOfMonth, 'lastDayOfMonth' );\n    out.dayOfYear = this.frequency( input.dayOfYear, 'dayOfYear' );\n    out.updateDurationInDays();\n    out.updateChecks();\n\n    return out;\n  }\n\n  /**\n   * Parses an array of [[FrequencyCheck]] functions and returns an array of\n   * functions for only the checks that were specified by the user.\n   *\n   * @param checks The array of check functions to filter through.\n   * @returns The array of user specified checks.\n   */\n  public static givenFrequency(checks: FrequencyCheck[]): FrequencyCheck[]\n  {\n    let out: FrequencyCheck[] = [];\n\n    for (let check of checks)\n    {\n      if (check.given)\n      {\n        out.push( check );\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parses [[EventInput]] and returns an [[Event]].\n   *\n   * @param input The input to parse.\n   * @param parseData A function to use when parsing data input into the desired type.\n   * @param parseMeta A function to use when parsing meta input into the desired type.\n   * @returns The parsed value.\n   */\n  public static event<T, M>(input: any,\n    parseData: (input: any) => T = (x => <T>x),\n    parseMeta: (input: any) => M = (x => <M>x)): Event<T, M>\n  {\n    if (input instanceof Event)\n    {\n      return input;\n    }\n\n    if (!input.schedule)\n    {\n      return null;\n    }\n\n    let schedule: Schedule<M> = this.schedule<M>( input.schedule, parseMeta );\n\n    return new Event( schedule, parseData( input.data ), input.id, input.visible );\n  }\n\n  /**\n   * Parses a schedule from a CRON pattern. TODO\n   */\n  public static cron<M>(pattern: string, out: Schedule<M> = new Schedule<M>()): Schedule<M>\n  {\n    return out;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Parse.ts","\nimport { Identifier, IdentifierInput } from './Identifier';\nimport { Constants } from './Constants';\nimport { Op, operate } from './Operation';\nimport { Parse } from './Parse';\nimport { Time } from './Time';\n\n// @ts-ignore\nimport * as moment from 'moment';\n\n\n/**\n * Valid durations that can be specified.\n */\nexport type DurationInput = moment.unitOfTime.DurationConstructor;\n\n/**\n * All valid types which may be converted to a [[Day]] instance.\n *\n * - `number`: A UNIX timestamp.\n * - `string`: A string representation of a date.\n * - `Day`: An existing [[Day]] instance.\n * - `number[]`: An array of numbers specifying any of: [year, month, dayOfMonth, hour, minute, second, millisecond].\n * - `object`: An object with any of the following properties: year, month, dayOfMonth, hour, minute, second, millisecond.\n * - `true`: This will be interpreted as [[Day.today]]\n */\nexport type DayInput = number | string | Day | number[] | object | true;\n\n/**\n * One of the properties on the [[Day]] object.\n */\nexport type DayProperty = keyof Day;\n\n/**\n * A class which represents a point in time as\n */\nexport class Day\n{\n\n  /**\n   *\n   */\n  public readonly date: moment.Moment;\n\n  /**\n   *\n   */\n  public readonly time: number;\n\n  /**\n   *\n   */\n  public readonly millis: number;\n\n  /**\n   *\n   */\n  public readonly seconds: number;\n\n  /**\n   *\n   */\n  public readonly minute: number;\n\n  /**\n   *\n   */\n  public readonly hour: number;\n\n  /**\n   *\n   */\n  public readonly month: number;\n\n  /**\n   *\n   */\n  public readonly year: number;\n\n  /**\n   *\n   */\n  public readonly quarter: number;\n\n\n  /**\n   *\n   */\n  public readonly dayOfWeek: number;\n\n  /**\n   *\n   */\n  public readonly dayOfMonth: number;\n\n  /**\n   *\n   */\n  public readonly lastDayOfMonth: number;\n\n  /**\n   *\n   */\n  public readonly dayOfYear: number;\n\n\n  /**\n   *\n   */\n  public readonly week: number;\n\n  /**\n   *\n   */\n  public readonly weekOfYear: number;\n\n  /**\n   *\n   */\n  public readonly weekspanOfYear: number;\n\n  /**\n   *\n   */\n  public readonly fullWeekOfYear: number;\n\n  /**\n   *\n   */\n  public readonly lastWeekspanOfYear: number;\n\n  /**\n   *\n   */\n  public readonly lastFullWeekOfYear: number;\n\n\n  /**\n   *\n   */\n  public readonly weekOfMonth: number;\n\n  /**\n   *\n   */\n  public readonly weekspanOfMonth: number;\n\n  /**\n   *\n   */\n  public readonly fullWeekOfMonth: number;\n\n  /**\n   *\n   */\n  public readonly lastWeekspanOfMonth: number;\n\n  /**\n   *\n   */\n  public readonly lastFullWeekOfMonth: number;\n\n\n  /**\n   *\n   */\n  public readonly timeIdentifier: IdentifierInput;\n\n  /**\n   *\n   */\n  public readonly dayIdentifier: IdentifierInput;\n\n  /**\n   *\n   */\n  public readonly weekIdentifier: IdentifierInput;\n\n  /**\n   *\n   */\n  public readonly monthIdentifier: IdentifierInput;\n\n  /**\n   *\n   */\n  public readonly quarterIdentifier: IdentifierInput;\n\n\n\n  /**\n   *\n   */\n  public constructor(date: moment.Moment)\n  {\n    this.date                 = date;\n    this.time                 = date.valueOf();\n    this.millis               = date.millisecond();\n    this.seconds              = date.second();\n    this.minute               = date.minute();\n    this.hour                 = date.hour();\n    this.month                = date.month();\n    this.year                 = date.year();\n    this.quarter              = date.quarter();\n    this.dayOfWeek            = date.day();\n    this.dayOfMonth           = date.date();\n    this.dayOfYear            = date.dayOfYear();\n    this.week                 = date.week();\n\n    this.lastDayOfMonth       = Day.getLastDayOfMonth( date );\n    this.weekOfYear           = Day.getWeekOfYear( date );\n    this.weekspanOfYear       = Day.getWeekspanOfYear( date );\n    this.fullWeekOfYear       = Day.getFullWeekOfYear( date );\n    this.lastWeekspanOfYear   = Day.getLastWeekspanOfYear( date );\n    this.lastFullWeekOfYear   = Day.getLastFullWeekOfYear( date );\n\n    this.weekOfMonth          = Day.getWeekOfMonth( date );\n    this.weekspanOfMonth      = Day.getWeekspanOfMonth( date );\n    this.fullWeekOfMonth      = Day.getFullWeekOfMonth( date );\n    this.lastWeekspanOfMonth  = Day.getLastWeekspanOfMonth( date );\n    this.lastFullWeekOfMonth  = Day.getLastFullWeekOfMonth( date );\n\n    this.timeIdentifier       = Identifier.Time.get( this );\n    this.dayIdentifier        = Identifier.Day.get( this);\n    this.weekIdentifier       = Identifier.Week.get( this);\n    this.monthIdentifier      = Identifier.Month.get( this);\n    this.quarterIdentifier    = Identifier.Quarter.get( this );\n  }\n\n  // Same\n\n  /**\n   *\n   */\n  public sameDay(day: Day): boolean\n  {\n    return this.dayIdentifier === day.dayIdentifier;\n  }\n\n  /**\n   *\n   */\n  public sameMonth(day: Day): boolean\n  {\n    return this.monthIdentifier === day.monthIdentifier;\n  }\n\n  /**\n   *\n   */\n  public sameWeek(day: Day): boolean\n  {\n    return this.weekIdentifier === day.weekIdentifier;\n  }\n\n  /**\n   *\n   */\n  public sameYear(day: Day): boolean\n  {\n    return this.year === day.year;\n  }\n\n  /**\n   *\n   */\n  public sameQuarter(day: Day): boolean\n  {\n    return this.quarterIdentifier === day.quarterIdentifier;\n  }\n\n  /**\n   *\n   */\n  public sameHour(day: Day): boolean {\n    return this.dayIdentifier === day.dayIdentifier && this.hour === day.hour;\n  }\n\n  /**\n   *\n   */\n  public sameMinute(day: Day): boolean {\n    return this.timeIdentifier === day.timeIdentifier;\n  }\n\n  /**\n   *\n   */\n  public sameTime(time: Time): boolean {\n    return this.hour === time.hour && this.minute === time.minute && this.seconds === time.second && this.millis === time.millisecond;\n  }\n\n  // Comparison\n\n  /**\n   *\n   */\n  public isBefore(day: Day, precision?: moment.unitOfTime.StartOf): boolean {\n    return this.date.isBefore( day.date, precision );\n  }\n\n  /**\n   *\n   */\n  public isSameOrBefore(day: Day, precision?: moment.unitOfTime.StartOf): boolean {\n    return this.date.isSameOrBefore( day.date, precision );\n  }\n\n  /**\n   *\n   */\n  public isAfter(day: Day, precision?: moment.unitOfTime.StartOf): boolean {\n    return this.date.isAfter( day.date, precision );\n  }\n\n  /**\n   *\n   */\n  public isSameOrAfter(day: Day, precision?: moment.unitOfTime.StartOf): boolean {\n    return this.date.isSameOrAfter( day.date, precision );\n  }\n\n  /**\n   *\n   */\n  public max(day: Day): Day {\n    return this.date.isAfter( day.date ) ? this : day;\n  }\n\n  /**\n   *\n   */\n  public min(day: Day): Day {\n    return this.date.isBefore( day.date ) ? this : day;\n  }\n\n  // Between\n\n  public millisBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'milliseconds', true ), op, absolute );\n  }\n\n  public secondsBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'seconds', true ), op, absolute );\n  }\n\n  public minutesBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'minutes', true ), op, absolute );\n  }\n\n  public hoursBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'hours', true ), op, absolute );\n  }\n\n  public daysBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'days', true ), op, absolute );\n  }\n\n  public weeksBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'weeks', true ), op, absolute );\n  }\n\n  public monthsBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'months', true ), op, absolute );\n  }\n\n  public yearsBetween(day: Day, op: Op = Op.DOWN, absolute: boolean = true): number {\n    return operate( this.date.diff( day.date, 'years', true ), op, absolute );\n  }\n\n  public isBetween(start: Day, end: Day, inclusive: boolean = true): boolean {\n    return this.date.isBetween(start.date, end.date, null, inclusive ? '[]' : '[)');\n  }\n\n  public mutate(mutator: (date: moment.Moment) => void): Day {\n    var d = this.toMoment();\n    mutator( d );\n    return new Day( d );\n  }\n\n  public add(amount: number, unit: string): Day {\n    return this.mutate(d => d.add(amount, <DurationInput>unit));\n  }\n\n  public relative(millis: number): Day {\n    return this.mutate(d => d.add(millis, 'milliseconds'));\n  }\n\n  // Days\n\n  public relativeDays(days: number): Day {\n    return this.mutate(d => d.add(days, 'days'));\n  }\n\n  public prev(days: number = 1): Day {\n    return this.relativeDays( -days );\n  }\n\n  public next(days: number = 1): Day {\n    return this.relativeDays( days );\n  }\n\n  public withDayOfMonth(day: number): Day {\n    return this.mutate(d => d.date(day));\n  }\n\n  public withDayOfWeek(dayOfWeek: number): Day {\n    return this.mutate(d => d.day(dayOfWeek));\n  }\n\n  public withDayOfYear(dayOfYear: number): Day {\n    return this.mutate(d => d.dayOfYear(dayOfYear));\n  }\n\n  // Month\n\n  public withMonth(month: number): Day {\n    return this.mutate(d => d.month(month));\n  }\n\n  public relativeMonths(months: number): Day {\n    return this.mutate(d => d.add(months, 'months'));\n  }\n\n  public prevMonth(months: number = 1): Day {\n    return this.relativeMonths( -months );\n  }\n\n  public nextMonth(months: number = 1): Day {\n    return this.relativeMonths( months );\n  }\n\n  // Week Of Year\n\n  public withWeek(week: number, relativeWeek: number = this.week): Day {\n    return this.mutate(d => d.add((week - relativeWeek) * Constants.DAYS_IN_WEEK, 'days'));\n  }\n\n  public withWeekOfYear(week: number): Day {\n    return this.withWeek(week, this.weekOfYear);\n  }\n\n  public withFullWeekOfYear(week: number): Day {\n    return this.withWeek(week, this.fullWeekOfYear);\n  }\n\n  public withWeekspanOfYear(week: number): Day {\n    return this.withWeek(week, this.weekspanOfYear);\n  }\n\n  public withWeekOfMonth(week: number): Day {\n    return this.withWeek(week, this.weekOfMonth);\n  }\n\n  public withWeekspanOfMonth(week: number): Day {\n    return this.withWeek(week, this.weekspanOfMonth);\n  }\n\n  public withFullWeekOfMonth(week: number): Day {\n    return this.withWeek(week, this.fullWeekOfMonth);\n  }\n\n  public relativeWeeks(weeks: number): Day {\n    return this.mutate(d => d.add(weeks, 'weeks'));\n  }\n\n  public prevWeek(weeks: number = 1): Day {\n    return this.relativeWeeks( -weeks );\n  }\n\n  public nextWeek(weeks: number = 1): Day {\n    return this.relativeWeeks( weeks );\n  }\n\n  // Year\n\n  public withYear(year: number): Day {\n    return this.mutate(d => d.year(year));\n  }\n\n  public relativeYears(years: number): Day {\n    return this.mutate(d => d.add(years, 'year'));\n  }\n\n  public prevYear(years: number = 1): Day {\n    return this.relativeYears( -years );\n  }\n\n  public nextYear(years: number = 1): Day {\n    return this.relativeYears( years );\n  }\n\n  // Hour\n\n  public withHour(hour: number): Day {\n    return this.mutate(d => d.hour(hour));\n  }\n\n  public relativeHours(hours: number): Day {\n    return this.mutate(d => d.add(hours, 'hours'));\n  }\n\n  public prevHour(hours: number = 1): Day {\n    return this.relativeHours( -hours );\n  }\n\n  public nextHour(hours: number = 1): Day {\n    return this.relativeHours( hours );\n  }\n\n  // Time\n\n  public withTimes(\n      hour: number = Constants.HOUR_MIN,\n      minute: number = Constants.MINUTE_MIN,\n      second: number = Constants.SECOND_MIN,\n      millisecond: number = Constants.MILLIS_MIN): Day {\n    return this.mutate(d => d.set({hour, minute, second, millisecond}));\n  }\n\n  public withTime(time: Time): Day {\n    return this.withTimes(time.hour, time.minute, time.second, time.millisecond);\n  }\n\n  public asTime(): Time {\n    return new Time(this.hour, this.minute, this.seconds, this.millis);\n  }\n\n  // Start & End\n\n  // Time\n\n  public start(): Day {\n    return this.mutate(d => d.startOf('day'));\n  }\n\n  public isStart(): boolean {\n    return this.hour === Constants.HOUR_MIN &&\n      this.minute === Constants.MINUTE_MIN &&\n      this.seconds === Constants.SECOND_MIN &&\n      this.millis === Constants.MILLIS_MIN;\n  }\n\n  public end(inclusive: boolean = true): Day {\n    return inclusive ?\n      this.mutate(d => d.endOf('day')) :\n      this.mutate(d => d.startOf('day').add(1, 'day'));\n  }\n\n  public isEnd(): boolean {\n    return this.hour === Constants.HOUR_MAX &&\n      this.minute === Constants.MINUTE_MAX &&\n      this.seconds === Constants.SECOND_MAX &&\n      this.millis === Constants.MILLIS_MAX;\n  }\n\n  // Hour\n\n  public startOfHour(): Day {\n    return this.mutate(d => d.startOf('hour'));\n  }\n\n  public isStartOfHour(): boolean {\n    return this.minute === Constants.MINUTE_MIN &&\n      this.seconds === Constants.SECOND_MIN &&\n      this.millis === Constants.MILLIS_MIN;\n  }\n\n  public endOfHour(inclusive: boolean = true): Day {\n    return inclusive ?\n      this.mutate(d => d.endOf('hour')) :\n      this.mutate(d => d.startOf('hour').add(1, 'hour'));\n  }\n\n  public isEndOfHour(): boolean {\n    return this.minute === Constants.MINUTE_MAX &&\n      this.seconds === Constants.SECOND_MAX &&\n      this.millis === Constants.MILLIS_MAX;\n  }\n\n  // Week\n\n  public startOfWeek(): Day {\n    return this.mutate(d => d.startOf('week'));\n  }\n\n  public isStartOfWeek(): boolean {\n    return this.dayOfWeek === Constants.WEEKDAY_MIN;\n  }\n\n  public endOfWeek(inclusive: boolean = true): Day {\n    return inclusive ?\n      this.mutate(d => d.endOf('week')) :\n      this.mutate(d => d.startOf('week').add(1, 'week'));\n  }\n\n  public isEndOfWeek(): boolean {\n    return this.dayOfWeek === Constants.WEEKDAY_MAX;\n  }\n\n  // Month\n\n  public startOfMonth(): Day {\n    return this.mutate(d => d.startOf('month'));\n  }\n\n  public isStartOfMonth(): boolean {\n    return this.dayOfMonth === Constants.DAY_MIN;\n  }\n\n  public endOfMonth(inclusive: boolean = true): Day {\n    return inclusive ?\n      this.mutate(d => d.endOf('month')) :\n      this.mutate(d => d.startOf('month').add(1, 'month'));\n  }\n\n  public isEndOfMonth(): boolean {\n    return this.dayOfMonth === this.daysInMonth();\n  }\n\n  // Year\n\n  public startOfYear(): Day {\n    return this.mutate(d => d.startOf('year'));\n  }\n\n  public isStartOfYear(): boolean {\n    return this.month === Constants.MONTH_MIN && this.dayOfMonth === Constants.DAY_MIN;\n  }\n\n  public endOfYear(inclusive: boolean = true): Day {\n    return inclusive ?\n      this.mutate(d => d.endOf('year')) :\n      this.mutate(d => d.startOf('year').add(1, 'year'));\n  }\n\n  public isEndOfYear(): boolean {\n    return this.month === Constants.MONTH_MAX && this.dayOfMonth === Constants.DAY_MAX;\n  }\n\n  // Days In X\n\n  public daysInMonth(): number {\n    return this.date.daysInMonth();\n  }\n\n  public daysInYear(): number {\n    return this.endOfYear().dayOfYear;\n  }\n\n  public weeksInYear(): number {\n    return this.date.weeksInYear();\n  }\n\n  // Display\n\n  public format(format: string): string {\n    return this.date.format( format );\n  }\n\n  public utc(keepLocalTime?: boolean): Day {\n    return this.mutate(d => d.utc(keepLocalTime));\n  }\n\n  public toMoment(): moment.Moment {\n    return this.date.clone();\n  }\n\n  public toDate(): Date {\n    return this.date.toDate();\n  }\n\n  public toArray(): number[] {\n    return this.date.toArray();\n  }\n\n  public toJSON(): string {\n    return this.date.toJSON();\n  }\n\n  public toISOString(keepOffset: boolean = false): string {\n    return this.date.toISOString( keepOffset );\n  }\n\n  public toObject(): object {\n    return this.date.toObject();\n  }\n\n  public toString(): string {\n    return this.date.toString();\n  }\n\n  // State\n\n  public isDST(): boolean {\n    return this.date.isDST();\n  }\n\n  public isLeapYear(): boolean {\n    return this.date.isLeapYear();\n  }\n\n  // Instances\n\n  public static now(): Day {\n    return new Day(moment());\n  }\n\n  public static today(): Day {\n    return this.now().start();\n  }\n\n  public static tomorrow(): Day {\n    return this.today().next();\n  }\n\n  public static fromMoment(moment: moment.Moment): Day {\n    return moment && moment.isValid() ? new Day( moment ) : null;\n  }\n\n  public static unix(millis: number): Day {\n    return this.fromMoment(moment(millis));\n  }\n\n  public static unixSeconds(millis: number): Day {\n    return this.fromMoment(moment.unix(millis));\n  }\n\n  public static parse(input: DayInput): Day {\n    return Parse.day(input);\n  }\n\n  public static fromString(input: string): Day {\n    return this.fromMoment(moment(input));\n  }\n\n  public static fromFormat(input: string, formats: string | string[]): Day {\n    return this.fromMoment(moment(input, formats));\n  }\n\n  public static fromObject(input: object): Day {\n    return this.fromMoment(moment(input));\n  }\n\n  public static fromDate(input: Date): Day {\n    return this.fromMoment(moment(input));\n  }\n\n  public static fromArray(input: number[]): Day {\n    return this.fromMoment(moment(input));\n  }\n\n  public static fromDayIdentifier(id: number): Day {\n    let date: number = id % 100;\n    let month: number = (Math.floor(id / 100) % 100) - 1;\n    let year: number = Math.floor(id / 10000);\n\n    return this.build(year, month, date);\n  }\n\n  public static build(year: number, month: number,\n    date: number = Constants.DAY_MIN,\n    hour: number = Constants.HOUR_MIN,\n    minute: number = Constants.MINUTE_MIN,\n    second: number = Constants.SECOND_MIN,\n    millisecond: number = Constants.MILLIS_MIN): Day\n  {\n    return new Day( moment({year, month, date, hour, minute, second, millisecond}) );\n  }\n\n\n\n\n\n\n\n\n  public static getWeekspanOfYear(date: moment.Moment): number\n  {\n    return Math.floor( (date.dayOfYear() - 1) / Constants.DAYS_IN_WEEK );\n  }\n\n  public static getLastWeekspanOfYear(date: moment.Moment): number\n  {\n    let lastOfYear = date.clone().endOf('year');\n    let daysInYear: number = lastOfYear.dayOfYear();\n\n    return Math.floor( (daysInYear - date.dayOfYear()) / Constants.DAYS_IN_WEEK );\n  }\n\n  public static getWeekOfYear(date: moment.Moment): number\n  {\n    let firstOfYear = date.clone().startOf('year');\n    let weeks: number = date.week();\n\n    return firstOfYear.day() > Constants.WEEK_OF_MONTH_MINIMUM_WEEKDAY ? weeks - 1 : weeks;\n  }\n\n  public static getFullWeekOfYear(date: moment.Moment): number\n  {\n    let firstOfYear = date.clone().startOf('year');\n    let weeks: number = date.week();\n\n    return firstOfYear.day() === Constants.WEEKDAY_MIN ? weeks : weeks - 1;\n  }\n\n  public static getLastFullWeekOfYear(date: moment.Moment): number\n  {\n    let firstOfYear = date.clone().startOf('year');\n    let weeks: number = date.week();\n    let weeksMax: number = date.weeksInYear();\n    let lastWeek: number = weeksMax - weeks;\n\n    return firstOfYear.day() === Constants.WEEKDAY_MIN ? lastWeek + 1 : lastWeek;\n  }\n\n  public static getWeekspanOfMonth(date: moment.Moment): number\n  {\n    return Math.floor((date.date() - 1) / Constants.DAYS_IN_WEEK);\n  }\n\n  public static getLastWeekspanOfMonth(date: moment.Moment): number\n  {\n    return Math.floor((date.daysInMonth() - date.date()) / Constants.DAYS_IN_WEEK);\n  }\n\n  public static getFullWeekOfMonth(date: moment.Moment): number\n  {\n    return Math.floor((date.date() - 1 - date.day() + Constants.DAYS_IN_WEEK) / Constants.DAYS_IN_WEEK);\n  }\n\n  public static getLastFullWeekOfMonth(date: moment.Moment): number\n  {\n    return Math.floor((date.daysInMonth() - date.date() - (Constants.WEEKDAY_MAX - date.day()) + Constants.DAYS_IN_WEEK) / Constants.DAYS_IN_WEEK);\n  }\n\n  public static getWeekOfMonth(date: moment.Moment): number\n  {\n    let dom = date.date();\n    let dow = date.day();\n    let sundayDate = dom - dow;\n\n    return Math.floor( ( sundayDate + Constants.WEEK_OF_MONTH_MINIMUM_WEEKDAY + 5 ) / Constants.DAYS_IN_WEEK );\n  }\n\n  public static getLastDayOfMonth(date: moment.Moment): number\n  {\n    return date.daysInMonth() - date.date() + 1;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Day.ts","\nimport { Op } from './Operation';\nimport { Day } from './Day';\nimport { DaySpan } from './DaySpan';\nimport { CalendarEvent } from './CalendarEvent';\nimport { Iterator } from './Iterator';\n\n\n/**\n * A day in a [[Calendar]] with extra information relative to any selection on\n * the calendar, the current date, or events on the day.\n *\n * @typeparam T The type of data stored in the [[Event]] class.\n * @typeparam M The type of metadata stored in the schedule.\n */\nexport class CalendarDay<T, M> extends Day\n{\n\n  /**\n   * Whether this day is the current day (ex: today).\n   */\n  public currentDay: boolean = false;\n\n  /**\n   * Whether this day is on the same week as the current day (ex: today).\n   */\n  public currentWeek: boolean = false;\n\n  /**\n   * Whether this day is on the same month as the current day (ex: today).\n   */\n  public currentMonth: boolean = false;\n\n  /**\n   * Whether this day is on the same year as the current day (ex: today).\n   */\n  public currentYear: boolean = false;\n\n  /**\n   * How many days away this day is from the current day (ex: today). If this\n   * day is the current day the offset is 0. If this day is before the current\n   * day it will be the negative number of days away. Otherwise this will be\n   * positive meaning this day is after the current day by the given days.\n   */\n  public currentOffset: number = 0;\n\n  /**\n   * Whether this day is part of a selection on the calendar.\n   */\n  public selectedDay: boolean = false;\n\n  /**\n   * Whether this day is on the same week that the calendar selection is.\n   */\n  public selectedWeek: boolean = false;\n\n  /**\n   * Whether this day is on the same month that the calendar selection is.\n   */\n  public selectedMonth: boolean = false;\n\n  /**\n   * Whether this day is on the same year that the calendar selection is.\n   */\n  public selectedYear: boolean = false;\n\n  /**\n   * Whether this day is in the current calendar or not. Some days are outside\n   * the calendar span and used to fill in weeks. Month calendars will fill in\n   * days so the list of days in the calendar start on Sunday and end on Saturday.\n   */\n  public inCalendar: boolean = false;\n\n  /**\n   * The list of events on this day based on the settings and schedules in the\n   * calendar.\n   */\n  public events: CalendarEvent<T, M>[] = [];\n\n\n  /**\n   * Creates an iterator for the events on this day.\n   *\n   * @returns The new iterator for the events on this day.\n   */\n  public iterateEvents(): Iterator<CalendarEvent<T, M>>\n  {\n    return Iterator.forArray( this.events );\n  }\n\n\n  /**\n   * Updates the current flags on this day given the current day (ex: today).\n   *\n   * @param current The current day of the calendar.\n   */\n  public updateCurrent(current: Day): this\n  {\n    this.currentDay = this.sameDay(current);\n    this.currentWeek = this.sameWeek(current);\n    this.currentMonth = this.sameMonth(current);\n    this.currentYear = this.sameYear(current);\n    this.currentOffset = this.daysBetween(current, Op.DOWN, false);\n\n    return this;\n  }\n\n  /**\n   * Updates the selection flags on this day given the selection range on the\n   * calendar.\n   *\n   * @param selected The span of days selected on the calendar.\n   */\n  public updateSelected(selected: DaySpan): this\n  {\n    this.selectedDay = selected.matchesDay(this);\n    this.selectedWeek = selected.matchesWeek(this);\n    this.selectedMonth = selected.matchesMonth(this);\n    this.selectedYear = selected.matchesYear(this);\n\n    return this;\n  }\n\n  /**\n   * Clears the selection flags on this day. This is done when the selection on\n   * the calendar is cleared.\n   */\n  public clearSelected(): this\n  {\n    this.selectedDay = this.selectedWeek = this.selectedMonth = this.selectedYear = false;\n\n    return this;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CalendarDay.ts","\nimport { Constants } from './Constants';\nimport { Day } from './Day';\nimport { DaySpan, DaySpanBounds } from './DaySpan';\nimport { Event } from './Event';\nimport { Identifier, IdentifierInput } from './Identifier';\nimport { Schedule } from './Schedule';\n\n\n/**\n * An instance of an [[Event]] on a given day of a [[Calendar]] generated by\n * the event's [[Schedule]].\n *\n * @typeparam T The type of data stored in the [[Event]] class.\n * @typeparam M The type of metadata stored in the schedule and in this class.\n */\nexport class CalendarEvent<T, M>\n{\n\n  /**\n   * The relatively unique identifier of this event. It is generated based on\n   * the index of the schedule in the calendar and the time of day listed in the\n   * schedule. This number will no longer be unique if the schedule has more\n   * than [[Constants.MAX_EVENTS_PER_DAY]] occurrences in a single day\n   * (based on number of times in [[Schedule.times]]).\n   */\n  public id: number;\n\n  /**\n   * The event with the schedule.\n   */\n  public event: Event<T, M>;\n\n  /**\n   * Any metadata specified for this event instance in the schedule.\n   */\n  public meta: M;\n\n  /**\n   * The day this event occurs on.\n   */\n  public day: Day;\n\n  /**\n   * The span of time this event occurs. If this is an all day event this span\n   * will start at the beginning of the day and end at the beginning of the\n   * next day.\n   *\n   * @see [[Schedule.isFullDay]]\n   */\n  public time: DaySpan;\n\n  /**\n   * Whether this event is an all day event.\n   *\n   * @see [[Schedule.isFullDay]]\n   */\n  public fullDay: boolean;\n\n  /**\n   * Whether this event is the first day of an occurrence. A calendar can\n   * generate multiple [[CalendarEvent]] instances over each day it covers if\n   * [[Calendar.repeatCovers]] is true. These instances have matching\n   * [[CalendarEvent.id]] values.\n   */\n  public starting: boolean;\n\n  /**\n   * Whether this event is the last day of an occurrence. A calendar can\n   * generate multiple [[CalendarEvent]] instances over each day it covers if\n   * [[Calendar.repeatCovers]] is true. These instances have matching\n   * [[CalendarEvent.id]] values.\n   */\n  public ending: boolean;\n\n  /**\n   * Whether this event instance was marked as cancelled in the schedule.\n   */\n  public cancelled: boolean;\n\n  /**\n   * The row this event is on in a visual calendar. An event can span multiple\n   * days and it is desirable to have the occurrence on each day to line up.\n   * This is only set when [[Calendar.updateRows]] is true or manually set.\n   * This value makes sense for visual calendars for all day events or when the\n   * visual calendar is not positioning events based on their time span.\n   */\n  public row: number = 0;\n\n  /**\n   * The column this event is on in a visual calendar. An event can have its\n   * time overlap with another event displaying one of the events in another\n   * column. This is only set when [[Calendar.updateColumns]] is true or\n   * manually set. This value makes sense for visual calendars that are\n   * displaying event occurrences at specific times positioned accordingly.\n   */\n  public col: number = 0;\n\n\n  /**\n   * Creates a new event instance given the id, the event paired with the\n   * schedule, the schedule, the time span of the event, and the day on the\n   * calendar the event belongs to.\n   *\n   * @param id The relatively unique identifier of this event.\n   * @param event The event which created this instance.\n   * @param time The time span of this event.\n   * @param actualDay The day on the calendar this event is for.\n   */\n  public constructor(id: number, event: Event<T, M>, time: DaySpan, actualDay: Day)\n  {\n    this.id = id;\n    this.event = event;\n    this.time = time;\n    this.day = actualDay;\n    this.fullDay = event.schedule.isFullDay();\n    this.meta = event.schedule.getMeta( time.start );\n    this.cancelled = event.schedule.isCancelled( time.start );\n    this.starting = time.isPoint || time.start.sameDay( actualDay );\n    this.ending = time.isPoint || time.end.relative(-1).sameDay( actualDay );\n  }\n\n  /**\n   * The id of the schedule uniqe within the calendar which generated this event.\n   */\n  public get scheduleId(): number\n  {\n    return Math.floor( this.id / Constants.MAX_EVENTS_PER_DAY );\n  }\n\n  /**\n   * The start timestamp of the event.\n   */\n  public get start(): Day\n  {\n    return this.time.start;\n  }\n\n  /**\n   * The end timestamp of the event.\n   */\n  public get end(): Day\n  {\n    return this.time.end;\n  }\n\n  /**\n   * The schedule which generated this event.\n   */\n  public get schedule(): Schedule<M>\n  {\n    return this.event.schedule;\n  }\n\n  /**\n   * The related event data.\n   */\n  public get data(): T\n  {\n    return this.event.data;\n  }\n\n  /**\n   * An [[IdentifierInput]] for the start of this event.\n   */\n  public get identifier(): IdentifierInput\n  {\n    return this.identifierType.get( this.start );\n  }\n\n  /**\n   * The [[Identifier]] for this event. Either [[Identifier.Day]] or\n   * [[Identifier.Time]].\n   */\n  public get identifierType(): Identifier\n  {\n    return this.schedule.identifierType;\n  }\n\n  /**\n   * Returns a delta value between 0 and 1 which represents where the\n   * [[CalendarEvent.start]] is relative to [[CalendarEvent.day]]. The delta\n   * value would be less than 0 if the start of the event is before\n   * [[CalendarEvent.day]].\n   */\n  public get startDelta(): number\n  {\n    return this.time.startDelta( this.day );\n  }\n\n  /**\n   * Returns a delta value between 0 and 1 which represents where the\n   * [[CalendarEvent.end]] is relative to [[CalendarEvent.day]]. The delta value\n   * would be greater than 1 if the end of the event is after\n   * [[CalendarEvent.day]].\n   */\n  public get endDelta(): number\n  {\n    return this.time.endDelta( this.day );\n  }\n\n  /**\n   * Calculates the bounds for this event if it were placed in a rectangle which\n   * represents a day (24 hour period). By default the returned values are\n   * between 0 and 1 and can be scaled by the proper rectangle dimensions or the\n   * rectangle dimensions can be passed to this function.\n   *\n   * @param dayHeight The height of the rectangle of the day.\n   * @param dayWidth The width of the rectangle of the day.\n   * @param columnOffset The offset in the rectangle of the day to adjust this\n   *    event by if it intersects or is contained in a previous event. This also\n   *    reduces the width of the returned bounds to keep the bounds in the\n   *    rectangle of the day.\n   * @param clip `true` if the bounds should stay in the day rectangle, `false`\n   *    and the bounds may go outside the rectangle of the day for multi-day\n   *    events.\n   * @param offsetX How much to translate the left & right properties by.\n   * @param offsetY How much to translate the top & bottom properties by.\n   * @returns The calculated bounds for this event.\n   */\n  public getTimeBounds(dayHeight: number = 1, dayWidth: number = 1, columnOffset: number = 0.1, clip: boolean = true, offsetX: number = 0, offsetY: number = 0): DaySpanBounds\n  {\n    return this.time.getBounds( this.day, dayHeight, dayWidth, this.col * columnOffset, clip, offsetX, offsetY );\n  }\n\n  /**\n   * Changes the cancellation status of this event. By default this cancels\n   * this event - but `false` may be passed to undo a cancellation.\n   *\n   * @param cancelled Whether the event should be cancelled.\n   */\n  public cancel(cancelled: boolean = true): this\n  {\n    this.schedule.setCancelled( this.start, cancelled );\n    this.cancelled = cancelled;\n\n    return this;\n  }\n\n  /**\n   * Changes the exclusion status of this event. By default this excludes this\n   * event - but `false`  may be passed to undo an exclusion.\n   *\n   * @param excluded Whether the event should be excluded.\n   */\n  public exclude(excluded: boolean = true): this\n  {\n    this.schedule.setExcluded( this.start, excluded );\n\n    return this;\n  }\n\n  /**\n   * Moves this event to potentially another day and time. A move is\n   * accomplished by excluding the current event and adding an inclusion of the\n   * new day & time. Any [[CalendarEvent.meta]] on this event will be moved to\n   * the new event. If the schedule represents a single event\n   * ([[Schedule.isSingleEvent]]) then the schedule frequencies are updated\n   * to match the timestamp provided.\n   *\n   * @param toTime The timestamp to move this event to.\n   * @returns Whether the event was moved to the given time.\n   */\n  public move(toTime: Day): boolean\n  {\n    return this.schedule.move( toTime, this.start );\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CalendarEvent.ts","\nimport { Functions as fn } from './Functions';\nimport { Day, DayInput } from './Day';\nimport { DaySpan } from './DaySpan';\nimport { Schedule } from './Schedule';\nimport { EventInput, Event } from './Event';\nimport { Op } from './Operation';\nimport { Units } from './Units';\nimport { Parse } from './Parse';\nimport { SortEvent } from './Sort';\nimport { Constants } from './Constants';\nimport { CalendarDay } from './CalendarDay';\nimport { CalendarEvent } from './CalendarEvent';\nimport { Iterator, IteratorAction } from './Iterator';\n\n\n/**\n * A function which moves a given day by some amount and some unit. This is\n * used to shift a calendar's frame via [[Calendar.next]] and [[Calendar.prev]].\n *\n * @param day The day to move.\n * @param amount The amount to move the day by.\n * @returns A new day instance moved by the given amount.\n */\nexport type CalendarMover = (day: Day, amount: number) => Day;\n\n/**\n * A definition for a given [[Units]] which informs a calendar how to setup the\n * [[Calendar.span]] and how to move with [[Calendar.move]].\n */\nexport interface CalendarTypeDefinition\n{\n  getStart(around: Day, size: number, focus: number): Day;\n  getEnd(start: Day, size: number, focus: number): Day;\n  moveStart(day: Day, amount: number): Day;\n  moveEnd(day: Day, amount: number): Day;\n  defaultInput: any\n}\n\n/**\n * A map of [[CalendarTypeDefinition]] keyed by the [[Units]].\n */\nexport type CalendarTypeDefinitionMap = { [unit: number]: CalendarTypeDefinition };\n\n/**\n * Input used to initialize or mass change the properties of a [[Calendar]].\n *\n * @typeparam T The type of data stored in the [[Event]] class.\n * @typeparam M The type of metadata stored in the schedule.\n */\nexport interface CalendarInput<T, M>\n{\n\n  /**\n   * @see [[Calendar.fill]]\n   */\n  fill?: boolean;\n  /**\n   * @see [[Calendar.minimumSize]]\n   */\n  minimumSize?: number;\n  /**\n   * @see [[Calendar.repeatCovers]]\n   */\n  repeatCovers?: boolean;\n  /**\n   * @see [[Calendar.listTimes]]\n   */\n  listTimes?: boolean;\n  /**\n   * @see [[Calendar.eventsOutside]]\n   */\n  eventsOutside?: boolean;\n  /**\n   * @see [[Calendar.updateRows]]\n   */\n  updateRows?: boolean;\n  /**\n   * @see [[Calendar.updateColumns]]\n   */\n  updateColumns?: boolean;\n  /**\n   * @see [[Calendar.eventSorter]]\n   */\n  eventSorter?: SortEvent<T, M>;\n  /**\n   * @see [[Calendar.events]]\n   */\n  events?: EventInput<T, M>[];\n  /**\n   * @see [[Calendar.type]]\n   */\n  type?: Units;\n  /**\n   * @see [[Calendar.size]]\n   */\n  size?: number; // 1\n  /**\n   * @see [[Calendar.parseMeta]]\n   */\n  parseMeta?: (input: any) => M;\n  /**\n   * @see [[Calendar.parseData]]\n   */\n  parseData?: (input: any) => T;\n  /**\n   * When morphing a calendar to a fewer number of days, do we want to keep\n   * today in the calendar if it is already in the calendar?\n   */\n  preferToday?: boolean; // true\n  /**\n   * What day should the calendar be based around (contain)?\n   */\n  around?: DayInput; // null\n  /**\n   * When morphing a calendar and `preferToday` is false OR today is not in the\n   * calendar AND `around` is not specified, we will pick a day at this number\n   * in the current calendar (a value between 0 and 1 signifying the start and\n   * and of the current calendar).\n   */\n  otherwiseFocus?: number; // 0.499999\n  /**\n   * When morphing or creating passing a value of `true` will avoid calling\n   * [[Calendar.refresh]] as is typically done right after each of those\n   * functions.\n   */\n  delayRefresh?: boolean; // false\n}\n\n/**\n * A collection of [[CalendarDay]]s, the events on the calendar, and all\n * [[CalendarEvent]]s generated based on the events.\n *\n * @typeparam T The type of data stored in the [[Event]] class.\n * @typeparam M The type of metadata stored in the schedule.\n */\nexport class Calendar<T, M>\n{\n\n  /**\n   * The span of days in the calendar.\n   */\n  public span: DaySpan;\n\n  /**\n   * The full span of days represented on the calendar. This may be different\n   * than the [[Calendar.span]] when [[Calendar.fill]] is `true` and the\n   * calendar is representing months or years and the days need to start on\n   * Sunday and end on Saturday.\n   */\n  public filled: DaySpan;\n\n  /**\n   * The number of days in the calendar specified by [[Calendar.span]].\n   */\n  public length: number;\n\n  /**\n   * The type of calendar.\n   */\n  public type: Units;\n\n  /**\n   * The size of the calendar. When the calendar type is...\n   *\n   * - [[Units.DAY]]: The number of days in the calendar.\n   * - [[Units.WEEK]]: The number of weeks in the calendar.\n   * - [[Units.MONTH]]: The number of months in the calendar.\n   * - [[Units.YEAR]]: The number of years in the calendar.\n   */\n  public size: number;\n\n  /**\n   * The function used to move the start day of the calendar when functions like\n   * [[Calendar.next]] or [[Calendar.prev]] are called.\n   */\n  public moveStart: CalendarMover;\n\n  /**\n   * The function used to move the end day of the calendar when functions like\n   * [[Calendar.next]] or [[Calendar.prev]] are called.\n   */\n  public moveEnd: CalendarMover;\n\n\n  /**\n   * If the calendar should be filled in so the first day of the calendar is\n   * Sunday and the last day is Saturday.\n   */\n  public fill: boolean = false;\n\n  /**\n   * The minimum number of days in the calendar no matter what the type or size\n   * is. This can be used to display a month with a constant number of weeks -\n   * because not all months contain the same number of weeks.\n   */\n  public minimumSize: number = 0;\n\n  /**\n   * When `true` a [[CalendarEvent]] instance exists on each [[CalendarDay]]\n   * the event covers even if the event didn't start on that day.\n   */\n  public repeatCovers: boolean = true;\n\n  /**\n   * When `true` an event instance will be created for each time specified on\n   * the schedule. If the schedule specifies an all day event then only one\n   * event is added to a day. This is typically done when displaying days or\n   * weeks and events can be displayed on a timeline.\n   */\n  public listTimes: boolean = false;\n\n  /**\n   * When `true` events will be added to days \"outside\" the calendar. Days\n   * outside the calendar are days filled in when [[Calendar.fill]] is `true`.\n   * More specifically days that are in [[Calendar.filled]] and not in\n   * [[Calendar.span]].\n   */\n  public eventsOutside: boolean = false;\n\n  /**\n   * When `true` [[CalendarEvent.row]] will be set so when visually displaying\n   * the event with others multi-day events will align and not overlap.\n   */\n  public updateRows: boolean = false;\n\n  /**\n   * When `true` [[CalendarEvent.col]] will be set so when visually displaying\n   * the event based on start and end time any events that overlap with each\n   * other will be \"indented\" to see the event below it.\n   */\n  public updateColumns: boolean = false;\n\n  /**\n   * The function (if any) which sorts the events on a calendar day.\n   */\n  public eventSorter: SortEvent<T, M> = null;\n\n  /**\n   * A function to use when parsing meta input into the desired type.\n   *\n   * @param input The input to parse.\n   * @returns The meta parsed from the given input, if any.\n   */\n  public parseMeta: (input: any) => M = (x => <M>x);\n\n  /**\n   * A function to use when parsing meta input into the desired type.\n   *\n   * @param input The input to parse.\n   * @returns The meta parsed from the given input, if any.\n   */\n  public parseData: (input: any) => T = (x => <T>x);\n\n  /**\n   * A selection of days on the calendar. If no days are selected this is `null`.\n   * This is merely used to keep the selection flags in [[CalendarDay]] updated\n   * via [[Calendar.refreshSelection]].\n   */\n  public selection: DaySpan = null;\n\n  /**\n   * The array of days in this calendar and their events.\n   */\n  public days: CalendarDay<T, M>[] = [];\n\n  /**\n   * The array of scheduled events added to the calendar.\n   */\n  public events: Event<T, M>[] = [];\n\n  /**\n   * The array of visible events on the calendar. This is built based on the\n   * span of the schedule in the given event and also the [[Event.visible]] flag.\n   */\n  public visible: Event<T, M>[] = [];\n\n\n  /**\n   * Creates a new calendar given a span, type, size, moving functions, and\n   * optionally some default properties for the calendar.\n   *\n   * @param start The first day on the calendar.\n   * @param end The last day on the calendar.\n   * @param type The calendar type used for describing the calendar and splitting it.\n   * @param size The number of calendar types in this calendar.\n   * @param moveStart The function to move the start day.\n   * @param moveEnd The function to move the end by.\n   * @param input The default properties for this calendar.\n   * @see [[Calendar.start]]\n   * @see [[Calendar.end]]\n   * @see [[Calendar.type]]\n   * @see [[Calendar.size]]\n   * @see [[Calendar.moveStart]]\n   * @see [[Calendar.moveEnd]]\n   */\n  public constructor(start: Day, end: Day, type: Units, size: number, moveStart: CalendarMover, moveEnd: CalendarMover, input?: CalendarInput<T, M>)\n  {\n    this.span = new DaySpan(start, end);\n    this.filled = new DaySpan(start, end);\n    this.type = type;\n    this.size = size;\n    this.moveStart = moveStart;\n    this.moveEnd = moveEnd;\n\n    if (fn.isDefined(input))\n    {\n      this.set( input );\n    }\n    else\n    {\n      this.refresh();\n    }\n  }\n\n  /**\n   * Changes the calendar possibly morphing it to a different type or size if\n   * specified in the given input. If the type and size are not morphed then\n   * the following properties may be updated:\n   *\n   * - [[Calendar.fill]]\n   * - [[Calendar.minimumSize]]\n   * - [[Calendar.repeatCovers]]\n   * - [[Calendar.listTimes]]\n   * - [[Calendar.eventsOutside]]\n   * - [[Calendar.updateRows]]\n   * - [[Calendar.updateColumns]]\n   * - [[Calendar.eventSorter]]\n   * - [[Calendar.events]]\n   * - [[Calendar.parseData]]\n   * - [[Calendar.parseMeta]]\n   *\n   * If [[CalendarInput.delayRefresh]] is not given with `true` then\n   * [[Calendar.refresh]] will be called once the calendar properties have been\n   * updated.\n   *\n   * @param input The new properties for this calendar to overwrite with.\n   */\n  public set(input: CalendarInput<T, M>): this\n  {\n    type CTD = CalendarTypeDefinition;\n\n    let typeChange: boolean = fn.isDefined(input.type) && input.type !== this.type;\n    let sizeChange: boolean = fn.isDefined(input.size) && input.size !== this.size;\n\n    if (typeChange || sizeChange)\n    {\n      let focus: number    = fn.coalesce( input.otherwiseFocus, 0.4999 );\n      let prefer: boolean  = fn.coalesce( input.preferToday, true );\n      let size: number     = fn.coalesce( input.size, this.size );\n      let type: Units      = fn.coalesce( input.type, this.type );\n      let around: DayInput = fn.coalesce( input.around, this.days[ Math.floor( (this.days.length - 1) * focus ) ] );\n      let today: Day       = Day.today();\n\n      if (!around || (prefer && this.span.matchesDay(today)))\n      {\n        around = today;\n      }\n\n      let meta: CTD        = Calendar.TYPES[ type ];\n      let start: Day       = meta.getStart( Day.parse( around ), size, focus );\n      let end: Day         = meta.getEnd( start, size, focus );\n\n      this.span.start = start;\n      this.span.end = end;\n      this.type = type;\n      this.size = size;\n      this.moveStart = meta.moveStart;\n      this.moveEnd = meta.moveEnd;\n    }\n    else if (input.around)\n    {\n      let focus: number    = fn.coalesce( input.otherwiseFocus, 0.4999 );\n      let around: Day      = Day.parse( input.around );\n      let type: Units      = this.type;\n      let size: number     = this.size;\n      let meta: CTD        = Calendar.TYPES[ type ];\n      let start: Day       = meta.getStart( around, size, focus );\n      let end: Day         = meta.getEnd( start, size, focus );\n\n      this.span.start = start;\n      this.span.end = end;\n    }\n\n    this.fill           = fn.coalesce( input.fill, this.fill );\n    this.minimumSize    = fn.coalesce( input.minimumSize, this.minimumSize );\n    this.repeatCovers   = fn.coalesce( input.repeatCovers, this.repeatCovers );\n    this.listTimes      = fn.coalesce( input.listTimes, this.listTimes );\n    this.eventsOutside  = fn.coalesce( input.eventsOutside, this.eventsOutside );\n    this.updateRows     = fn.coalesce( input.updateRows, this.updateRows );\n    this.updateColumns  = fn.coalesce( input.updateColumns, this.updateColumns );\n    this.eventSorter    = fn.coalesce( input.eventSorter, this.eventSorter );\n    this.parseMeta      = fn.coalesce( input.parseMeta, this.parseMeta );\n    this.parseData      = fn.coalesce( input.parseData, this.parseData );\n\n    if (fn.isArray(input.events))\n    {\n      this.setEvents(input.events, true);\n    }\n\n    if (!input.delayRefresh)\n    {\n      this.refresh();\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the [[Calendar.minimumSize]] value and returns `this` for method\n   * chaining.\n   *\n   * @param minimumSize The new value.\n   */\n  public withMinimumSize(minimumSize: number): this\n  {\n    this.minimumSize = minimumSize;\n    this.refresh();\n\n    return this;\n  }\n\n  /**\n   * Sets the [[Calendar.repeatCovers]] value and returns `this` for method\n   * chaining.\n   *\n   * @param repeatCovers The new value.\n   */\n  public withRepeatCovers(repeatCovers: boolean): this\n  {\n    this.repeatCovers = repeatCovers;\n    this.refreshEvents();\n\n    return this;\n  }\n\n  /**\n   * Sets the [[Calendar.listTimes]] value and returns `this` for method\n   * chaining.\n   *\n   * @param listTimes The new value.\n   */\n  public withListTimes(listTimes: boolean): this\n  {\n    this.listTimes = listTimes;\n    this.refreshEvents();\n\n    return this;\n  }\n\n  /**\n   * Sets the [[Calendar.eventsOutside]] value and returns `this` for method\n   * chaining.\n   *\n   * @param eventsOutside The new value.\n   */\n  public withEventsOutside(eventsOutside: boolean): this\n  {\n    this.eventsOutside = eventsOutside;\n    this.refreshEvents();\n\n    return this;\n  }\n\n  /**\n   * Sets the [[Calendar.updateRows]] value and returns `this` for method\n   * chaining.\n   *\n   * @param updateRows The new value.\n   * @param refresh If the rows should be updated now if `updateRows` is `true`.\n   */\n  public withUpdateRows(updateRows: boolean, refresh: boolean = true): this\n  {\n    this.updateRows = updateRows;\n\n    if (refresh && updateRows)\n    {\n      this.refreshRows();\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the [[Calendar.updateColumns]] value and returns `this` for method\n   * chaining.\n   *\n   * @param updateColumns The new value.\n   * @param refresh If the columns should be updated now if `updateColumns` is\n   *    `true`.\n   */\n  public withUpdateColumns(updateColumns: boolean, refresh: boolean = true): this\n  {\n    this.updateColumns = updateColumns;\n\n    if (refresh && updateColumns)\n    {\n      this.refreshColumns();\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns the start day of the calendar. If this calendar is filled, this\n   * may not represent the very first day in the calendar.\n   */\n  public get start(): Day\n  {\n    return this.span.start;\n  }\n\n  /**\n   * Returns the end day of the calendar. If this calendar is filled, this\n   * may not represent the very last day in the calendar.\n   */\n  public get end(): Day\n  {\n    return this.span.end;\n  }\n\n  /**\n   * Returns the summary of the span of time this calendar represents.\n   *\n   * @param dayOfWeek [[DaySpan.summary]]\n   * @param short [[DaySpan.summary]]\n   * @param repeat [[DaySpan.summary]]\n   * @param contextual [[DaySpan.summary]]\n   * @param delimiter [[DaySpan.summary]]\n   * @see [[DaySpan.summary]]\n   */\n  public summary(dayOfWeek: boolean = true, short: boolean = false, repeat: boolean = false, contextual: boolean = true, delimiter: string = ' - '): string\n  {\n    return this.span.summary( this.type, dayOfWeek, short, repeat, contextual, delimiter );\n  }\n\n  /**\n   * Splits up this calendar into an iterable collection of calendars. The\n   * resulting iterator will return `size / by` number of calendars.\n   *\n   * @param by The new size of the resulting calendars. If the the size of the\n   *    current calendar is not divisible by this value the resulting calendars\n   *    may cover more or less than this calendar covers.\n   * @returns An iterator for the calendars produced.\n   */\n  public split(by: number = 1): Iterator<Calendar<T, M>>\n  {\n    return new Iterator<Calendar<T, M>>(iterator =>\n    {\n      let start: Day = this.start;\n      let end: Day = this.moveEnd( this.end, by - this.size );\n\n      for (let i = 0; i < this.size; i++)\n      {\n        let calendar = new Calendar(start, end, this.type, by, this.moveStart, this.moveEnd, this);\n\n        if (iterator.act(calendar) === IteratorAction.Stop)\n        {\n          return;\n        }\n\n        start = this.moveStart( start, by );\n        end = this.moveEnd( end, by );\n      }\n    });\n  }\n\n  /**\n   * Refreshes the days and events in this calendar based on the start and end\n   * days, the calendar properties, and its eventss.\n   *\n   * @param today The current day to update the calendar days via\n   *    [[CalendarDay.updateCurrent]].\n   */\n  public refresh(today: Day = Day.today()): this\n  {\n    this.length = this.span.days(Op.UP, true);\n    this.resetDays();\n    this.refreshCurrent(today);\n    this.refreshSelection();\n    this.refreshVisible();\n    this.refreshEvents();\n\n    return this;\n  }\n\n  /**\n   * Updates the [[Calendar.filled]] span based on [[Calendar.start]],\n   * [[Calendar.end]], and [[Calendar.fill]] properties.\n   */\n  public resetFilled(): this\n  {\n    this.filled.start = this.fill ? this.start.startOfWeek() : this.start;\n    this.filled.end = this.fill ? this.end.endOfWeek() : this.end;\n\n    return this;\n  }\n\n  /**\n   * Updates [[Calendar.days]] to match the span of days in the calendar.\n   */\n  public resetDays(): this\n  {\n    this.resetFilled();\n\n    let days: CalendarDay<T, M>[] = this.days;\n    let filled: DaySpan = this.filled;\n    let current: Day = filled.start;\n    let daysBetween: number = filled.days(Op.UP);\n    let total: number = Math.max( this.minimumSize, daysBetween );\n\n    for (let i = 0; i < total; i++)\n    {\n      let day: CalendarDay<T, M> = days[ i ];\n\n      if (!day || !day.sameDay( current ))\n      {\n        day = new CalendarDay<T, M>( current.date );\n\n        if (i < days.length)\n        {\n          days.splice( i, 1, day );\n        }\n        else\n        {\n          days.push( day );\n        }\n      }\n\n      day.inCalendar = this.span.contains( day );\n\n      current = current.next();\n    }\n\n    if (days.length > total)\n    {\n      days.splice( total, days.length - total );\n    }\n\n    return this;\n  }\n\n  /**\n   * Updates the list of visible schedules.\n   */\n  public refreshVisible(): this\n  {\n    let start: Day = this.filled.start;\n    let end: Day = this.filled.end;\n\n    this.visible = this.events.filter(e =>\n    {\n      return e.visible && e.schedule.matchesRange(start, end);\n    });\n\n    return this;\n  }\n\n  /**\n   * Updates the days with the current day via [[CalendarDay.updateCurrent]].\n   *\n   * @param today The new current day.\n   */\n  public refreshCurrent(today: Day = Day.today()): this\n  {\n    this.iterateDays().iterate(d =>\n    {\n      d.updateCurrent(today);\n    });\n\n    return this;\n  }\n\n  /**\n   * Updates the selection flags in [[CalendarDay]] based on the\n   * [[Calendar.selection]] property.\n   */\n  public refreshSelection(): this\n  {\n    this.iterateDays().iterate(d =>\n    {\n      if (this.selection)\n      {\n        d.updateSelected( this.selection );\n      }\n      else\n      {\n        d.clearSelected();\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Updates the [[CalendarDay.events]] based on the events in this calendar\n   * and the following properties:\n   *\n   * - [[Calendar.eventsForDay]]\n   * - [[Calendar.eventsOutside]]\n   * - [[Calendar.listTimes]]\n   * - [[Calendar.repeatCovers]]\n   * - [[Calendar.updateRows]]\n   * - [[Calendar.updateColumns]]\n   */\n  public refreshEvents(): this\n  {\n    this.iterateDays().iterate(d =>\n    {\n      if (d.inCalendar || this.eventsOutside)\n      {\n        d.events = this.eventsForDay(d, this.listTimes, this.repeatCovers);\n      }\n    });\n\n    if (this.updateRows)\n    {\n      this.refreshRows();\n    }\n\n    if (this.updateColumns)\n    {\n      this.refreshColumns();\n    }\n\n    return this;\n  }\n\n  /**\n   * Refreshes the [[CalendarEvent.row]] property as described in the link.\n   */\n  public refreshRows(): this\n  {\n    type EventToRowMap = { [id: number]: number };\n    type UsedMap = { [row: number]: boolean };\n\n    let eventToRow: EventToRowMap = {};\n    let onlyFullDay: boolean = this.listTimes;\n\n    this.iterateDays().iterate(d =>\n    {\n      if (d.dayOfWeek === 0)\n      {\n        eventToRow = {};\n      }\n\n      let used: UsedMap = {};\n\n      for (let event of d.events)\n      {\n        if (onlyFullDay && !event.fullDay)\n        {\n          continue;\n        }\n\n        if (event.id in eventToRow)\n        {\n          used[ event.row = eventToRow[ event.id ] ] = true;\n        }\n      }\n\n      let rowIndex: number = 0;\n\n      for (let event of d.events)\n      {\n        if ((onlyFullDay && !event.fullDay) || event.id in eventToRow)\n        {\n          continue;\n        }\n\n        while (used[ rowIndex ])\n        {\n          rowIndex++;\n        }\n\n        eventToRow[ event.id ] = event.row = rowIndex;\n\n        rowIndex++;\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Refreshes the [[CalendarEvent.col]] property as described in the link.\n   */\n  public refreshColumns(): this\n  {\n    interface Marker {\n      time: number,\n      event: CalendarEvent<T, M>,\n      start: boolean,\n      parent: Marker;\n    }\n\n    this.iterateDays().iterate(d =>\n    {\n      let markers: Marker[] = [];\n\n      for (let event of d.events)\n      {\n        if (!event.fullDay)\n        {\n          markers.push({\n            time: event.time.start.time,\n            event: event,\n            start: true,\n            parent: null\n          });\n\n          markers.push({\n            time: event.time.end.time - 1,\n            event: event,\n            start: false,\n            parent: null\n          });\n        }\n      }\n\n      markers.sort((a, b) =>\n      {\n        return a.time - b.time;\n      });\n\n      let parent = null;\n\n      for (let marker of markers)\n      {\n        if (marker.start)\n        {\n          marker.parent = parent;\n          parent = marker;\n        }\n        else if (parent)\n        {\n          parent = parent.parent;\n        }\n      }\n\n      for (let marker of markers)\n      {\n        if (marker.start)\n        {\n          marker.event.col = marker.parent ? marker.parent.event.col + 1 : 0;\n        }\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Gets the calendar day for the given day.\n   *\n   * @param input The day to get the calendar day for.\n   * @returns The reference to the calendar day, or null if the given input\n   *    is not on this calendar.\n   */\n  public getDay(input: DayInput): CalendarDay<T, M>\n  {\n    let parsed: Day = Day.parse( input );\n\n    if (parsed)\n    {\n      let dayCount: number = parsed.start().daysBetween( this.days[ 0 ], Op.DOWN, false );\n\n      return this.days[ dayCount ];\n    }\n\n    return null;\n  }\n\n  /**\n   * Iterates over all days in this calendar and passes each day to `iterator`.\n   *\n   * @param iterator The function to pass [[CalendarDay]]s to.\n   */\n  public iterateDays(): Iterator<CalendarDay<T, M>>\n  {\n    return new Iterator<CalendarDay<T, M>>(iterator =>\n    {\n      let days: CalendarDay<T, M>[] = this.days;\n\n      for (let i = 0; i < days.length; i++)\n      {\n        switch (iterator.act(days[ i ]))\n        {\n          case IteratorAction.Stop:\n            return;\n        }\n      }\n    });\n  }\n\n  /**\n   * Returns the events for the given day optionally looking at schedule times,\n   * optionally looking at events which cover multiple days, and optionally\n   * sorted with the given function.\n   *\n   * @param day The day to find events for.\n   * @param getTimes When `true` an event is added to the result for each time\n   *    specified in the schedule.\n   * @param covers When `true` events which don't start on the given day but do\n   *    overlap are added to the result.\n   * @param sorter The function to sort the events by, if any.\n   * @returns An array of events that occurred on the given day.\n   */\n  public eventsForDay(day: Day, getTimes: boolean = true, covers: boolean = true, sorter: SortEvent<T, M> = this.eventSorter): CalendarEvent<T, M>[]\n  {\n    let events: CalendarEvent<T, M>[] = [];\n    let entries: Event<T, M>[] = this.visible;\n\n    for (let entryIndex = 0; entryIndex < entries.length; entryIndex++)\n    {\n      let entry: Event<T, M> = entries[ entryIndex ];\n      let schedule: Schedule<M> = entry.schedule;\n      let eventId: number = entryIndex * Constants.MAX_EVENTS_PER_DAY;\n      let timeIndex: number = 0;\n\n      schedule.iterateSpans( day, covers ).iterate((span, iterator) =>\n      {\n        events.push(new CalendarEvent(eventId + timeIndex++, entry, span, day));\n\n        if (!getTimes)\n        {\n          iterator.stop();\n        }\n      });\n    }\n\n    if (sorter)\n    {\n      events.sort( sorter );\n    }\n\n    return events\n  }\n\n  /**\n   * Finds the event given one of the ways to identify the event.\n   *\n   * @param input The value to use to search for an event.\n   * @returns The refrence to the event or null if not found.\n   */\n  public findEvent(id: any): Event<T, M>\n  {\n    for (let event of this.events)\n    {\n      if (event === id || event.schedule === id || event.data === id || event.id === id)\n      {\n        return event;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Removes the list of events if they exist in the calendar.\n   *\n   * @param events The array of events to remove if they exist. If no\n   *    events are passed (via `null`) then all events will be removed\n   *    from the calendar.\n   * @param delayRefresh When `true` the [[Calendar.refreshEvents]] will not be\n   *    called after the events are removed.\n   * @see [[Calendar.removeEvent]]\n   * @see [[Calendar.refreshEvents]]\n   */\n  public removeEvents(events: any[] = null, delayRefresh: boolean = false): this\n  {\n    if (events)\n    {\n      for (let event of events)\n      {\n        this.removeEvent( event, true );\n      }\n    }\n    else\n    {\n      this.events = [];\n    }\n\n    this.refreshVisible();\n\n    if (!delayRefresh)\n    {\n      this.refreshEvents();\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes the given event if it exists on the calendar.\n   *\n   * @param event The event to remove if it exists.\n   * @param delayRefresh When `true` the [[Calendar.refreshEvents]] will not be\n   *    called after the event is removed.\n   * @see [[Calendar.refreshEvents]]\n   */\n  public removeEvent(event: any, delayRefresh: boolean = false): this\n  {\n    let found: Event<T, M> = this.findEvent(event);\n\n    if (found)\n    {\n      this.events.splice( this.events.indexOf(found), 1 );\n\n      this.refreshVisible();\n\n      if (!delayRefresh)\n      {\n        this.refreshEvents();\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds the given event to this calendar if it doesn't exist already (or\n   * `allowDuplicates` is `true`).\n   *\n   * @param event The event to add to the calendar.\n   * @param allowDuplicates If an event can be added more than once.\n   * @param delayRefresh When `true` the [[Calendar.refreshEvents]] will not be\n   *    called after the event is added.\n   * @see [[Calendar.refreshEvents]]\n   */\n  public addEvent(event: EventInput<T, M>, allowDuplicates: boolean = false, delayRefresh: boolean = false): this\n  {\n    let parsed: Event<T, M> = Parse.event<T, M>(event, this.parseData, this.parseMeta);\n\n    if (!allowDuplicates)\n    {\n      let existing = this.findEvent(parsed);\n\n      if (existing)\n      {\n        return this;\n      }\n    }\n\n    this.events.push(parsed);\n\n    this.refreshVisible();\n\n    if (!delayRefresh)\n    {\n      this.refreshEvents();\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds the given events to this calendar if they don't exist already (or\n   * `allowDuplicates` is `true`).\n   *\n   * @param events The events to add to the calendar.\n   * @param allowDuplicates If an event can be added more than once.\n   * @param delayRefresh When `true` the [[Calendar.refreshEvents]] will not be\n   *    called after the events are added.\n   * @see [[Calendar.refreshEvents]]\n   */\n  public addEvents(events: EventInput<T, M>[], allowDuplicates: boolean = false, delayRefresh: boolean = false): this\n  {\n    for (let event of events)\n    {\n      this.addEvent(event, allowDuplicates, true);\n    }\n\n    if (!delayRefresh)\n    {\n      this.refreshEvents();\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the given events to this calendar replacing the current list of\n   * events.\n   *\n   * @param events The events to set to the calendar.\n   * @param delayRefresh When `true` the [[Calendar.refreshEvents]] will not be\n   *    called after the events are added.\n   * @see [[Calendar.refreshEvents]]\n   */\n  public setEvents(events: EventInput<T, M>[], delayRefresh: boolean = false): this\n  {\n    const parsedEvents = [];\n\n    for (let i = 0; i < events.length; i++)\n    {\n      let parsed: Event<T, M> = Parse.event<T, M>(events[i], this.parseData, this.parseMeta);\n\n      if (parsed)\n      {\n        parsedEvents.push(parsed);\n      }\n    }\n\n    this.events = parsedEvents;\n\n    this.refreshVisible();\n\n    if (!delayRefresh)\n    {\n      this.refreshEvents();\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the selection point or range of the calendar and updates the flags\n   * in the days.\n   *\n   * @param start The start of the selection.\n   * @param end The end of the selection.\n   * @see [[Calendar.refreshSelection]]\n   */\n  public select(start: Day, end: Day = start): this\n  {\n    this.selection = new DaySpan( start, end );\n    this.refreshSelection();\n\n    return this;\n  }\n\n  /**\n   * Sets the selection of the calendar to nothing.\n   *\n   * @see [[Calendar.refreshSelection]]\n   */\n  public unselect(): this\n  {\n    this.selection = null;\n    this.refreshSelection();\n\n    return this;\n  }\n\n  /**\n   * Shifts the calendar days by the given amount.\n   *\n   * @param jump The amount to shift the calendar by.\n   * @param delayRefresh When `true` [[Calendar.refresh]] will not be called\n   *    after calendar is moved.\n   */\n  public move(jump: number = this.size, delayRefresh: boolean = false): this\n  {\n    this.span.start = this.moveStart( this.start, jump );\n    this.span.end = this.moveEnd( this.end, jump );\n\n    if (!delayRefresh)\n    {\n      this.refresh();\n    }\n\n    return this;\n  }\n\n  /**\n   * Moves the calenndar to the next set of days.\n   *\n   * @param jump The amount to shift the calendar by.\n   * @param delayRefresh When `true` [[Calendar.refresh]] will not be called\n   *    after calendar is moved.\n   */\n  public next(jump: number = this.size, delayRefresh: boolean = false): this\n  {\n    return this.move( jump, delayRefresh );\n  }\n\n  /**\n   * Moves the calenndar to the previous set of days.\n   *\n   * @param jump The amount to shift the calendar by.\n   * @param delayRefresh When `true` [[Calendar.refresh]] will not be called\n   *    after calendar is moved.\n   */\n  public prev(jump: number = this.size, delayRefresh: boolean = false): this\n  {\n    return this.move( -jump, delayRefresh );\n  }\n\n  /**\n   * Converts this calendar to input which can be used to later recreate this\n   * calendar. The only properties of the calendar which will be loss is the\n   * [[Calendar.eventSorter]] property because it is a function.\n   *\n   * @param plain If the returned input should be plain objects as opposed\n   *    to [[Day]] and [[Event]] instances.\n   * @param plainData A function to convert [[Event.data]] to a plain object if\n   *    it is not already.\n   * @param plainMeta A function to convert values in [[Schedule.meta]] to plain\n   *    objects if they are not alreday.\n   * @returns The input generated from this calendar.\n   */\n  public toInput(plain: boolean = false,\n      plainData: (data: T) => any = d => d,\n      plainMeta: (meta: M) => any = m => m): CalendarInput<T, M>\n  {\n    let out: CalendarInput<T, M> = {};\n\n    out.type = this.type;\n    out.size = this.size;\n    out.fill = this.fill;\n    out.minimumSize = this.minimumSize;\n    out.repeatCovers = this.repeatCovers;\n    out.listTimes = this.listTimes;\n    out.eventsOutside = this.eventsOutside;\n    out.updateRows = this.updateRows;\n    out.updateColumns = this.updateColumns;\n    out.around = plain ? this.span.start.time : this.span.start;\n    out.events = [];\n\n    for (let event of this.events)\n    {\n      if (plain)\n      {\n        let plainEvent: any = {};\n\n        if (fn.isDefined(event.id))\n        {\n          plainEvent.id = event.id;\n        }\n\n        if (fn.isDefined(event.data))\n        {\n          plainEvent.data = plainData( event.data );\n        }\n\n        if (!event.visible)\n        {\n          plainEvent.visible = event.visible;\n        }\n\n        plainEvent.schedule = event.schedule.toInput();\n\n        let meta = plainEvent.schedule.meta;\n\n        if (meta)\n        {\n          for (let identifier in meta)\n          {\n            meta[ identifier ] = plainMeta( meta[ identifier ] );\n          }\n        }\n\n        out.events.push( plainEvent );\n      }\n      else\n      {\n        out.events.push( event );\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Creates a calendar based on the given input.\n   *\n   * @param input The input which has at least the `type` specified.\n   * @returns A new calendar instance.\n   */\n  public static fromInput<T, M>(input: CalendarInput<T, M>): Calendar<T, M>\n  {\n    let initial: Day = Day.today();\n\n    return new Calendar(initial, initial, null, 1, null, null, input);\n  }\n\n  /**\n   * Creates a calendar based around a given unit optionally focused around a\n   * given day.\n   *\n   * @param type The unit of the calendar.\n   * @param days The number of units in the calendar.\n   * @param around The day to focus the calendar on.\n   * @param focus The value which describes how months are added around the given\n   *    day. The default value will center the calendar around the given day.\n   *    When the value is `0` the given day is the first day in the calendar,\n   *    and when the value is `1` the given day is the last day in the calendar.\n   * @param input The default properties for the calendar.\n   * @returns A new calendar instance.\n   */\n  public static forType<T, M>(type: Units, size: number = 1, around: Day = Day.today(), focus: number = 0.49999, input?: CalendarInput<T, M>): Calendar<T, M>\n  {\n    let meta: CalendarTypeDefinition = this.TYPES[ type ];\n    let start: Day = meta.getStart( around, size, focus );\n    let end: Day = meta.getEnd( start, size, focus );\n\n    return new Calendar<T, M>(start, end, type, size, meta.moveStart, meta.moveEnd, input || meta.defaultInput);\n  }\n\n\n  /**\n   * Creates a calendar based around days optionally focused around a given day.\n   *\n   * @param days The number of days in the calendar.\n   * @param around The day to focus the calendar on.\n   * @param focus The value which describes how days are added around the given\n   *    day. The default value will center the calendar around the given day.\n   *    When the value is `0` the given day is the first day in the calendar,\n   *    and when the value is `1` the given day is the last day in the calendar.\n   * @param input The default properties for the calendar.\n   * @returns A new calendar instance.\n   * @see [[Calendar.forType]]\n   */\n  public static days<T, M>(days: number = 1, around: Day = Day.today(), focus: number = 0.4999, input?: CalendarInput<T, M>): Calendar<T, M>\n  {\n    return this.forType( Units.DAY, days, around, focus, input );\n  }\n\n  /**\n   * Creates a calendar based around weeks optionally focused around a given day.\n   *\n   * @param days The number of weeks in the calendar.\n   * @param around The day to focus the calendar on.\n   * @param focus The value which describes how weeks are added around the given\n   *    day. The default value will center the calendar around the given day.\n   *    When the value is `0` the given day is the first day in the calendar,\n   *    and when the value is `1` the given day is the last day in the calendar.\n   * @param input The default properties for the calendar.\n   * @returns A new calendar instance.\n   * @see [[Calendar.forType]]\n   */\n  public static weeks<T, M>(weeks: number = 1, around: Day = Day.today(), focus: number = 0.4999, input?: CalendarInput<T, M>): Calendar<T, M>\n  {\n    return this.forType( Units.WEEK, weeks, around, focus, input );\n  }\n\n  /**\n   * Creates a calendar based around months optionally focused around a given day.\n   *\n   * @param days The number of months in the calendar.\n   * @param around The day to focus the calendar on.\n   * @param focus The value which describes how months are added around the given\n   *    day. The default value will center the calendar around the given day.\n   *    When the value is `0` the given day is the first day in the calendar,\n   *    and when the value is `1` the given day is the last day in the calendar.\n   * @param input The default properties for the calendar.\n   * @returns A new calendar instance.\n   * @see [[Calendar.forType]]\n   */\n  public static months<T, M>(months: number = 1, around: Day = Day.today(), focus: number = 0.4999, input?: CalendarInput<T, M>): Calendar<T, M>\n  {\n    return this.forType( Units.MONTH, months, around, focus, input );\n  }\n\n  /**\n   * Creates a calendar based around years optionally focused around a given day.\n   *\n   * @param days The number of years in the calendar.\n   * @param around The day to focus the calendar on.\n   * @param focus The value which describes how years are added around the given\n   *    day. The default value will center the calendar around the given day.\n   *    When the value is `0` the given day is the first day in the calendar,\n   *    and when the value is `1` the given day is the last day in the calendar.\n   * @param input The default properties for the calendar.\n   * @returns A new calendar instance.\n   * @see [[Calendar.forType]]\n   */\n  public static years<T, M>(years: number = 1, around: Day = Day.today(), focus: number = 0.4999, input?: CalendarInput<T, M>): Calendar<T, M>\n  {\n    return this.forType( Units.YEAR, years, around, focus, input );\n  }\n\n  /**\n   * A map of functions and properties by [[Units]] used to create or morph\n   * Calendars.\n   */\n  public static TYPES: CalendarTypeDefinitionMap =\n  {\n    [Units.DAY]:\n    {\n      getStart(around: Day, size: number, focus: number): Day {\n        return around.start().relativeDays( -Math.floor( size * focus ) )\n      },\n      getEnd(start: Day, size: number, focus: number): Day {\n        return start.relativeDays( size - 1 ).end();\n      },\n      moveStart(day: Day, amount: number): Day {\n        return day.relativeDays(amount);\n      },\n      moveEnd(day: Day, amount: number): Day {\n        return day.relativeDays(amount);\n      },\n      defaultInput: <any>undefined\n    },\n    [Units.WEEK]:\n    {\n      getStart(around: Day, size: number, focus: number): Day {\n        return around.start().startOfWeek().relativeWeeks( -Math.floor( size * focus ) );\n      },\n      getEnd(start: Day, size: number, focus: number): Day {\n        return start.relativeWeeks( size - 1 ).endOfWeek();\n      },\n      moveStart(day: Day, amount: number): Day {\n        return day.relativeWeeks(amount);\n      },\n      moveEnd(day: Day, amount: number): Day {\n        return day.relativeWeeks(amount);\n      },\n      defaultInput: <any>undefined\n    },\n    [Units.MONTH]:\n    {\n      getStart(around: Day, size: number, focus: number): Day {\n        return around.start().startOfMonth().relativeMonths( -Math.floor( size * focus ) );\n      },\n      getEnd(start: Day, size: number, focus: number): Day {\n        return start.relativeMonths( size - 1 ).endOfMonth();\n      },\n      moveStart(day: Day, amount: number): Day {\n        return day.relativeMonths(amount);\n      },\n      moveEnd(day: Day, amount: number): Day {\n        return day.startOfMonth().relativeMonths(amount).endOfMonth();\n      },\n      defaultInput: { fill: true }\n    },\n    [Units.YEAR]:\n    {\n      getStart(around: Day, size: number, focus: number): Day {\n        return around.start().startOfYear().relativeYears( -Math.floor( size * focus ) );\n      },\n      getEnd(start: Day, size: number, focus: number): Day {\n        return start.relativeYears( size - 1 ).endOfYear();\n      },\n      moveStart(day: Day, amount: number): Day {\n        return day.relativeYears(amount);\n      },\n      moveEnd(day: Day, amount: number): Day {\n        return day.relativeYears(amount);\n      },\n      defaultInput: { fill: true }\n    }\n  };\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Calendar.ts","\n/**\n * The months in a year.\n */\nexport class Month\n{\n\n  public static JANUARY: number = 0;\n  public static FEBRUARY: number = 1;\n  public static MARCH: number = 2;\n  public static APRIL: number = 3;\n  public static MAY: number = 4;\n  public static JUNE: number = 5;\n  public static JULY: number = 6;\n  public static AUGUST: number = 7;\n  public static SEPTEMBER: number = 8;\n  public static OCTOBER: number = 9;\n  public static NOVEMBER: number = 10;\n  public static DECEMBER: number = 11;\n\n  /**\n   * The full list of months in a year.\n   */\n  public static LIST: number[] = [\n    Month.JANUARY,\n    Month.FEBRUARY,\n    Month.MARCH,\n    Month.APRIL,\n    Month.MAY,\n    Month.JUNE,\n    Month.JULY,\n    Month.AUGUST,\n    Month.SEPTEMBER,\n    Month.OCTOBER,\n    Month.NOVEMBER,\n    Month.DECEMBER\n  ];\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Month.ts","\n\n/**\n * The days in a week.\n */\nexport class Weekday\n{\n\n  public static SUNDAY: number = 0;\n  public static MONDAY: number = 1;\n  public static TUESDAY: number = 2;\n  public static WEDNESDAY: number = 3;\n  public static THURSDAY: number = 4;\n  public static FRIDAY: number = 5;\n  public static SATURDAY: number = 6;\n\n  /**\n   * The full list of days in a week.\n   */\n  public static LIST: number[] = [\n    Weekday.SUNDAY,\n    Weekday.MONDAY,\n    Weekday.TUESDAY,\n    Weekday.WEDNESDAY,\n    Weekday.THURSDAY,\n    Weekday.FRIDAY,\n    Weekday.SATURDAY\n  ];\n\n  /**\n   * The list of days starting with Monday and ending on Friday.\n   */\n  public static WEEK: number[] = [\n    Weekday.MONDAY,\n    Weekday.TUESDAY,\n    Weekday.WEDNESDAY,\n    Weekday.THURSDAY,\n    Weekday.FRIDAY\n  ];\n\n  /**\n   * The days on the weekend, starting with Saturday and ending with Sunday.\n   */\n  public static ENDS: number[] = [\n    Weekday.SATURDAY,\n    Weekday.SUNDAY\n  ];\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Weekday.ts","\nimport { Functions as fn } from './Functions';\nimport { Day, DayProperty } from './Day';\nimport { Suffix } from './Suffix';\nimport { Weekday } from './Weekday';\nimport { FrequencyValueEvery, FrequencyValue } from './Frequency';\nimport { Schedule, ScheduleInput } from './Schedule';\n\n\n/**\n * Describes a [[Pattern]] given a [[Day]] to base it on.\n *\n * @param day The day to base the description on.\n * @returns The description of the pattern.\n */\nexport type DescribePattern = (day: Day) => string;\n\n/**\n * A rule helps parse [[ScheduleInput]] and determines whether it matches the\n * given pattern.\n *\n * - When a number is given, the input MUST be an array of the same length and contain any values.\n * - When an array of numbers is given, the input MUST be an array containing the same values.\n * - When a TRUE is given the input MUST contain that property and can be any value.\n * - When a FALSE is given the input MAY contain that property (optional).\n * - When a property is NOT specified, the input MUST NOT contain that property.\n * - When an object with every is given, the input must match the every and offset values (have the same frequency).\n */\nexport type PatternRule =\n  number |                // has array with this number of elements\n  number[] |              // is array with same values\n  boolean |               // is true or false\n  FrequencyValueEvery;    // is object with matching every and offset\n\n/**\n * The set of rules you can specify for determining if a [[ScheduleInput]]\n * matches a pattern.\n */\nexport interface PatternRules\n{\n  dayOfWeek?: PatternRule;\n  dayOfMonth?: PatternRule;\n  lastDayOfMonth?: PatternRule;\n  dayOfYear?: PatternRule;\n  month?: PatternRule;\n  week?: PatternRule;\n  year?: PatternRule;\n  weekOfYear?: PatternRule;\n  weekspanOfYear?: PatternRule;\n  fullWeekOfYear?: PatternRule;\n  lastWeekspanOfYear?: PatternRule;\n  lastFullWeekOfYear?: PatternRule;\n  weekOfMonth?: PatternRule;\n  weekspanOfMonth?: PatternRule;\n  fullWeekOfMonth?: PatternRule;\n  lastWeekspanOfMonth?: PatternRule;\n  lastFullWeekOfMonth?: PatternRule;\n}\n\n\n/**\n * A class which helps describe [[ScheduleInput]] if it matches a pattern.\n */\nexport class Pattern\n{\n\n  /**\n   * The properties in the [[ScheduleInput]] which are compared against the\n   * rules of a pattern.\n   */\n  public static PROPS: DayProperty[] =\n  [\n    'dayOfWeek', 'dayOfMonth', 'lastDayOfMonth', 'dayOfYear',\n    'month', 'week', 'year',\n    'weekOfYear', 'weekspanOfYear', 'fullWeekOfYear', 'lastWeekspanOfYear', 'lastFullWeekOfYear',\n    'weekOfMonth', 'weekspanOfMonth', 'fullWeekOfMonth', 'lastWeekspanOfMonth', 'lastFullWeekOfMonth'\n  ];\n\n  /**\n   * Whether this pattern should be \"listed\" or not. Visual schedulers may\n   * provide a shortcut to describing and changing a [[Schedule]] through\n   * patterns and any pattern where listed is `true` could be an option in a\n   * list. The default patterns are all listed.\n   */\n  public listed: boolean;\n\n  /**\n   * The function which describes this pattern given a [[Day]] to base it on.\n   */\n  public describe: DescribePattern;\n\n  /**\n   * The name of this pattern. This is not typically displayed to a user, just\n   * to uniquely identify a pattern.\n   */\n  public name: string;\n\n  /**\n   * The rules for matching a pattern to a [[Schedule]] or applying a pattern to\n   * a schedule.\n   */\n  public rules: PatternRules;\n\n\n  /**\n   * Creates a new pattern.\n   *\n   * @param name The unique name of the pattern.\n   * @param listed If the pattern is \"listed\" [[Pattern.listed]].\n   * @param describe A function to describe the pattern given a [[Day]].\n   * @param rules The rules which describe how to detect and apply the pattern\n   *    to schedule input.\n   */\n  public constructor(name: string, listed: boolean, describe: DescribePattern, rules: PatternRules)\n  {\n    this.name = name;\n    this.listed = listed;\n    this.describe = describe;\n    this.rules = rules;\n  }\n\n  /**\n   * Applies this pattern to a [[Schedule]] or [[ScheduleInput]] removing and\n   * adding any necessary properties from the input to match this pattern -\n   * based around the day provided.\n   *\n   * @param schedule The schedule to update to match this pattern.\n   * @param day The day to base the schedule on.\n   * @returns The reference to the input passed in.\n   */\n  public apply<M, I extends ScheduleInput<M> | Schedule<M>>(schedule: I, day: Day): I\n  {\n    if (schedule instanceof Schedule)\n    {\n      this.applyGeneric(day,\n        (prop, frequency) => schedule.setFrequency( prop, frequency ),\n        (prop) => schedule.setFrequency( prop )\n      );\n\n      schedule.updateChecks();\n    }\n    else\n    {\n      this.applyGeneric(day,\n        (prop, frequency) => schedule[ prop ] = frequency,\n        (prop) => delete schedule[ prop ]\n      );\n    }\n\n    return schedule;\n  }\n\n  /**\n   * Applies this pattern to any object provided they implement the\n   * `setFrequency` and `removeFrequency` functions.\n   *\n   * @param day The day to base the schedule on.\n   * @param setFrequency The function which sets the frequency on the object.\n   * @param removeFrequency The function to remove a frequency from the object.\n   */\n  public applyGeneric(day: Day,\n    setFrequency: (property: DayProperty, frequency: any) => any,\n    removeFrequency: (property: DayProperty) => any): void\n  {\n    for (let prop of Pattern.PROPS)\n    {\n      let rule = this.rules[ prop ];\n\n      // Should have one value\n      if (rule === 1)\n      {\n        setFrequency( prop, [day[ prop ]] );\n      }\n\n      // Can be any of the values in the array\n      if (fn.isArray(rule))\n      {\n        setFrequency( prop, rule );\n      }\n\n      // Must not be present\n      if (!fn.isDefined(rule))\n      {\n        removeFrequency( prop );\n      }\n    }\n  }\n\n  /**\n   * Determines whether the given [[Schedule]] or [[ScheduleInput]] matches this\n   * pattern. Optionally a day can be provided to make sure the day matches the\n   * schedule and pattern together.\n   *\n   * @param schedule The schedule input to test.\n   * @param exactlyWith A day to further validate against for matching.\n   * @returns `true` if the schedule was a match to this pattern with the\n   *    day if one was provided, otherwise `false`.\n   */\n  public isMatch<M, I extends ScheduleInput<M> | Schedule<M>>(schedule: I, exactlyWith?: Day): boolean\n  {\n    if (schedule instanceof Schedule)\n    {\n      return this.isMatchGeneric((prop) => schedule[ prop ].input, exactlyWith);\n    }\n    else\n    {\n      return this.isMatchGeneric((prop) => schedule[ prop ], exactlyWith);\n    }\n  }\n\n  /**\n   * Determines whether the given input matches this pattern. Optionally a day\n   * can be provided to make sure the day matches the schedule and pattern\n   * together.\n   *\n   * @param input The schedule input to test.\n   * @param exactlyWith A day to further validate against for matching.\n   * @returns `true` if the schedule input was a match to this pattern with the\n   *    day if one was provided, otherwise `false`.\n   */\n  public isMatchGeneric(getFrequency: (property: DayProperty) => FrequencyValue, exactlyWith?: Day): boolean\n  {\n    let exactly: boolean = fn.isDefined( exactlyWith );\n\n    for (let prop of Pattern.PROPS)\n    {\n      let rule = this.rules[ prop ];\n      let curr = getFrequency( prop );\n\n      // Optional, skip it\n      if (rule === false)\n      {\n        continue;\n      }\n\n      // Requires any value\n      if (rule === true && !curr)\n      {\n        return false;\n      }\n\n      // Must not be present\n      if (!fn.isDefined(rule) && curr)\n      {\n        return false;\n      }\n\n      // Must be an array of the same size\n      if (fn.isNumber(rule))\n      {\n        if (fn.isArray(curr) && (<number[]>curr).length === rule)\n        {\n          if (exactly && (<number[]>curr).indexOf( <number>exactlyWith[ prop ] ) === -1)\n          {\n            return false;\n          }\n        }\n        else\n        {\n          return false;\n        }\n      }\n\n      // Must be an array of the same values\n      if (fn.isArray(rule))\n      {\n        if (!fn.isArray(curr))\n        {\n          return false;\n        }\n\n        if (rule.length !== (<number[]>curr).length)\n        {\n          return false;\n        }\n\n        for (var i = 0; i < rule.length; i++)\n        {\n          if (rule[ i ] !== curr[ i ])\n          {\n            return false;\n          }\n        }\n\n        if (exactly && rule.indexOf( exactlyWith[ prop ] ) === -1)\n        {\n          return false;\n        }\n      }\n\n      // Must be an object with same over & offset.\n      if (fn.isObject(rule))\n      {\n        if (!fn.isObject(curr))\n        {\n          return false;\n        }\n\n        var ruleOffset = rule.offset || 0;\n        var currOffset = (<FrequencyValueEvery>curr).offset || 0;\n\n        if (currOffset !== ruleOffset || curr.every !== rule.every)\n        {\n          return false;\n        }\n\n        if (exactly && (<number>exactlyWith[ prop ] % rule.every) !== ruleOffset)\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the pattern with the given name if one exists. If you add your own\n   * patterns make sure to add them to [[PatternMap]].\n   *\n   * @param name The name of the pattern to return.\n   * @return The instance to the pattern with the same name.\n   */\n  public static withName(name: string): Pattern\n  {\n    return PatternMap[ name ];\n  }\n\n  /**\n   * Finds a matching pattern to the given input searching through [[Patterns]]\n   * for matches. Optionally it will only look at patterns where listed = `true`.\n   *\n   * @param input The schedule input to use.\n   * @param listedOnly When `true` only patterns with [[Pattern.listed]] set to\n   *    `true` will be looked at, otherwise all patterns are looked at.\n   * @param exactlyWith  A day to further validate against for matching.\n   * @see [[Pattern.isMatch]]\n   */\n  public static findMatch<M, I extends ScheduleInput<M> | Schedule<M>>(input: I, listedOnly: boolean = true, exactlyWith?: Day): Pattern\n  {\n    for (let pattern of Patterns)\n    {\n      if ((pattern.listed || !listedOnly) && pattern.isMatch<M, I>( input, exactlyWith ))\n      {\n        return pattern;\n      }\n    }\n\n    return null;\n  }\n\n}\n\n\n/**\n * The list of patterns that can be searched through for matches to schedule\n * input.\n *\n * @see [[Pattern.findMatch]]\n */\nexport let Patterns: Pattern[] = [\n  new Pattern(\n    'none', true,\n    (day: Day) => 'Does not repeat',\n    {\n      year: 1,\n      month: 1,\n      dayOfMonth: 1\n    }\n  ),\n  new Pattern(\n    'daily', true,\n    (day: Day) => 'Daily',\n    {\n\n    }\n  ),\n  new Pattern(\n    'weekly', true,\n    (day: Day) =>  'Weekly on ' + day.format('dddd'),\n    {\n      dayOfWeek: 1\n    }\n  ),\n  new Pattern(\n    'monthlyWeek', true,\n    (day: Day) => 'Monthly on the ' + Suffix.CACHE[day.weekspanOfMonth + 1] + ' ' + day.format('dddd'),\n    {\n      dayOfWeek: 1,\n      weekspanOfMonth: 1\n    }\n  ),\n  new Pattern(\n    'annually', true,\n    (day: Day) => 'Annually on ' + day.format('MMMM Do'),\n    {\n      month: 1,\n      dayOfMonth: 1\n    }\n  ),\n  new Pattern(\n    'annuallyMonthWeek', true,\n    (day: Day) => 'Annually on the ' + Suffix.CACHE[day.weekspanOfMonth + 1] + ' ' + day.format('dddd') + ' of ' + day.format('MMMM'),\n    {\n      month: 1,\n      dayOfWeek: 1,\n      weekspanOfMonth: 1\n    }\n  ),\n  new Pattern(\n    'weekday', true,\n    (day: Day) => 'Every weekday (Monday to Friday)',\n    {\n      dayOfWeek: [Weekday.MONDAY, Weekday.TUESDAY, Weekday.WEDNESDAY, Weekday.THURSDAY, Weekday.FRIDAY]\n    }\n  ),\n  new Pattern(\n    'monthly', true,\n    (day: Day) => 'Monthly on the ' + day.format('Do') + ' day',\n    {\n      dayOfMonth: 1\n    }\n  ),\n  new Pattern(\n    'custom', true,\n    (day: Day) => 'Custom...',\n    {\n      dayOfWeek: false,\n      dayOfMonth: false,\n      lastDayOfMonth: false,\n      dayOfYear: false,\n      year: false,\n      month: false,\n      week: false,\n      weekOfYear: false,\n      weekspanOfYear: false,\n      fullWeekOfYear: false,\n      lastWeekspanOfYear: false,\n      lastFullWeekOfYear: false,\n      weekOfMonth: false,\n      weekspanOfMonth: false,\n      fullWeekOfMonth: false,\n      lastWeekspanOfMonth: false,\n      lastFullWeekOfMonth: false\n    }\n  )\n];\n\n/**\n * The map of patterns keyed by their name.\n *\n * @see [[Pattern.withName]]\n */\nexport let PatternMap: { [name: string]: Pattern } = {};\n\nfor (let pattern of Patterns)\n{\n  PatternMap[ pattern.name ] = pattern;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Pattern.ts","\nimport { CalendarEvent } from './CalendarEvent';\nimport { Event } from './Event';\n\n\n/**\n * A function which takes two [[CalendarEvent]]s and returns a number which\n * instructs a sort which event goes before the other in a list.\n *\n * @param a The first event.\n * @param b The second event.\n * @returns When both events are considered equal `0` is returned, when the\n *    first event should go before the second event a negative number is\n *    returned, when the second event should go before the first event a\n *    positive number is returned.\n */\nexport type SortEvent<T, M> = (a: CalendarEvent<T, M>, b: CalendarEvent<T, M>) => number;\n\n/**\n * A class with [[SortEvent]] functions and functions which accept other\n * [[SortEvent]]s and return a new [[SortEvent]].\n *\n * ```typescript\n * // Sorts full day events first, then events in descending order based on start time.\n * Sorts.List([Sorts.FullDay, Sorts.Desc(Sorts.Start)]);\n * ```\n */\nexport class Sorts\n{\n\n  /**\n   * Sorts the two events by their start time - the earliest event being first\n   * in order.\n   *\n   * @param a The first event.\n   * @param b The second event.\n   * @returns The difference in time between the start of `a` and `b`.\n   * @see [[CalendarEvent.time]]\n   */\n  public static Start<T, M>(a: CalendarEvent<T, M>, b: CalendarEvent<T, M>): number\n  {\n    return a.time.start.time - b.time.start.time;\n  }\n\n  /**\n   * Sorts the two events by their end time - the earliest to end being first\n   * in order.\n   *\n   * @param a The first event.\n   * @param b The second event.\n   * @returns The difference in time between the end of `a` and `b`.\n   * @see [[CalendarEvent.time]]\n   */\n  public static End<T, M>(a: CalendarEvent<T, M>, b: CalendarEvent<T, M>): number\n  {\n    return a.time.end.time - b.time.end.time;\n  }\n\n  /**\n   * Sorts the two events placing the full day events before the timed events.\n   *\n   * @param a The first event.\n   * @param b The second event.\n   * @returns If both are timed or both are full day then `0` is returned,\n   *    otherwise `-1` is returned if `a` is full day and `1` is returned if\n   *    `b` is full day.\n   * @see [[CalendarEvent.fullDay]]\n   */\n  public static FullDay<T, M>(a: CalendarEvent<T, M>, b: CalendarEvent<T, M>): number\n  {\n    let af: number = a.fullDay ? 0 : 1;\n    let bf: number = b.fullDay ? 0 : 1;\n\n    return af - bf;\n  }\n\n  /**\n   * Sorts the two events placing the shorter events before the longer events.\n   * Full day or multiple day events actually take up a day and will be ordered\n   * last.\n   *\n   * @param a The first event.\n   * @param b The second event.\n   * @returns The difference in milliseconds between `a` and `b`.\n   * @see [[CalendarEvent.time]]\n   * @see [[DaySpan.millis]]\n   */\n  public static Duration<T, M>(a: CalendarEvent<T, M>, b: CalendarEvent<T, M>): number\n  {\n    return a.time.millis() - b.time.millis();\n  }\n\n  /**\n   * Returns a [[SortEvent]] that effectively orders the given sorter in the\n   * opposite (often descending) order.\n   *\n   * @param sorter The sorter to reverse.\n   * @returns A new sorter which reverses the one passed in.\n   */\n  public static Desc<T, M>(sorter: SortEvent<T, M>): SortEvent<T, M>\n  {\n    return (a, b) =>\n    {\n      return sorter( b, a );\n    };\n  }\n\n  /**\n   * Returns a [[SortEvent]] that orders the events based on a string in each\n   * event. A function must be supplied which takes an event of type `T` and\n   * returns a string.\n   *\n   * @param getString A function which returns a string from the event.\n   * @returns A sorter which sorts strings alphabetically.\n   */\n  public static Alphabetical<T, M>(getString: (event: Event<T, M>) => string): SortEvent<T, M>\n  {\n    return (a, b) =>\n    {\n      let as: string = getString( a.event ) || '';\n      let bs: string = getString( b.event ) || '';\n\n      return as.localeCompare( bs );\n    };\n  }\n\n  /**\n   * Returns a [[SortEvent]] that orders events based on a number in each event.\n   * A function must be supplied which takes an event of type `T` and returns\n   * a number.\n   *\n   * @param getOrder A function which returns a number from the event.\n   * @returns A sorter which sorts events based on a number in ascending order.\n   */\n  public static Ordered<T, M>(getOrder: (event: Event<T, M>) => number): SortEvent<T, M>\n  {\n    return (a, b) =>\n    {\n      let ao: number = getOrder( a.event );\n      let bo: number = getOrder( b.event );\n\n      return ao - bo;\n    };\n  }\n\n  /**\n   * Returns a [[SortEvent]] that orders events based on an array of sorters.\n   * The first sorter which returns a non-zero result is used.\n   *\n   * @param sorters A list of sorting functions to test one at a time.\n   * @returns A sorter which sorts based on a list of sorters.\n   */\n  public static List<T, M>(sorters: SortEvent<T, M>[]): SortEvent<T, M>\n  {\n    return (a, b) =>\n    {\n      for (let sorter of sorters)\n      {\n        let compare: number = sorter(a, b);\n\n        if (compare !== 0)\n        {\n          return compare;\n        }\n      }\n\n      return 0;\n    };\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Sort.ts","\nexport * from './Calendar';\nexport * from './CalendarDay';\nexport * from './CalendarEvent';\nexport * from './Event';\nexport * from './Constants';\nexport * from './Day';\nexport * from './DaySpan';\nexport * from './Frequency';\nexport * from './Functions';\nexport * from './Identifier';\nexport * from './Iterator';\nexport * from './Month';\nexport * from './Operation';\nexport * from './Parse';\nexport * from './Pattern';\nexport * from './Schedule';\nexport * from './ScheduleModifier';\nexport * from './Sort';\nexport * from './Suffix';\nexport * from './Time';\nexport * from './Units';\nexport * from './Weekday';\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts"],"sourceRoot":""}